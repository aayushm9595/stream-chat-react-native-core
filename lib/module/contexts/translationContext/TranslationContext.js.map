{"version":3,"sources":["TranslationContext.tsx"],"names":["isDayOrMoment","output","isSame","TranslationContext","React","createContext","t","key","tDateTimeParser","input","TranslationProvider","children","value","useTranslationContext","withTranslationContext","Component","WithTranslationContextComponent","props","translationContext","displayName"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AAEA;;;;AAOO,IAAMA,aAAa,GAAG,SAAhBA,aAAgB,CAC3BC,MAD2B;AAAA,SAG1BA,MAAD,CAAiCC,MAAjC,IAA2C,IAHhB;AAAA,CAAtB;;;;AAuBA,IAAMC,kBAAkB,GAAGC,kBAAMC,aAAN,CAA6C;AAC7EC,EAAAA,CAAC,EAAE,WAACC,GAAD;AAAA,WAASA,GAAT;AAAA,GAD0E;AAE7EC,EAAAA,eAAe,EAAE,yBAACC,KAAD;AAAA,WAAW,uBAAMA,KAAN,CAAX;AAAA;AAF4D,CAA7C,CAA3B;;;;AAKA,IAAMC,mBAEX,GAAG,SAFQA,mBAER;AAAA,MAAGC,QAAH,QAAGA,QAAH;AAAA,MAAaC,KAAb,QAAaA,KAAb;AAAA,SACH,gCAAC,kBAAD,CAAoB,QAApB;AAA6B,IAAA,KAAK,EAAEA,KAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,QADH,CADG;AAAA,CAFE;;;;AAQA,IAAME,qBAAqB,GAAG,SAAxBA,qBAAwB;AAAA,SAAM,uBAAWV,kBAAX,CAAN;AAAA,CAA9B;;;;AAEA,IAAMW,sBAAsB,GAAG,SAAzBA,sBAAyB,CACpCC,SADoC,EAEiB;AACrD,MAAMC,+BAA+B,GAAG,SAAlCA,+BAAkC,CACtCC,KADsC,EAEnC;AACH,QAAMC,kBAAkB,GAAGL,qBAAqB,EAAhD;AAEA,WAAO,gCAAC,SAAD,gCAAgBI,KAAhB,EAAiCC,kBAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;AACD,GAND;;AAOAF,EAAAA,+BAA+B,CAACG,WAAhC,8BAAuE,oCACrEJ,SADqE,CAAvE;AAGA,SAAOC,+BAAP;AACD,CAdM","sourcesContent":["import React, { useContext } from 'react';\nimport Dayjs from 'dayjs';\n\nimport { getDisplayName } from '../utils/getDisplayName';\n\nimport type { TFunction } from 'i18next';\nimport type { Moment } from 'moment';\n\nimport type { UnknownType } from '../../types/types';\n\nexport const isDayOrMoment = (\n  output: TDateTimeParserOutput,\n): output is Dayjs.Dayjs | Moment =>\n  (output as Dayjs.Dayjs | Moment).isSame != null;\n\nexport type TDateTimeParserInput = string | number | Date;\n\nexport type TDateTimeParserOutput =\n  | string\n  | number\n  | Date\n  | Dayjs.Dayjs\n  | Moment;\n\nexport type TDateTimeParser = (\n  input?: TDateTimeParserInput,\n) => TDateTimeParserOutput;\n\nexport type TranslationContextValue = {\n  t: TFunction | ((key: string) => string);\n  tDateTimeParser: TDateTimeParser;\n};\n\nexport const TranslationContext = React.createContext<TranslationContextValue>({\n  t: (key) => key,\n  tDateTimeParser: (input) => Dayjs(input),\n});\n\nexport const TranslationProvider: React.FC<{\n  value: TranslationContextValue;\n}> = ({ children, value }) => (\n  <TranslationContext.Provider value={value}>\n    {children}\n  </TranslationContext.Provider>\n);\n\nexport const useTranslationContext = () => useContext(TranslationContext);\n\nexport const withTranslationContext = <P extends UnknownType>(\n  Component: React.ComponentType<P>,\n): React.FC<Omit<P, keyof TranslationContextValue>> => {\n  const WithTranslationContextComponent = (\n    props: Omit<P, keyof TranslationContextValue>,\n  ) => {\n    const translationContext = useTranslationContext();\n\n    return <Component {...(props as P)} {...translationContext} />;\n  };\n  WithTranslationContextComponent.displayName = `WithTranslationContext${getDisplayName(\n    Component,\n  )}`;\n  return WithTranslationContextComponent;\n};\n"]}