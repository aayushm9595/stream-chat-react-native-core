{"version":3,"sources":["ChatContext.tsx"],"names":["ChatContext","React","createContext","ChatProvider","children","value","useChatContext","withChatContext","Component","WithChatContextComponent","props","chatContext","displayName"],"mappings":";;;;;;;;;;;AAAA;;AAEA;;;;AAgCO,IAAMA,WAAW,GAAGC,kBAAMC,aAAN,CAAoB,EAApB,CAApB;;;;AAEA,IAAMC,YAAY,GAAG,SAAfA,YAAe;AAAA,MAS1BC,QAT0B,QAS1BA,QAT0B;AAAA,MAU1BC,KAV0B,QAU1BA,KAV0B;AAAA,SAc1B,gCAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAGA,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,QADH,CAd0B;AAAA,CAArB;;;;AAmBA,IAAME,cAAc,GAAG,SAAjBA,cAAiB;AAAA,SAS3B,uBAAWN,WAAX,CAT2B;AAAA,CAAvB;;;;AAwBA,IAAMO,eAAe,GAAG,SAAlBA,eAAkB,CAU7BC,SAV6B,EAW6C;AAC1E,MAAMC,wBAAwB,GAAG,SAA3BA,wBAA2B,CAC/BC,KAD+B,EAE5B;AACH,QAAMC,WAAW,GAAGL,cAAc,EAAlC;AAEA,WAAO,gCAAC,SAAD,gCAAgBI,KAAhB,EAAiCC,WAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;AACD,GAND;;AAOAF,EAAAA,wBAAwB,CAACG,WAAzB,uBAAyD,oCACvDJ,SADuD,CAAzD;AAGA,SAAOC,wBAAP;AACD,CAvBM","sourcesContent":["import React, { PropsWithChildren, useContext } from 'react';\n\nimport { getDisplayName } from '../utils/getDisplayName';\n\nimport type { Channel, StreamChat } from 'stream-chat';\n\nimport type {\n  DefaultAttachmentType,\n  DefaultChannelType,\n  DefaultCommandType,\n  DefaultEventType,\n  DefaultMessageType,\n  DefaultReactionType,\n  DefaultUserType,\n  UnknownType,\n} from '../../types/types';\n\nexport type ChatContextValue<\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType\n> = {\n  client: StreamChat<At, Ch, Co, Ev, Me, Re, Us>;\n  connectionRecovering: boolean;\n  isOnline: boolean;\n  logger: (message?: string | undefined) => void;\n  setActiveChannel: (newChannel?: Channel<At, Ch, Co, Ev, Me, Re, Us>) => void;\n  channel?: Channel<At, Ch, Co, Ev, Me, Re, Us>;\n};\n\nexport const ChatContext = React.createContext({} as ChatContextValue);\n\nexport const ChatProvider = <\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType\n>({\n  children,\n  value,\n}: PropsWithChildren<{\n  value: ChatContextValue<At, Ch, Co, Ev, Me, Re, Us>;\n}>) => (\n  <ChatContext.Provider value={(value as unknown) as ChatContextValue}>\n    {children}\n  </ChatContext.Provider>\n);\n\nexport const useChatContext = <\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType\n>() =>\n  (useContext(ChatContext) as unknown) as ChatContextValue<\n    At,\n    Ch,\n    Co,\n    Ev,\n    Me,\n    Re,\n    Us\n  >;\n\n/**\n * Typescript currently does not support partial inference so if ChatContext\n * typing is desired while using the HOC withChatContext the Props for the\n * wrapped component must be provided as the first generic.\n */\nexport const withChatContext = <\n  P extends UnknownType,\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType\n>(\n  Component: React.ComponentType<P>,\n): React.FC<Omit<P, keyof ChatContextValue<At, Ch, Co, Ev, Me, Re, Us>>> => {\n  const WithChatContextComponent = (\n    props: Omit<P, keyof ChatContextValue<At, Ch, Co, Ev, Me, Re, Us>>,\n  ) => {\n    const chatContext = useChatContext<At, Ch, Co, Ev, Me, Re, Us>();\n\n    return <Component {...(props as P)} {...chatContext} />;\n  };\n  WithChatContextComponent.displayName = `WithChatContext${getDisplayName(\n    Component,\n  )}`;\n  return WithChatContextComponent;\n};\n"]}