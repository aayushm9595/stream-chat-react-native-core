{"version":3,"sources":["Spinner.tsx"],"names":["AnimatedView","Animated","createAnimatedComponent","View","Circle","theme","colors","primary","spinner","css","Spinner","rotateValue","Value","loop","timing","current","duration","easing","Easing","linear","toValue","useNativeDriver","start","stop","transform","rotate","interpolate","inputRange","outputRange"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AAEA;;;;;;;;;;;;;;AAEA,IAAMA,YAAY,GAAGC,sBAASC,uBAAT,CAAiCD,sBAASE,IAA1C,CAArB;;AAEA,IAAMC,MAAM,GAAG,8BAAOJ,YAAP,CAAH,oBACM;AAAA,MAAGK,KAAH,QAAGA,KAAH;AAAA,SAAeA,KAAK,CAACC,MAAN,CAAaC,OAA5B;AAAA,CADN,EASR;AAAA,MAAGF,KAAH,SAAGA,KAAH;AAAA,SAAeA,KAAK,CAACG,OAAN,CAAcC,GAA7B;AAAA,CATQ,CAAZ;;AAeO,IAAMC,OAAiB,GAAG,SAApBA,OAAoB,GAAM;AACrC,MAAMC,WAAW,GAAG,mBAAO,IAAIV,sBAASW,KAAb,CAAmB,CAAnB,CAAP,CAApB;;AAEA,MAAMC,IAAI,GAAGZ,sBAASY,IAAT,CACXZ,sBAASa,MAAT,CAAgBH,WAAW,CAACI,OAA5B,EAAqC;AACnCC,IAAAA,QAAQ,EAAE,GADyB;AAEnCC,IAAAA,MAAM,EAAEC,oBAAOC,MAFoB;AAGnCC,IAAAA,OAAO,EAAE,CAH0B;AAInCC,IAAAA,eAAe,EAAE;AAJkB,GAArC,CADW,CAAb;;AASA,wBAAU,YAAM;AACdR,IAAAA,IAAI,CAACS,KAAL;AACA,WAAOT,IAAI,CAACU,IAAZ;AACD,GAHD;AAKA,SACE,gCAAC,MAAD;AACE,IAAA,KAAK,EAAE;AACLC,MAAAA,SAAS,EAAE,CACT;AACEC,QAAAA,MAAM,EAAEd,WAAW,CAACI,OAAZ,CAAoBW,WAApB,CAAgC;AACtCC,UAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,CAD0B;AAEtCC,UAAAA,WAAW,EAAE,CAAC,MAAD,EAAS,QAAT;AAFyB,SAAhC;AADV,OADS;AADN,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAcD,CA/BM","sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { Animated, Easing } from 'react-native';\n\nimport { styled } from '../../styles/styledComponents';\n\nconst AnimatedView = Animated.createAnimatedComponent(Animated.View);\n\nconst Circle = styled(AnimatedView)`\n  border-color: ${({ theme }) => theme.colors.primary};\n  border-radius: 30px;\n  border-right-color: transparent;\n  border-width: 2px;\n  height: 30px;\n  justify-content: center;\n  margin: 5px;\n  width: 30px;\n  ${({ theme }) => theme.spinner.css};\n`;\n\n/**\n * @example ./Spinner.md\n */\nexport const Spinner: React.FC = () => {\n  const rotateValue = useRef(new Animated.Value(0));\n\n  const loop = Animated.loop(\n    Animated.timing(rotateValue.current, {\n      duration: 800,\n      easing: Easing.linear,\n      toValue: 1,\n      useNativeDriver: true,\n    }),\n  );\n\n  useEffect(() => {\n    loop.start();\n    return loop.stop;\n  });\n\n  return (\n    <Circle\n      style={{\n        transform: [\n          {\n            rotate: rotateValue.current.interpolate({\n              inputRange: [0, 1],\n              outputRange: ['0deg', '360deg'],\n            }),\n          },\n        ],\n      }}\n    />\n  );\n};\n"]}