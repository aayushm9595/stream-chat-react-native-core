{"version":3,"sources":["Thread.tsx"],"names":["NewThread","styled","View","theme","thread","newThread","css","NewThreadText","Text","text","Thread","props","additionalMessageInputProps","additionalMessageListProps","additionalParentMessageProps","autoFocus","disabled","MessageFromProps","Message","MessageInput","DefaultMessageInput","MessageList","DefaultMessageList","channel","MessageFromContext","loadMoreThread","t","loadMoreThreadAsync","id","reply_count","footerComponent","cid","editable"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\n\nimport { Message as DefaultMessage } from '../Message/Message';\nimport {\n  MessageInput as DefaultMessageInput,\n  MessageInputProps,\n} from '../MessageInput/MessageInput';\nimport {\n  MessageList as DefaultMessageList,\n  MessageListProps,\n} from '../MessageList/MessageList';\n\nimport { useChannelContext } from '../../contexts/channelContext/ChannelContext';\nimport { useMessagesContext } from '../../contexts/messagesContext/MessagesContext';\nimport { useThreadContext } from '../../contexts/threadContext/ThreadContext';\nimport { useTranslationContext } from '../../contexts/translationContext/TranslationContext';\nimport { styled } from '../../styles/styledComponents';\n\nimport type { Message as StreamMessage } from 'stream-chat';\n\nimport type { MessageSimpleProps } from '../Message/MessageSimple/MessageSimple';\n\nimport type {\n  DefaultAttachmentType,\n  DefaultChannelType,\n  DefaultCommandType,\n  DefaultEventType,\n  DefaultMessageType,\n  DefaultReactionType,\n  DefaultUserType,\n  UnknownType,\n} from '../../types/types';\n\nconst NewThread = styled.View`\n  align-items: center;\n  background-color: #f4f9ff;\n  border-radius: 4px;\n  margin: 10px;\n  padding: 8px;\n  ${({ theme }) => theme.thread.newThread.css};\n`;\n\nconst NewThreadText = styled.Text`\n  ${({ theme }) => theme.thread.newThread.text.css};\n`;\n\nexport type ThreadProps<\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType\n> = {\n  /**\n   * Additional props for underlying MessageInput component.\n   * Available props - https://getstream.github.io/stream-chat-react-native/#messageinput\n   * */\n  additionalMessageInputProps?: Partial<\n    MessageInputProps<At, Ch, Co, Ev, Me, Re, Us>\n  >;\n  /**\n   * Additional props for underlying MessageList component.\n   * Available props - https://getstream.github.io/stream-chat-react-native/#messagelist\n   * */\n  additionalMessageListProps?: Partial<\n    MessageListProps<At, Ch, Co, Ev, Me, Re, Us>\n  >;\n  /**\n   * Additional props for underlying Message component of parent message at the top.\n   * Available props - https://getstream.github.io/stream-chat-react-native/#message\n   * */\n  additionalParentMessageProps?: Partial<\n    MessageSimpleProps<At, Ch, Co, Ev, Me, Re, Us>\n  >;\n  /** Make input focus on mounting thread */\n  autoFocus?: boolean;\n  /** Disables the thread UI. So MessageInput and MessageList will be disabled. */\n  disabled?: boolean;\n  /**\n   * Custom UI component to display a message in MessageList component\n   * Default component (accepts the same props): [MessageSimple](https://getstream.github.io/stream-chat-react-native/#messagesimple)\n   * */\n  Message?: React.ComponentType<MessageSimpleProps<At, Ch, Co, Ev, Me, Re, Us>>;\n  /**\n   * **Customized MessageInput component to used within Thread instead of default MessageInput\n   * **Available from [MessageInput](https://getstream.github.io/stream-chat-react-native/#messageinput)**\n   */\n  MessageInput?: React.ComponentType<\n    MessageInputProps<At, Ch, Co, Ev, Me, Re, Us>\n  >;\n  /**\n   * **Customized MessageList component to used within Thread instead of default MessageList\n   * **Available from [MessageList](https://getstream.github.io/stream-chat-react-native/#messagelist)**\n   * */\n  MessageList?: React.ComponentType<\n    MessageListProps<At, Ch, Co, Ev, Me, Re, Us>\n  >;\n};\n\n/**\n * Thread - The Thread renders a parent message with a list of replies. Use the standard message list of the main channel's messages.\n * The thread is only used for the list of replies to a message.\n *\n * Thread is a consumer of [channel context](https://getstream.github.io/stream-chat-react-native/#channelcontext)\n * Underlying MessageList, MessageInput and Message components can be customized using props:\n * - additionalParentMessageProps\n * - additionalMessageListProps\n * - additionalMessageInputProps\n *\n * @example ./Thread.md\n */\nexport const Thread = <\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType\n>(\n  props: ThreadProps<At, Ch, Co, Ev, Me, Re, Us>,\n) => {\n  const {\n    additionalMessageInputProps,\n    additionalMessageListProps,\n    additionalParentMessageProps,\n    autoFocus = true,\n    disabled,\n    Message: MessageFromProps,\n    MessageInput = DefaultMessageInput,\n    MessageList = DefaultMessageList,\n  } = props;\n\n  const { channel } = useChannelContext<At, Ch, Co, Ev, Me, Re, Us>();\n  const { Message: MessageFromContext } = useMessagesContext<\n    At,\n    Ch,\n    Co,\n    Ev,\n    Me,\n    Re,\n    Us\n  >();\n  const { loadMoreThread, thread } = useThreadContext<\n    At,\n    Ch,\n    Co,\n    Ev,\n    Me,\n    Re,\n    Us\n  >();\n  const { t } = useTranslationContext();\n\n  useEffect(() => {\n    const loadMoreThreadAsync = async () => {\n      await loadMoreThread();\n    };\n\n    if (thread?.id && thread.reply_count) {\n      loadMoreThreadAsync();\n    }\n  }, []);\n\n  if (!thread) return null;\n\n  const Message = MessageFromProps || MessageFromContext;\n\n  const footerComponent = (\n    <>\n      <DefaultMessage<At, Ch, Co, Ev, Me, Re, Us>\n        groupStyles={['single']}\n        message={thread}\n        Message={Message}\n        threadList\n        {...additionalParentMessageProps}\n      />\n      <NewThread>\n        <NewThreadText>{t('Start of a new thread')}</NewThreadText>\n      </NewThread>\n    </>\n  );\n\n  return (\n    <React.Fragment key={`thread-${thread.id}-${channel?.cid || ''}`}>\n      <MessageList<At, Ch, Co, Ev, Me, Re, Us>\n        FooterComponent={footerComponent}\n        Message={Message}\n        threadList\n        {...additionalMessageListProps}\n      />\n      <MessageInput<At, Ch, Co, Ev, Me, Re, Us>\n        additionalTextInputProps={{ autoFocus, editable: !disabled }}\n        parent_id={thread.id as StreamMessage<At, Me, Us>['parent_id']}\n        {...additionalMessageInputProps}\n      />\n    </React.Fragment>\n  );\n};\n"]}