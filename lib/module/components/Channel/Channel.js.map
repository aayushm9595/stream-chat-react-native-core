{"version":3,"sources":["Channel.tsx"],"names":["Channel","props","additionalKeyboardAvoidingViewProps","Attachment","channel","children","disableIfFrozenChannel","disableKeyboardCompatibleView","doMarkReadRequest","doSendMessageRequest","doUpdateMessageRequest","emojiData","emojiDataDefault","EmptyStateIndicator","EmptyStateIndicatorDefault","keyboardBehavior","KeyboardCompatibleView","KeyboardCompatibleViewDefault","keyboardVerticalOffset","LoadingErrorIndicator","LoadingErrorIndicatorDefault","LoadingIndicator","LoadingIndicatorDefault","Message","threadProps","thread","client","t","editing","setEditing","error","setError","eventHistory","setEventHistory","hasMore","setHasMore","lastRead","setLastRead","loading","setLoading","loadingMore","setLoadingMore","members","setMembers","messages","setMessages","read","setRead","setThread","threadHasMore","setThreadHasMore","threadLoadingMore","setThreadLoadingMore","id","state","threads","threadMessages","setThreadMessages","typing","setTyping","watcherCount","setWatcherCount","watchers","setWatchers","initChannel","off","handleEvent","handleEventStateThrottled","cancel","loadMoreFinishedDebounced","loadMoreThreadFinishedDebounced","markRead","disconnected","getConfig","read_events","markReadThrottled","leading","trailing","copyChannelState","watcher_count","countUnread","addToEventHistory","event","lastMessageId","length","prevState","handleEventStateChange","channelState","updatedThreadMessages","message","updatedThread","messageToImmutable","type","listenToChanges","on","initError","initialized","cid","watch","Date","updateMessage","updatedMessage","extraState","addMessageSorted","parent_id","createMessagePreview","attachments","mentioned_users","text","extraFields","__html","created_at","html","userID","map","userId","reactions","status","user","sendMessageRequest","messageData","mentionedUser","messageResponse","sendMessage","console","log","filterErrorMessages","messagePreview","commands","messageInput","retrySendMessage","loadMoreFinished","updatedHasMore","newMessages","loadMore","oldestMessage","oldestID","limit","query","id_lt","queryResponse","warn","loadMoreThrottled","editMessage","setEditingState","clearEditingState","removeMessage","openThread","newThreadMessages","closeThread","loadMoreThreadFinished","newThreadHasMore","loadMoreThread","parentID","oldMessages","oldestMessageID","getReplies","channelContext","disabled","data","frozen","messagesContext","threadContext","fontWeight","padding"],"mappings":"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","sourcesContent":["import React, { PropsWithChildren, useEffect, useState } from 'react';\nimport { KeyboardAvoidingViewProps, Text } from 'react-native';\nimport debounce from 'lodash/debounce';\nimport throttle from 'lodash/throttle';\nimport Immutable from 'seamless-immutable';\nimport {\n  ChannelState,\n  Channel as ChannelType,\n  Event,\n  EventHandler,\n  logChatPromiseExecution,\n  MessageResponse,\n  SendMessageAPIResponse,\n  StreamChat,\n  Message as StreamMessage,\n  UpdatedMessage,\n} from 'stream-chat';\n\nimport { EmptyStateIndicator as EmptyStateIndicatorDefault } from '../Indicators/EmptyStateIndicator';\nimport { LoadingErrorIndicator as LoadingErrorIndicatorDefault } from '../Indicators/LoadingErrorIndicator';\nimport { LoadingIndicator as LoadingIndicatorDefault } from '../Indicators/LoadingIndicator';\nimport { KeyboardCompatibleView as KeyboardCompatibleViewDefault } from '../KeyboardCompatibleView/KeyboardCompatibleView';\n\nimport {\n  ChannelContextValue,\n  ChannelProvider,\n} from '../../contexts/channelContext/ChannelContext';\nimport { useChatContext } from '../../contexts/chatContext/ChatContext';\nimport {\n  MessagesContextValue,\n  MessagesProvider,\n} from '../../contexts/messagesContext/MessagesContext';\nimport { SuggestionsProvider } from '../../contexts/suggestionsContext/SuggestionsContext';\nimport {\n  ThreadContextValue,\n  ThreadProvider,\n} from '../../contexts/threadContext/ThreadContext';\nimport { useTranslationContext } from '../../contexts/translationContext/TranslationContext';\nimport { emojiData as emojiDataDefault } from '../../utils/utils';\n\nimport type { LoadingErrorProps } from '../Indicators/LoadingErrorIndicator';\nimport type { LoadingProps } from '../Indicators/LoadingIndicator';\nimport type { Message as MessageType } from '../MessageList/utils/insertDates';\n\nimport type {\n  DefaultAttachmentType,\n  DefaultChannelType,\n  DefaultCommandType,\n  DefaultEventType,\n  DefaultMessageType,\n  DefaultReactionType,\n  DefaultUserType,\n  UnknownType,\n} from '../../types/types';\nimport { generateRandomId } from '../../utils/generateRandomId';\n\nexport type ChannelProps<\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType\n> = {\n  /**\n   * The currently active channel\n   */\n  channel: ChannelContextValue<At, Ch, Co, Ev, Me, Re, Us>['channel'];\n  /**\n   * Additional props passed to keyboard avoiding view\n   */\n  additionalKeyboardAvoidingViewProps?: Partial<KeyboardAvoidingViewProps>;\n  /**\n   * Custom UI component to display attachments on individual messages\n   * Default component (accepts the same props): [Attachment](https://getstream.github.io/stream-chat-react-native/#attachment)\n   */\n  Attachment?: MessagesContextValue<At, Ch, Co, Ev, Me, Re, Us>['Attachment'];\n  /**\n   * Disables the channel UI if the channel is frozen\n   */\n  disableIfFrozenChannel?: boolean;\n  /**\n   * When true, disables the KeyboardCompatibleView wrapper\n   *\n   * Channel internally uses the [KeyboardCompatibleView](https://github.com/GetStream/stream-chat-react-native/blob/master/src/components/KeyboardCompatibleView/KeyboardCompatibleView.tsx)\n   * component to adjust the height of Channel when the keyboard is opened or dismissed. This prop provides the ability to disable this functionality in case you\n   * want to use [KeyboardAvoidingView](https://facebook.github.io/react-native/docs/keyboardavoidingview) or handle dismissal yourself.\n   * KeyboardAvoidingView works well when your component occupies 100% of screen height, otherwise it may raise some issues.\n   */\n  disableKeyboardCompatibleView?: boolean;\n  /**\n   * Overrides the Stream default mark channel read request (Advanced usage only)\n   * @param channel Channel object\n   */\n  doMarkReadRequest?: (\n    channel: ChannelType<At, Ch, Co, Ev, Me, Re, Us>,\n  ) => void;\n  /**\n   * Overrides the Stream default send message request (Advanced usage only)\n   * @param channelId\n   * @param messageData Message object\n   */\n  doSendMessageRequest?: (\n    channelId: string,\n    messageData: StreamMessage<At, Me, Us>,\n  ) => Promise<SendMessageAPIResponse<At, Ch, Co, Me, Re, Us>>;\n  /**\n   * Overrides the Stream default update message request (Advanced usage only)\n   * @param channelId\n   * @param updatedMessage UpdatedMessage object\n   */\n  doUpdateMessageRequest?: (\n    channelId: string,\n    updatedMessage: UpdatedMessage<At, Ch, Co, Me, Re, Us>,\n  ) => ReturnType<StreamChat<At, Ch, Co, Ev, Me, Re, Us>['updateMessage']>;\n  emojiData?: MessagesContextValue<At, Ch, Co, Ev, Me, Re, Us>['emojiData'];\n  /**\n   * Custom empty state indicator to override the Stream default\n   */\n  EmptyStateIndicator?: ChannelContextValue<\n    At,\n    Ch,\n    Co,\n    Ev,\n    Me,\n    Re,\n    Us\n  >['EmptyStateIndicator'];\n  keyboardBehavior?: KeyboardAvoidingViewProps['behavior'];\n  /**\n   * Custom wrapper component that handles height adjustment of Channel component when keyboard is opened or dismissed\n   * Default component (accepts the same props): [KeyboardCompatibleView](https://github.com/GetStream/stream-chat-react-native/blob/master/src/components/KeyboardCompatibleView/KeyboardCompatibleView.tsx)\n   *\n   * **Example:**\n   *\n   * ```\n   * <Channel\n   *  channel={channel}\n   *  KeyboardCompatibleView={(props) => {\n   *    return (\n   *      <KeyboardCompatibleView>\n   *        {props.children}\n   *      </KeyboardCompatibleView>\n   *    )\n   *  }}\n   * />\n   * ```\n   */\n  KeyboardCompatibleView?: React.ComponentType<KeyboardAvoidingViewProps>;\n  keyboardVerticalOffset?: number;\n  /**\n   * Custom loading error indicator to override the Stream default\n   */\n  LoadingErrorIndicator?: React.ComponentType<LoadingErrorProps>;\n  /**\n   * Custom loading indicator to override the Stream default\n   */\n  LoadingIndicator?: React.ComponentType<LoadingProps>;\n  /**\n   * Custom UI component to display a message in MessageList component\n   * Default component (accepts the same props): [MessageSimple](https://getstream.github.io/stream-chat-react-native/#messagesimple)\n   */\n  Message?: MessagesContextValue<At, Ch, Co, Ev, Me, Re, Us>['Message'];\n  thread?: ThreadContextValue<At, Ch, Co, Ev, Me, Re, Us>['thread'];\n};\n\n/**\n *\n * The wrapper component for a chat channel. Channel needs to be placed inside a Chat component\n * to receive the StreamChat client instance. MessageList, Thread, and MessageInput must be\n * children of the Channel component to receive the ChannelContext.\n *\n * @example ./Channel.md\n */\nexport const Channel = <\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType\n>(\n  props: PropsWithChildren<ChannelProps<At, Ch, Co, Ev, Me, Re, Us>>,\n) => {\n  const {\n    additionalKeyboardAvoidingViewProps,\n    Attachment,\n    channel,\n    children,\n    disableIfFrozenChannel = true,\n    disableKeyboardCompatibleView = false,\n    doMarkReadRequest,\n    doSendMessageRequest,\n    doUpdateMessageRequest,\n    emojiData = emojiDataDefault,\n    EmptyStateIndicator = EmptyStateIndicatorDefault,\n    keyboardBehavior,\n    KeyboardCompatibleView = KeyboardCompatibleViewDefault,\n    keyboardVerticalOffset,\n    LoadingErrorIndicator = LoadingErrorIndicatorDefault,\n    LoadingIndicator = LoadingIndicatorDefault,\n    Message,\n    thread: threadProps,\n  } = props;\n\n  const { client } = useChatContext<At, Ch, Co, Ev, Me, Re, Us>();\n  const { t } = useTranslationContext();\n\n  const [editing, setEditing] = useState<\n    boolean | MessageType<At, Ch, Co, Ev, Me, Re, Us>\n  >(false);\n  const [error, setError] = useState(false);\n  /**\n   * We save the events in state so that we can display event message\n   * next to the message after which it was received, in MessageList.\n   *\n   * e.g., eventHistory = {\n   *   message_id_1: [\n   *     { ...event_obj_received_after_message_id_1__1 },\n   *     { ...event_obj_received_after_message_id_1__2 },\n   *     { ...event_obj_received_after_message_id_1__3 },\n   *   ],\n   *   message_id_2: [\n   *     { ...event_obj_received_after_message_id_2__1 },\n   *     { ...event_obj_received_after_message_id_2__2 },\n   *     { ...event_obj_received_after_message_id_2__3 },\n   *   ]\n   * }\n   */\n  const [eventHistory, setEventHistory] = useState<\n    ChannelContextValue<At, Ch, Co, Ev, Me, Re, Us>['eventHistory']\n  >({});\n  const [hasMore, setHasMore] = useState(true);\n  const [lastRead, setLastRead] = useState<\n    ChannelContextValue<At, Ch, Co, Ev, Me, Re, Us>['lastRead']\n  >();\n  const [loading, setLoading] = useState(true);\n  const [loadingMore, setLoadingMore] = useState(false);\n  const [members, setMembers] = useState<\n    ChannelContextValue<At, Ch, Co, Ev, Me, Re, Us>['members']\n  >({} as ChannelContextValue<At, Ch, Co, Ev, Me, Re, Us>['members']);\n  const [messages, setMessages] = useState<\n    MessagesContextValue<At, Ch, Co, Ev, Me, Re, Us>['messages']\n  >(Immutable([]));\n  const [read, setRead] = useState<\n    ChannelContextValue<At, Ch, Co, Ev, Me, Re, Us>['read']\n  >({} as ChannelContextValue<At, Ch, Co, Ev, Me, Re, Us>['read']);\n  const [thread, setThread] = useState<\n    ThreadContextValue<At, Ch, Co, Ev, Me, Re, Us>['thread']\n  >(threadProps || null);\n  const [threadHasMore, setThreadHasMore] = useState(true);\n  const [threadLoadingMore, setThreadLoadingMore] = useState(false);\n  const [threadMessages, setThreadMessages] = useState<\n    ThreadContextValue<At, Ch, Co, Ev, Me, Re, Us>['threadMessages']\n  >(\n    (threadProps?.id && channel?.state?.threads?.[threadProps.id]) ||\n      Immutable([]),\n  );\n  const [typing, setTyping] = useState<\n    ChannelContextValue<At, Ch, Co, Ev, Me, Re, Us>['typing']\n  >({} as ChannelContextValue<At, Ch, Co, Ev, Me, Re, Us>['typing']);\n  const [watcherCount, setWatcherCount] = useState<\n    ChannelContextValue<At, Ch, Co, Ev, Me, Re, Us>['watcherCount']\n  >();\n  const [watchers, setWatchers] = useState<\n    ChannelContextValue<At, Ch, Co, Ev, Me, Re, Us>['watchers']\n  >({} as ChannelContextValue<At, Ch, Co, Ev, Me, Re, Us>['watchers']);\n\n  useEffect(() => {\n    if (channel) initChannel();\n\n    return () => {\n      client.off('connection.recovered', handleEvent);\n      channel?.off?.(handleEvent);\n      handleEventStateThrottled.cancel();\n      loadMoreFinishedDebounced.cancel();\n      loadMoreThreadFinishedDebounced.cancel();\n    };\n  }, [channel]);\n\n  useEffect(() => {\n    if (threadProps) {\n      setThread(threadProps);\n      if (channel && threadProps?.id) {\n        setThreadMessages(channel.state.threads?.[threadProps.id] || []);\n      }\n    }\n  }, [threadProps]);\n\n  /**\n   * CHANNEL METHODS\n   */\n\n  const markRead: ChannelContextValue<\n    At,\n    Ch,\n    Co,\n    Ev,\n    Me,\n    Re,\n    Us\n  >['markRead'] = () => {\n    if (channel?.disconnected || !channel?.getConfig?.()?.read_events) {\n      return;\n    }\n\n    if (doMarkReadRequest) {\n      doMarkReadRequest(channel);\n    } else {\n      logChatPromiseExecution(channel.markRead(), 'mark read');\n    }\n  };\n\n  const markReadThrottled = throttle(markRead, 500, {\n    leading: true,\n    trailing: true,\n  });\n\n  const copyChannelState = () => {\n    setLoading(false);\n    if (channel) {\n      setMembers(channel.state.members);\n      setMessages(channel.state.messages);\n      setRead(channel.state.read);\n      setTyping(channel.state.typing);\n      setWatcherCount(channel.state.watcher_count);\n      setWatchers(channel.state.watchers);\n\n      if (channel.countUnread() > 0) {\n        markReadThrottled();\n      }\n    }\n  };\n\n  const addToEventHistory = (event: Event<At, Ch, Co, Ev, Me, Re, Us>) => {\n    const lastMessageId = messages.length\n      ? messages[messages.length - 1].id\n      : 'none';\n\n    if (lastMessageId) {\n      setEventHistory((prevState) => {\n        if (!prevState[lastMessageId]) {\n          return { ...prevState, [lastMessageId]: [event] };\n        } else {\n          return {\n            ...prevState,\n            [lastMessageId]: [...prevState[lastMessageId], event],\n          };\n        }\n      });\n    }\n  };\n\n  const handleEventStateChange = (\n    channelState: ChannelState<At, Ch, Co, Ev, Me, Re, Us>,\n  ) => {\n    setMessages(channelState.messages);\n    setRead(channelState.read);\n    setTyping(channelState.typing);\n    setWatcherCount(channelState.watcher_count);\n    setWatchers(channelState.watchers);\n  };\n\n  const handleEventStateThrottled = throttle(handleEventStateChange, 500, {\n    leading: true,\n    trailing: true,\n  });\n\n  const handleEvent: EventHandler<At, Ch, Co, Ev, Me, Re, Us> = (event) => {\n    if (thread) {\n      const updatedThreadMessages =\n        (thread.id && channel && channel.state.threads[thread.id]) ||\n        threadMessages;\n      setThreadMessages(updatedThreadMessages);\n    }\n\n    if (channel && thread && event.message?.id === thread.id) {\n      const updatedThread = channel.state.messageToImmutable(event.message);\n      setThread(updatedThread);\n    }\n\n    if (event.type === 'member.added') addToEventHistory(event);\n    if (event.type === 'member.removed') addToEventHistory(event);\n\n    if (channel) {\n      handleEventStateThrottled(channel.state);\n    }\n  };\n\n  const listenToChanges = () => {\n    // The more complex sync logic is done in Chat.js\n    // listen to client.connection.recovered and all channel events\n    client.on('connection.recovered', handleEvent);\n    channel?.on(handleEvent);\n  };\n\n  const initChannel = async () => {\n    let initError = false;\n    setError(false);\n    setLoading(true);\n\n    if (channel && !channel.initialized && channel.cid) {\n      try {\n        await channel.watch();\n      } catch (err) {\n        setError(err);\n        setLoading(false);\n        initError = true;\n      }\n    }\n\n    setLastRead(new Date());\n    if (!initError) {\n      copyChannelState();\n      listenToChanges();\n    }\n  };\n\n  /**\n   * MESSAGE METHODS\n   */\n\n  const updateMessage: MessagesContextValue<\n    At,\n    Ch,\n    Co,\n    Ev,\n    Me,\n    Re,\n    Us\n  >['updateMessage'] = (updatedMessage, extraState = {}) => {\n    if (channel) {\n      channel.state.addMessageSorted(updatedMessage, true);\n      if (thread && updatedMessage.parent_id) {\n        extraState.threadMessages =\n          channel.state.threads[updatedMessage.parent_id] || [];\n        setThreadMessages(extraState.threadMessages);\n      }\n\n      setMessages(channel.state.messages);\n    }\n  };\n\n  const createMessagePreview = ({\n    attachments,\n    mentioned_users,\n    parent_id,\n    text,\n    ...extraFields\n  }: Partial<StreamMessage<At, Me, Us>>) => {\n    const message = {\n      __html: text,\n      attachments,\n      created_at: new Date(),\n      html: text,\n      id: `${client.userID}-${generateRandomId()}`,\n      mentioned_users:\n        mentioned_users?.map((userId) => ({\n          id: userId,\n        })) || [],\n      parent_id,\n      reactions: [],\n      status: 'sending',\n      text,\n      type: 'regular',\n      user: {\n        id: client.userID,\n        ...client.user,\n      },\n      ...extraFields,\n    };\n\n    return (message as unknown) as MessageResponse<At, Ch, Co, Me, Re, Us>;\n  };\n\n  const sendMessageRequest = async (\n    message: MessageResponse<At, Ch, Co, Me, Re, Us>,\n  ) => {\n    const {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      __html,\n      attachments,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      created_at,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      html,\n      id,\n      mentioned_users,\n      parent_id,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      reactions,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      status,\n      text,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      type,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      user,\n      ...extraFields\n    } = message;\n\n    const messageData = {\n      attachments,\n      id,\n      mentioned_users:\n        mentioned_users?.map((mentionedUser) => mentionedUser.id) || [],\n      parent_id,\n      text,\n      ...extraFields,\n    } as StreamMessage<At, Me, Us>;\n\n    try {\n      let messageResponse = {} as SendMessageAPIResponse<\n        At,\n        Ch,\n        Co,\n        Me,\n        Re,\n        Us\n      >;\n\n      if (doSendMessageRequest) {\n        messageResponse = await doSendMessageRequest(\n          channel?.cid || '',\n          messageData,\n        );\n      } else if (channel) {\n        messageResponse = await channel.sendMessage(messageData);\n      }\n\n      if (messageResponse.message) {\n        messageResponse.message.status = 'received';\n        updateMessage(messageResponse.message);\n      }\n    } catch (err) {\n      console.log(err);\n      message.status = 'failed';\n      updateMessage(message);\n    }\n  };\n\n  const sendMessage: MessagesContextValue<\n    At,\n    Ch,\n    Co,\n    Ev,\n    Me,\n    Re,\n    Us\n  >['sendMessage'] = async (message) => {\n    if (channel?.state?.filterErrorMessages) {\n      channel.state.filterErrorMessages();\n    }\n\n    const messagePreview = createMessagePreview({\n      ...message,\n      attachments: message.attachments || [],\n    });\n\n    updateMessage(messagePreview, {\n      commands: [],\n      messageInput: '',\n    });\n\n    await sendMessageRequest(messagePreview);\n  };\n\n  const retrySendMessage: MessagesContextValue<\n    At,\n    Ch,\n    Co,\n    Ev,\n    Me,\n    Re,\n    Us\n  >['retrySendMessage'] = async (message) => {\n    message = { ...message, status: 'sending' };\n    updateMessage(message);\n    await sendMessageRequest(message);\n  };\n\n  const loadMoreFinished = (\n    updatedHasMore: boolean,\n    newMessages: ChannelState<At, Ch, Co, Ev, Me, Re, Us>['messages'],\n  ) => {\n    setLoadingMore(false);\n    setHasMore(updatedHasMore);\n    setMessages(newMessages);\n  };\n\n  // hard limit to prevent you from scrolling faster than 1 page per 2 seconds\n  const loadMoreFinishedDebounced = debounce(loadMoreFinished, 2000, {\n    leading: true,\n    trailing: true,\n  });\n\n  const loadMore = async () => {\n    if (loadingMore || hasMore === false) return;\n    setLoadingMore(true);\n\n    if (!messages.length) {\n      return setLoadingMore(false);\n    }\n\n    const oldestMessage = messages && messages[0];\n\n    if (oldestMessage && oldestMessage.status !== 'received') {\n      return setLoadingMore(false);\n    }\n\n    const oldestID = oldestMessage && oldestMessage.id;\n    const limit = 100;\n\n    try {\n      if (channel) {\n        const queryResponse = await channel.query({\n          messages: { id_lt: oldestID, limit },\n        });\n\n        const updatedHasMore = queryResponse.messages.length === limit;\n        loadMoreFinishedDebounced(updatedHasMore, channel.state.messages);\n      }\n    } catch (err) {\n      console.warn('Message pagination request failed with error', err);\n      return setLoadingMore(false);\n    }\n  };\n\n  const loadMoreThrottled: MessagesContextValue<\n    At,\n    Ch,\n    Co,\n    Ev,\n    Me,\n    Re,\n    Us\n  >['loadMore'] = throttle(loadMore, 2000, {\n    leading: true,\n    trailing: true,\n  });\n\n  const editMessage: MessagesContextValue<\n    At,\n    Ch,\n    Co,\n    Ev,\n    Me,\n    Re,\n    Us\n  >['editMessage'] = (updatedMessage) =>\n    doUpdateMessageRequest\n      ? doUpdateMessageRequest(channel?.cid || '', updatedMessage)\n      : client.updateMessage(updatedMessage);\n\n  const setEditingState: MessagesContextValue<\n    At,\n    Ch,\n    Co,\n    Ev,\n    Me,\n    Re,\n    Us\n  >['setEditingState'] = (message) => {\n    setEditing(message);\n  };\n\n  const clearEditingState: MessagesContextValue<\n    At,\n    Ch,\n    Co,\n    Ev,\n    Me,\n    Re,\n    Us\n  >['clearEditingState'] = () => setEditing(false);\n\n  const removeMessage: MessagesContextValue<\n    At,\n    Ch,\n    Co,\n    Ev,\n    Me,\n    Re,\n    Us\n  >['removeMessage'] = (message) => {\n    if (channel) {\n      channel.state.removeMessage(message);\n      setMessages(channel.state.messages);\n    }\n  };\n\n  /**\n   * THREAD METHODS\n   */\n\n  const openThread: ThreadContextValue<\n    At,\n    Ch,\n    Co,\n    Ev,\n    Me,\n    Re,\n    Us\n  >['openThread'] = (message) => {\n    const newThreadMessages = message?.id\n      ? channel?.state?.threads[message.id] || Immutable([])\n      : Immutable([]);\n    setThread(message);\n    setThreadMessages(newThreadMessages);\n  };\n\n  const closeThread: ThreadContextValue<\n    At,\n    Ch,\n    Co,\n    Ev,\n    Me,\n    Re,\n    Us\n  >['closeThread'] = () => {\n    setThread(null);\n    setThreadMessages(Immutable([]));\n  };\n\n  const loadMoreThreadFinished = (\n    newThreadHasMore: boolean,\n    updatedThreadMessages: ChannelState<\n      At,\n      Ch,\n      Co,\n      Ev,\n      Me,\n      Re,\n      Us\n    >['threads'][string],\n  ) => {\n    setThreadHasMore(newThreadHasMore);\n    setThreadLoadingMore(false);\n    setThreadMessages(updatedThreadMessages);\n  };\n\n  // hard limit to prevent you from scrolling faster than 1 page per 2 seconds\n  const loadMoreThreadFinishedDebounced = debounce(\n    loadMoreThreadFinished,\n    2000,\n    {\n      leading: true,\n      trailing: true,\n    },\n  );\n\n  const loadMoreThread: ThreadContextValue<\n    At,\n    Ch,\n    Co,\n    Ev,\n    Me,\n    Re,\n    Us\n  >['loadMoreThread'] = async () => {\n    if (threadLoadingMore || !thread?.id) return;\n    setThreadLoadingMore(true);\n\n    if (channel) {\n      const parentID = thread.id;\n\n      const oldMessages = channel.state.threads[parentID] || [];\n      const oldestMessageID = oldMessages?.[0]?.id;\n\n      const limit = 50;\n      const queryResponse = await channel.getReplies(parentID, {\n        id_lt: oldestMessageID,\n        limit,\n      });\n\n      const updatedHasMore = queryResponse.messages.length === limit;\n      const updatedThreadMessages = channel.state.threads[parentID] || [];\n      loadMoreThreadFinishedDebounced(updatedHasMore, updatedThreadMessages);\n    }\n  };\n\n  const channelContext: ChannelContextValue<At, Ch, Co, Ev, Me, Re, Us> = {\n    channel,\n    disabled: channel?.data?.frozen && disableIfFrozenChannel,\n    EmptyStateIndicator,\n    error,\n    eventHistory,\n    lastRead,\n    loading,\n    LoadingIndicator,\n    markRead: markReadThrottled,\n    members,\n    read,\n    setLastRead,\n    typing,\n    watcherCount,\n    watchers,\n  };\n\n  const messagesContext: MessagesContextValue<At, Ch, Co, Ev, Me, Re, Us> = {\n    Attachment,\n    clearEditingState,\n    editing,\n    editMessage,\n    emojiData,\n    hasMore,\n    loadingMore,\n    loadMore: loadMoreThrottled,\n    Message,\n    messages,\n    removeMessage,\n    retrySendMessage,\n    sendMessage,\n    setEditingState,\n    updateMessage,\n  };\n\n  const threadContext: ThreadContextValue<At, Ch, Co, Ev, Me, Re, Us> = {\n    closeThread,\n    loadMoreThread,\n    openThread,\n    thread,\n    threadHasMore,\n    threadLoadingMore,\n    threadMessages,\n  };\n\n  if (!channel || error) {\n    return (\n      <LoadingErrorIndicator\n        error={error}\n        listType='message'\n        retry={() => {\n          loadMoreThrottled();\n        }}\n      />\n    );\n  }\n\n  if (!channel?.cid || !channel.watch) {\n    return (\n      <Text style={{ fontWeight: 'bold', padding: 16 }} testID='no-channel'>\n        {t('Please select a channel first')}\n      </Text>\n    );\n  }\n\n  return (\n    <KeyboardCompatibleView\n      behavior={keyboardBehavior}\n      enabled={!disableKeyboardCompatibleView}\n      keyboardVerticalOffset={keyboardVerticalOffset}\n      {...additionalKeyboardAvoidingViewProps}\n    >\n      <ChannelProvider<At, Ch, Co, Ev, Me, Re, Us> value={channelContext}>\n        <MessagesProvider<At, Ch, Co, Ev, Me, Re, Us> value={messagesContext}>\n          <ThreadProvider<At, Ch, Co, Ev, Me, Re, Us> value={threadContext}>\n            <SuggestionsProvider<Co, Us>>{children}</SuggestionsProvider>\n          </ThreadProvider>\n        </MessagesProvider>\n      </ChannelProvider>\n    </KeyboardCompatibleView>\n  );\n};\n"]}