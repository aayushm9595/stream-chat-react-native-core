{"version":3,"sources":["LoadingErrorIndicator.tsx"],"names":["Container","styled","TouchableOpacity","theme","loadingErrorIndicator","container","css","ErrorText","Text","errorText","RetryText","retryText","LoadingErrorWrapper","props","children","onPress","text","LoadingErrorIndicator","listType","retry","t"],"mappings":";;;;;;;;;AAAA;;AAEA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,SAAS,GAAGC,yBAAOC,gBAAV,oBAIX;AAAA,MAAGC,KAAH,QAAGA,KAAH;AAAA,SAAeA,KAAK,CAACC,qBAAN,CAA4BC,SAA5B,CAAsCC,GAArD;AAAA,CAJW,CAAf;;AAOA,IAAMC,SAAS,GAAGN,yBAAOO,IAAV,qBAIX;AAAA,MAAGL,KAAH,SAAGA,KAAH;AAAA,SAAeA,KAAK,CAACC,qBAAN,CAA4BK,SAA5B,CAAsCH,GAArD;AAAA,CAJW,CAAf;;AAOA,IAAMI,SAAS,GAAGT,yBAAOO,IAAV,qBAGX;AAAA,MAAGL,KAAH,SAAGA,KAAH;AAAA,SAAeA,KAAK,CAACC,qBAAN,CAA4BO,SAA5B,CAAsCL,GAArD;AAAA,CAHW,CAAf;;AAWA,IAAMM,mBAAuD,GAAG,SAA1DA,mBAA0D,CAACC,KAAD,EAAW;AAAA,MACjEC,QADiE,GACrCD,KADqC,CACjEC,QADiE;AAAA,MACvDC,OADuD,GACrCF,KADqC,CACvDE,OADuD;AAAA,MAC9CC,IAD8C,GACrCH,KADqC,CAC9CG,IAD8C;AAGzE,SACE,gCAAC,SAAD;AAAW,IAAA,OAAO,EAAED,OAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,gCAAC,SAAD;AAAW,IAAA,MAAM,EAAC,eAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAmCC,IAAnC,CADF,EAEGF,QAFH,CADF;AAMD,CATD;;AAkBO,IAAMG,qBAAkD,GAAG,SAArDA,qBAAqD,CAACJ,KAAD,EAAW;AAAA,MACnEK,QADmE,GAClCL,KADkC,CACnEK,QADmE;AAAA,qBAClCL,KADkC,CACzDM,KADyD;AAAA,MACzDA,KADyD,6BACjD;AAAA,WAAM,IAAN;AAAA,GADiD;;AAAA,8BAG7D,gDAH6D;AAAA,MAGnEC,CAHmE,yBAGnEA,CAHmE;;AAK3E,UAAQF,QAAR;AACE,SAAK,SAAL;AACE,aACE,gCAAC,mBAAD;AACE,QAAA,OAAO,EAAEC,KADX;AAEE,QAAA,IAAI,EAAEC,CAAC,CAAC,gCAAD,CAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAIE,gCAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAJF,CADF;;AAQF,SAAK,SAAL;AACE,aACE,gCAAC,mBAAD;AACE,QAAA,OAAO,EAAED,KADX;AAEE,QAAA,IAAI,EAAEC,CAAC,CAAC,6CAAD,CAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;;AAMF;AACE,aAAO,gCAAC,mBAAD;AAAqB,QAAA,IAAI,EAAEA,CAAC,CAAC,eAAD,CAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AAlBJ;AAoBD,CAzBM","sourcesContent":["import React from 'react';\n\nimport { useTranslationContext } from '../../contexts/translationContext/TranslationContext';\nimport { styled } from '../../styles/styledComponents';\n\nconst Container = styled.TouchableOpacity`\n  align-items: center;\n  height: 100%;\n  justify-content: center;\n  ${({ theme }) => theme.loadingErrorIndicator.container.css};\n`;\n\nconst ErrorText = styled.Text`\n  font-size: 14px;\n  font-weight: 600;\n  margin-top: 20px;\n  ${({ theme }) => theme.loadingErrorIndicator.errorText.css};\n`;\n\nconst RetryText = styled.Text`\n  font-size: 30px;\n  font-weight: 600;\n  ${({ theme }) => theme.loadingErrorIndicator.retryText.css};\n`;\n\ntype LoadingErrorWrapperProps = {\n  text: string;\n  onPress?: () => void;\n};\n\nconst LoadingErrorWrapper: React.FC<LoadingErrorWrapperProps> = (props) => {\n  const { children, onPress, text } = props;\n\n  return (\n    <Container onPress={onPress}>\n      <ErrorText testID='loading-error'>{text}</ErrorText>\n      {children}\n    </Container>\n  );\n};\n\nexport type LoadingErrorProps = {\n  error?: boolean;\n  listType?: 'channel' | 'message' | 'default';\n  loadNextPage?: () => Promise<void>;\n  retry?: () => Promise<void> | void;\n};\n\nexport const LoadingErrorIndicator: React.FC<LoadingErrorProps> = (props) => {\n  const { listType, retry = () => null } = props;\n\n  const { t } = useTranslationContext();\n\n  switch (listType) {\n    case 'channel':\n      return (\n        <LoadingErrorWrapper\n          onPress={retry}\n          text={t('Error loading channel list ...')}\n        >\n          <RetryText>‚ü≥</RetryText>\n        </LoadingErrorWrapper>\n      );\n    case 'message':\n      return (\n        <LoadingErrorWrapper\n          onPress={retry}\n          text={t('Error loading messages for this channel ...')}\n        />\n      );\n    default:\n      return <LoadingErrorWrapper text={t('Error loading')} />;\n  }\n};\n"]}