{"version":3,"sources":["ChannelPreview.tsx"],"names":["UnMemoizedChannelPreview","props","channel","forceUpdate","Preview","ChannelPreviewMessenger","client","lastMessage","setLastMessage","countUnread","unread","setUnread","latestMessagePreview","handleEvent","event","message","type","on","off","handleReadEvent","user","id","userID","areEqual","prevProps","nextProps","previousLast","state","last_message_at","nextLast","ChannelPreview","React","memo"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\n\nimport { ChannelPreviewMessenger } from './ChannelPreviewMessenger';\nimport { useLatestMessagePreview } from './hooks/useLatestMessagePreview';\n\nimport { useChatContext } from '../../contexts/chatContext/ChatContext';\n\nimport type {\n  Channel,\n  ChannelState,\n  Event,\n  MessageResponse,\n} from 'stream-chat';\n\nimport type { ChannelListMessengerProps } from '../ChannelList/ChannelListMessenger';\nimport type {\n  DefaultAttachmentType,\n  DefaultChannelType,\n  DefaultCommandType,\n  DefaultEventType,\n  DefaultMessageType,\n  DefaultReactionType,\n  DefaultUserType,\n  UnknownType,\n} from '../../types/types';\n\nexport type ChannelPreviewProps<\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType\n> = ChannelListMessengerProps<At, Ch, Co, Ev, Me, Re, Us> & {\n  /**\n   * The previewed channel\n   */\n  channel: Channel<At, Ch, Co, Ev, Me, Re, Us>;\n};\n\n/**\n * This component manages state for the ChannelPreviewMessenger UI component and receives\n * all props from the ChannelListMessenger component.\n */\nconst UnMemoizedChannelPreview = <\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType\n>(\n  props: ChannelPreviewProps<At, Ch, Co, Ev, Me, Re, Us>,\n) => {\n  const { channel, forceUpdate, Preview = ChannelPreviewMessenger } = props;\n\n  const { client } = useChatContext<At, Ch, Co, Ev, Me, Re, Us>();\n\n  const [lastMessage, setLastMessage] = useState<\n    | ReturnType<ChannelState<At, Ch, Co, Ev, Me, Re, Us>['messageToImmutable']>\n    | MessageResponse<At, Ch, Co, Me, Re, Us>\n  >();\n  const [unread, setUnread] = useState(channel.countUnread());\n\n  const latestMessagePreview = useLatestMessagePreview(channel, lastMessage);\n\n  useEffect(() => {\n    const handleEvent = (event: Event<At, Ch, Co, Ev, Me, Re, Us>) => {\n      if (event.message) {\n        setLastMessage(event.message);\n      }\n\n      if (event.type === 'message.new') {\n        setUnread(channel.countUnread());\n      }\n    };\n\n    channel.on('message.new', handleEvent);\n    channel.on('message.updated', handleEvent);\n    channel.on('message.deleted', handleEvent);\n\n    return () => {\n      channel.off('message.new', handleEvent);\n      channel.off('message.updated', handleEvent);\n      channel.off('message.deleted', handleEvent);\n    };\n  }, []);\n\n  useEffect(() => {\n    setUnread(channel.countUnread());\n  }, [forceUpdate]);\n\n  useEffect(() => {\n    const handleReadEvent = (event: Event<At, Ch, Co, Ev, Me, Re, Us>) => {\n      if (event.user?.id === client.userID) {\n        setUnread(0);\n      }\n    };\n\n    channel.on('message.read', handleReadEvent);\n    return () => channel.off('message.read', handleReadEvent);\n  }, []);\n\n  return (\n    <Preview<At, Ch, Co, Ev, Me, Re, Us>\n      {...props}\n      lastMessage={lastMessage}\n      latestMessagePreview={latestMessagePreview}\n      unread={unread}\n    />\n  );\n};\n\nconst areEqual = <\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType\n>(\n  prevProps: ChannelPreviewProps<At, Ch, Co, Ev, Me, Re, Us>,\n  nextProps: ChannelPreviewProps<At, Ch, Co, Ev, Me, Re, Us>,\n) => {\n  const { last_message_at: previousLast } = prevProps.channel.state;\n  const { last_message_at: nextLast } = nextProps.channel.state;\n\n  return (\n    previousLast === nextLast && prevProps.forceUpdate === nextProps.forceUpdate\n  );\n};\n\nexport const ChannelPreview = React.memo(\n  UnMemoizedChannelPreview,\n  areEqual,\n) as typeof UnMemoizedChannelPreview;\n"]}