{"version":3,"sources":["ChannelPreviewMessenger.tsx"],"names":["Container","styled","TouchableOpacity","theme","channelPreview","container","css","Date","Text","date","Details","View","details","DetailsTop","detailsTop","StyledMessage","unread","message","unreadColor","color","unreadFontWeight","fontWeight","Title","title","ChannelPreviewMessenger","props","channel","formatLatestMessageDate","latestMessageLength","latestMessagePreview","setActiveChannel","displayAvatar","displayName","latestMessageDate","messageObject","created_at","asMutable","image","name","text","replace","length"],"mappings":"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","sourcesContent":["import React from 'react';\nimport truncate from 'lodash/truncate';\n\nimport { useChannelPreviewDisplayName } from './hooks/useChannelPreviewDisplayName';\nimport { useChannelPreviewDisplayAvatar } from './hooks/useChannelPreviewDisplayAvatar';\n\nimport { Avatar } from '../Avatar/Avatar';\n\nimport { styled } from '../../styles/styledComponents';\n\nimport type { ChannelState, MessageResponse } from 'stream-chat';\n\nimport type { ChannelPreviewProps } from './ChannelPreview';\nimport type { LatestMessagePreview } from './hooks/useLatestMessagePreview';\nimport type {\n  DefaultAttachmentType,\n  DefaultChannelType,\n  DefaultCommandType,\n  DefaultEventType,\n  DefaultMessageType,\n  DefaultReactionType,\n  DefaultUserType,\n  UnknownType,\n} from '../../types/types';\n\nconst Container = styled.TouchableOpacity`\n  border-bottom-color: #ebebeb;\n  border-bottom-width: 1px;\n  flex-direction: row;\n  padding: 10px;\n  ${({ theme }) => theme.channelPreview.container.css}\n`;\n\nconst Date = styled.Text`\n  color: #767676;\n  font-size: 11px;\n  text-align: right;\n  ${({ theme }) => theme.channelPreview.date.css}\n`;\n\nconst Details = styled.View`\n  flex: 1;\n  padding-left: 10px;\n  ${({ theme }) => theme.channelPreview.details.css}\n`;\n\nconst DetailsTop = styled.View`\n  flex-direction: row;\n  justify-content: space-between;\n  ${({ theme }) => theme.channelPreview.detailsTop.css}\n`;\n\nconst StyledMessage = styled.Text<{ unread?: number }>`\n  color: ${({ theme, unread }) =>\n    unread\n      ? theme.channelPreview.message.unreadColor\n      : theme.channelPreview.message.color};\n  font-size: 13px;\n  font-weight: ${({ theme, unread }) =>\n    unread\n      ? theme.channelPreview.message.unreadFontWeight\n      : theme.channelPreview.message.fontWeight};\n  ${({ theme }) => theme.channelPreview.message.css}\n`;\n\nconst Title = styled.Text`\n  font-size: 14px;\n  font-weight: bold;\n  ${({ theme }) => theme.channelPreview.title.css}\n`;\n\nexport type ChannelPreviewMessengerProps<\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType\n> = ChannelPreviewProps<At, Ch, Co, Ev, Me, Re, Us> & {\n  /** Latest message on a channel, formatted for preview */\n  latestMessagePreview: LatestMessagePreview<At, Ch, Co, Ev, Me, Re, Us>;\n  /**\n   * Formatter function for date of latest message.\n   * @param date Message date\n   * @returns Formatted date string\n   *\n   * By default today's date is shown in 'HH:mm A' format and other dates\n   * are displayed in 'DD/MM/YY' format. props.latestMessage.created_at is the\n   * default formatted date. This default logic is part of ChannelPreview component.\n   */\n  formatLatestMessageDate?: (date: Date) => string;\n  /** Most recent message on the channel */\n  lastMessage?:\n    | ReturnType<ChannelState<At, Ch, Co, Ev, Me, Re, Us>['messageToImmutable']>\n    | MessageResponse<At, Ch, Co, Me, Re, Us>;\n  /** Length at which latest message should be truncated */\n  latestMessageLength?: number;\n  /** Number of unread messages on the channel */\n  unread?: number;\n};\n\n/**\n * This UI component displays an individual preview item for each channel in a list. It also receives all props\n * from the ChannelPreview component.\n *\n * @example ./ChannelPreviewMessenger.md\n */\nexport const ChannelPreviewMessenger = <\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType\n>(\n  props: ChannelPreviewMessengerProps<At, Ch, Co, Ev, Me, Re, Us>,\n) => {\n  const {\n    channel,\n    formatLatestMessageDate,\n    latestMessageLength = 30,\n    latestMessagePreview,\n    setActiveChannel,\n    unread,\n  } = props;\n\n  const displayAvatar = useChannelPreviewDisplayAvatar(channel);\n  const displayName = useChannelPreviewDisplayName(channel);\n  const latestMessageDate = latestMessagePreview?.messageObject?.created_at?.asMutable();\n\n  return (\n    <Container\n      onPress={() => setActiveChannel?.(channel)}\n      testID='channel-preview-button'\n    >\n      <Avatar image={displayAvatar.image} name={displayAvatar.name} size={40} />\n      <Details>\n        <DetailsTop>\n          <Title ellipsizeMode='tail' numberOfLines={1}>\n            {displayName}\n          </Title>\n          <Date>\n            {formatLatestMessageDate && latestMessageDate\n              ? formatLatestMessageDate(latestMessageDate)\n              : latestMessagePreview?.created_at}\n          </Date>\n        </DetailsTop>\n        <StyledMessage unread={unread}>\n          {latestMessagePreview?.text &&\n            truncate(latestMessagePreview.text.replace(/\\n/g, ' '), {\n              length: latestMessageLength,\n            })}\n        </StyledMessage>\n      </Details>\n    </Container>\n  );\n};\n"]}