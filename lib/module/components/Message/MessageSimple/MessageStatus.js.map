{"version":3,"sources":["MessageStatus.tsx"],"names":["iconDeliveredUnseen","require","loadingGif","CheckMark","styled","Image","theme","message","status","checkMark","css","DeliveredCircle","View","colors","primary","deliveredCircle","DeliveredContainer","deliveredContainer","ReadByContainer","readByContainer","SendingContainer","sendingContainer","SendingImage","sendingImage","Spacer","StatusContainer","MessageStatus","props","lastReceivedId","readBy","threadList","client","justReadByMe","length","id","user","lastReadUser","filter","item","image","name","type"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport { Avatar } from '../../Avatar/Avatar';\n\nimport { useChatContext } from '../../../contexts/chatContext/ChatContext';\nimport { styled } from '../../../styles/styledComponents';\n\nimport type { ImageRequireSource } from 'react-native';\n\nimport type { ForwardedMessageProps } from './MessageContent';\n\nimport type {\n  DefaultAttachmentType,\n  DefaultChannelType,\n  DefaultCommandType,\n  DefaultEventType,\n  DefaultMessageType,\n  DefaultReactionType,\n  DefaultUserType,\n  UnknownType,\n} from '../../../types/types';\n\nconst iconDeliveredUnseen: ImageRequireSource = require('../../../images/icons/delivered_unseen.png');\nconst loadingGif: ImageRequireSource = require('../../../images/loading.gif');\n\nconst CheckMark = styled.Image`\n  height: 6px;\n  width: 8px;\n  ${({ theme }) => theme.message.status.checkMark.css};\n`;\n\nconst DeliveredCircle = styled.View`\n  align-items: center;\n  background-color: ${({ theme }) => theme.colors.primary};\n  border-radius: 16px;\n  height: 16px;\n  justify-content: center;\n  padding: 6px;\n  width: 16px;\n  ${({ theme }) => theme.message.status.deliveredCircle.css};\n`;\n\nconst DeliveredContainer = styled.View`\n  align-items: center;\n  height: 20px;\n  ${({ theme }) => theme.message.status.deliveredContainer.css};\n`;\n\nconst ReadByContainer = styled.View`\n  align-items: center;\n  flex-direction: row;\n  ${({ theme }) => theme.message.status.readByContainer.css};\n`;\n\nconst SendingContainer = styled.View`\n  align-items: center;\n  ${({ theme }) => theme.message.status.sendingContainer.css};\n`;\n\nconst SendingImage = styled.Image`\n  height: 10px;\n  width: 10px;\n  ${({ theme }) => theme.message.status.sendingImage.css};\n`;\n\nconst Spacer = styled.View`\n  height: 10px;\n`;\n\nconst StatusContainer = styled.View`\n  flex-direction: row;\n  justify-content: center;\n  width: 20px;\n`;\n\nexport const MessageStatus = <\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends DefaultUserType = DefaultUserType\n>(\n  props: ForwardedMessageProps<At, Ch, Co, Ev, Me, Re, Us>,\n) => {\n  const { lastReceivedId, message, readBy = [], threadList } = props;\n\n  const { client } = useChatContext<At, Ch, Co, Ev, Me, Re, Us>();\n  const justReadByMe = readBy.length === 1 && readBy[0].id === client.user?.id;\n\n  if (message.status === 'sending') {\n    return (\n      <StatusContainer>\n        <SendingContainer testID='sending-container'>\n          <SendingImage source={loadingGif} />\n        </SendingContainer>\n      </StatusContainer>\n    );\n  }\n\n  if (readBy.length !== 0 && !threadList && !justReadByMe) {\n    const lastReadUser = readBy.filter(\n      (item) => item.id !== client.user?.id,\n    )[0];\n    return (\n      <StatusContainer>\n        <ReadByContainer testID='read-by-container'>\n          <Avatar\n            image={lastReadUser.image}\n            name={lastReadUser.name || lastReadUser.id}\n            size={16}\n          />\n        </ReadByContainer>\n      </StatusContainer>\n    );\n  }\n\n  if (\n    message.status === 'received' &&\n    message.type !== 'ephemeral' &&\n    message.id === lastReceivedId &&\n    !threadList\n  ) {\n    return (\n      <StatusContainer>\n        <DeliveredContainer testID='delivered-container'>\n          <DeliveredCircle>\n            <CheckMark source={iconDeliveredUnseen} />\n          </DeliveredCircle>\n        </DeliveredContainer>\n      </StatusContainer>\n    );\n  }\n\n  return (\n    <StatusContainer>\n      <Spacer testID='spacer' />\n    </StatusContainer>\n  );\n};\n"]}