{"version":3,"sources":["useTypingString.ts"],"names":["useTypingString","typing","client","t","typingKeys","Object","keys","nonSelfUsers","forEach","typingKey","user","id","name","push","length","firstUser","secondUser","commaSeparatedUsers","slice","join","lastUser"],"mappings":";;;;;AAAA;;AACA;;AACA;;AAaO,IAAMA,eAAe,GAAG,SAAlBA,eAAkB,GAQxB;AAAA,2BACc,wCADd;AAAA,MACGC,MADH,sBACGA,MADH;;AAAA,wBAEc,kCAFd;AAAA,MAEGC,MAFH,mBAEGA,MAFH;;AAAA,8BAGS,gDAHT;AAAA,MAGGC,CAHH,yBAGGA,CAHH;;AAKL,MAAMC,UAAU,GAAGC,MAAM,CAACC,IAAP,CAAYL,MAAZ,CAAnB;AACA,MAAMM,YAAsB,GAAG,EAA/B;AACAH,EAAAA,UAAU,CAACI,OAAX,CAAmB,UAACC,SAAD,EAAe;AAAA;;AAChC,QAAI,CAAAP,MAAM,QAAN,4BAAAA,MAAM,CAAEQ,IAAR,kCAAcC,EAAd,OAAqBV,MAArB,yCAAqBA,MAAM,CAAGQ,SAAH,CAA3B,8CAAqB,kBAAqBC,IAA1C,qBAAqB,sBAA2BC,EAAhD,CAAJ,EAAwD;AACtD;AACD;;AACD,QAAMD,IAAI,GACR,CAAAT,MAAM,QAAN,kCAAAA,MAAM,CAAGQ,SAAH,CAAN,iEAAqBC,IAArB,2CAA2BE,IAA3B,MAAmCX,MAAnC,0CAAmCA,MAAM,CAAGQ,SAAH,CAAzC,8CAAmC,mBAAqBC,IAAxD,qBAAmC,sBAA2BC,EAA9D,CADF;;AAEA,QAAID,IAAJ,EAAU;AACRH,MAAAA,YAAY,CAACM,IAAb,CAAkBH,IAAlB;AACD;AACF,GATD;;AAWA,MAAIH,YAAY,CAACO,MAAb,KAAwB,CAA5B,EAA+B;AAC7B,WAAOX,CAAC,CAAC,yBAAD,EAA4B;AAAEO,MAAAA,IAAI,EAAEH,YAAY,CAAC,CAAD;AAApB,KAA5B,CAAR;AACD;;AAED,MAAIA,YAAY,CAACO,MAAb,KAAwB,CAA5B,EAA+B;AAK7B,WAAOX,CAAC,CAAC,oDAAD,EAAuD;AAC7DY,MAAAA,SAAS,EAAER,YAAY,CAAC,CAAD,CADsC;AAE7DS,MAAAA,UAAU,EAAET,YAAY,CAAC,CAAD;AAFqC,KAAvD,CAAR;AAID;;AAED,MAAIA,YAAY,CAACO,MAAb,GAAsB,CAA1B,EAA6B;AAK3B,WAAOX,CAAC,CAAC,4DAAD,EAA+D;AACrEc,MAAAA,mBAAmB,EAAEV,YAAY,CAACW,KAAb,CAAmB,CAAnB,EAAsB,CAAC,CAAvB,EAA0BC,IAA1B,CAA+B,IAA/B,CADgD;AAErEC,MAAAA,QAAQ,EAAEb,YAAY,CAACW,KAAb,CAAmB,CAAC,CAApB;AAF2D,KAA/D,CAAR;AAID;;AAED,SAAO,EAAP;AACD,CArDM","sourcesContent":["import { useChannelContext } from '../../../contexts/channelContext/ChannelContext';\nimport { useChatContext } from '../../../contexts/chatContext/ChatContext';\nimport { useTranslationContext } from '../../../contexts/translationContext/TranslationContext';\n\nimport type {\n  DefaultAttachmentType,\n  DefaultChannelType,\n  DefaultCommandType,\n  DefaultEventType,\n  DefaultMessageType,\n  DefaultReactionType,\n  DefaultUserType,\n  UnknownType,\n} from '../../../types/types';\n\nexport const useTypingString = <\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType\n>() => {\n  const { typing } = useChannelContext<At, Ch, Co, Ev, Me, Re, Us>();\n  const { client } = useChatContext<At, Ch, Co, Ev, Me, Re, Us>();\n  const { t } = useTranslationContext();\n\n  const typingKeys = Object.keys(typing);\n  const nonSelfUsers: string[] = [];\n  typingKeys.forEach((typingKey) => {\n    if (client?.user?.id === typing?.[typingKey]?.user?.id) {\n      return;\n    }\n    const user =\n      typing?.[typingKey]?.user?.name || typing?.[typingKey]?.user?.id;\n    if (user) {\n      nonSelfUsers.push(user);\n    }\n  });\n\n  if (nonSelfUsers.length === 1) {\n    return t('{{ user }} is typing...', { user: nonSelfUsers[0] });\n  }\n\n  if (nonSelfUsers.length === 2) {\n    /**\n     * Joins the two names without commas\n     * example: \"Dan and Neil\"\n     */\n    return t('{{ firstUser }} and {{ secondUser }} are typing...', {\n      firstUser: nonSelfUsers[0],\n      secondUser: nonSelfUsers[1],\n    });\n  }\n\n  if (nonSelfUsers.length > 2) {\n    /**\n     * Joins all names with commas, the final one gets \", and\" (oxford comma!)\n     * example: \"Dan, Neil, and Vir\"\n     */\n    return t('{{ commaSeparatedUsers }} and {{ lastUser }} are typing...', {\n      commaSeparatedUsers: nonSelfUsers.slice(0, -1).join(', '),\n      lastUser: nonSelfUsers.slice(-1),\n    });\n  }\n\n  return '';\n};\n"]}