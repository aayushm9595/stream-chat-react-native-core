{"version":3,"sources":["TypingIndicatorContainer.tsx"],"names":["Container","styled","View","theme","messageList","typingIndicatorContainer","css","TypingIndicatorContainer","children","typing","client","typingUsers","Object","values","length","user","id"],"mappings":";;;;;;;;;AAAA;;AAEA;;AACA;;AACA;;;;;;;;;;;;;;AAaA,IAAMA,SAAS,GAAGC,yBAAOC,IAAV,oBAOX;AAAA,MAAGC,KAAH,QAAGA,KAAH;AAAA,SAAeA,KAAK,CAACC,WAAN,CAAkBC,wBAAlB,CAA2CC,GAA1D;AAAA,CAPW,CAAf;;AAcO,IAAMC,wBAAwB,GAAG,SAA3BA,wBAA2B,QAU3B;AAAA;;AAAA,MADXC,QACW,SADXA,QACW;;AAAA,2BACQ,wCADR;AAAA,MACHC,MADG,sBACHA,MADG;;AAAA,wBAEQ,kCAFR;AAAA,MAEHC,MAFG,mBAEHA,MAFG;;AAGX,MAAMC,WAAW,GAAGC,MAAM,CAACC,MAAP,CAAcJ,MAAd,CAApB;;AAEA,MACE,CAACE,WAAW,CAACG,MAAb,IACCH,WAAW,CAACG,MAAZ,KAAuB,CAAvB,IAA4B,wBAAAH,WAAW,CAAC,CAAD,CAAX,CAAeI,IAAf,yCAAqBC,EAArB,OAA4BN,MAA5B,oCAA4BA,MAAM,CAAEK,IAApC,qBAA4B,aAAcC,EAA1C,CAF/B,EAGE;AACA,WAAO,IAAP;AACD;;AAED,SAAO,gCAAC,SAAD;AAAW,IAAA,MAAM,EAAC,4BAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAgDR,QAAhD,CAAP;AACD,CAvBM","sourcesContent":["import React from 'react';\n\nimport { useChannelContext } from '../../contexts/channelContext/ChannelContext';\nimport { useChatContext } from '../../contexts/chatContext/ChatContext';\nimport { styled } from '../../styles/styledComponents';\n\nimport type {\n  DefaultAttachmentType,\n  DefaultChannelType,\n  DefaultCommandType,\n  DefaultEventType,\n  DefaultMessageType,\n  DefaultReactionType,\n  DefaultUserType,\n  UnknownType,\n} from '../../types/types';\n\nconst Container = styled.View`\n  bottom: 0px;\n  height: 30px;\n  padding-left: 16px;\n  padding-vertical: 3px;\n  position: absolute;\n  width: 100%;\n  ${({ theme }) => theme.messageList.typingIndicatorContainer.css}\n`;\n\ntype Props = {\n  children?: React.ReactNode;\n};\n\nexport const TypingIndicatorContainer = <\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends DefaultUserType = DefaultUserType\n>({\n  children,\n}: Props) => {\n  const { typing } = useChannelContext<At, Ch, Co, Ev, Me, Re, Us>();\n  const { client } = useChatContext<At, Ch, Co, Ev, Me, Re, Us>();\n  const typingUsers = Object.values(typing);\n\n  if (\n    !typingUsers.length ||\n    (typingUsers.length === 1 && typingUsers[0].user?.id === client?.user?.id)\n  ) {\n    return null;\n  }\n\n  return <Container testID='typing-indicator-container'>{children}</Container>;\n};\n"]}