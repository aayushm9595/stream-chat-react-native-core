{"version":3,"sources":["DateSeparator.tsx"],"names":["Container","styled","View","theme","messageList","dateSeparator","container","css","Date","Text","date","DateText","dateText","Line","colors","light","line","DateSeparator","props","formatDate","message","tDateTimeParser","calendar"],"mappings":";;;;;;;;;AAAA;;AAEA;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAeA,IAAMA,SAAS,GAAGC,yBAAOC,IAAV,oBAKX;AAAA,MAAGC,KAAH,QAAGA,KAAH;AAAA,SAAeA,KAAK,CAACC,WAAN,CAAkBC,aAAlB,CAAgCC,SAAhC,CAA0CC,GAAzD;AAAA,CALW,CAAf;;AAQA,IAAMC,IAAI,GAAGP,yBAAOQ,IAAV,qBAKN;AAAA,MAAGN,KAAH,SAAGA,KAAH;AAAA,SAAeA,KAAK,CAACC,WAAN,CAAkBC,aAAlB,CAAgCK,IAAhC,CAAqCH,GAApD;AAAA,CALM,CAAV;;AAQA,IAAMI,QAAQ,GAAGV,yBAAOQ,IAAV,qBAMV;AAAA,MAAGN,KAAH,SAAGA,KAAH;AAAA,SAAeA,KAAK,CAACC,WAAN,CAAkBC,aAAlB,CAAgCO,QAAhC,CAAyCL,GAAxD;AAAA,CANU,CAAd;;AASA,IAAMM,IAAI,GAAGZ,yBAAOC,IAAV,qBACY;AAAA,MAAGC,KAAH,SAAGA,KAAH;AAAA,SAAeA,KAAK,CAACW,MAAN,CAAaC,KAA5B;AAAA,CADZ,EAIN;AAAA,MAAGZ,KAAH,SAAGA,KAAH;AAAA,SAAeA,KAAK,CAACC,WAAN,CAAkBC,aAAlB,CAAgCW,IAAhC,CAAqCT,GAApD;AAAA,CAJM,CAAV;;AA6BO,IAAMU,aAAa,GAAG,SAAhBA,aAAgB,CAS3BC,KAT2B,EAUxB;AAAA,MACKC,UADL,GAC6BD,KAD7B,CACKC,UADL;AAAA,MACiBC,OADjB,GAC6BF,KAD7B,CACiBE,OADjB;;AAAA,8BAGyB,gDAHzB;AAAA,MAGKC,eAHL,yBAGKA,eAHL;;AAKH,MAAMX,IAAI,GAAGS,UAAU,GACnBA,UAAU,CAACC,OAAO,CAACV,IAAT,CADS,GAEnBW,eAAe,CAACD,OAAO,CAACV,IAAT,CAFnB;AAIA,SACE,gCAAC,SAAD;AAAW,IAAA,MAAM,EAAC,gBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,gCAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,gCAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGS,UAAU,GACTT,IADS,GAGT,gCAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAO,uCAAcA,IAAd,IAAsBA,IAAI,CAACY,QAAL,EAAtB,GAAwCZ,IAA/C,CAJJ,CAFF,EASE,gCAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATF,CADF;AAaD,CAhCM","sourcesContent":["import React from 'react';\n\nimport {\n  isDayOrMoment,\n  TDateTimeParserInput,\n  useTranslationContext,\n} from '../../contexts/translationContext/TranslationContext';\nimport { styled } from '../../styles/styledComponents';\n\nimport type { DateSeparator as DateSeparatorType } from './utils/insertDates';\n\nimport type {\n  DefaultAttachmentType,\n  DefaultChannelType,\n  DefaultCommandType,\n  DefaultEventType,\n  DefaultMessageType,\n  DefaultReactionType,\n  DefaultUserType,\n  UnknownType,\n} from '../../types/types';\n\nconst Container = styled.View`\n  align-items: center;\n  flex-direction: row;\n  justify-content: center;\n  margin-vertical: 20px;\n  ${({ theme }) => theme.messageList.dateSeparator.container.css}\n`;\n\nconst Date = styled.Text`\n  font-size: 10px;\n  font-weight: 700;\n  opacity: 0.8;\n  text-transform: uppercase;\n  ${({ theme }) => theme.messageList.dateSeparator.date.css}\n`;\n\nconst DateText = styled.Text`\n  font-size: 10px;\n  margin-horizontal: 5px;\n  opacity: 0.8;\n  text-align: center;\n  text-transform: uppercase;\n  ${({ theme }) => theme.messageList.dateSeparator.dateText.css}\n`;\n\nconst Line = styled.View`\n  background-color: ${({ theme }) => theme.colors.light};\n  flex: 1;\n  height: 0.5px;\n  ${({ theme }) => theme.messageList.dateSeparator.line.css}\n`;\n\nexport type DateSeparatorProps<\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType\n> = {\n  message: DateSeparatorType<At, Ch, Co, Ev, Me, Re, Us>;\n  /**\n   * Formatter function for date object.\n   *\n   * @param date TDateTimeParserInput object of message\n   * @returns string\n   */\n  formatDate?: (date: TDateTimeParserInput) => string;\n};\n\n/**\n * @example ./DateSeparator.md\n */\nexport const DateSeparator = <\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType\n>(\n  props: DateSeparatorProps<At, Ch, Co, Ev, Me, Re, Us>,\n) => {\n  const { formatDate, message } = props;\n\n  const { tDateTimeParser } = useTranslationContext();\n\n  const date = formatDate\n    ? formatDate(message.date as TDateTimeParserInput)\n    : tDateTimeParser(message.date as TDateTimeParserInput);\n\n  return (\n    <Container testID='date-separator'>\n      <Line />\n      <DateText>\n        {formatDate ? (\n          date\n        ) : (\n          <Date>{isDayOrMoment(date) ? date.calendar() : date}</Date>\n        )}\n      </DateText>\n      <Line />\n    </Container>\n  );\n};\n"]}