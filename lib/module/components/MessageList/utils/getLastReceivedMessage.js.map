{"version":3,"sources":["getLastReceivedMessage.ts"],"names":["getLastReceivedMessage","messages","message","status"],"mappings":";;;;;AAAA;;;;;;;;AAaO,IAAMA,sBAAsB,GAAG,SAAzBA,sBAAyB,CASpCC,QAToC,EAUjC;AAIH,uDAAsBA,QAAtB,wCAAgC;AAAA,QAArBC,OAAqB;;AAC9B,QAAIA,OAAO,IAAI,CAAC,kCAAgBA,OAAhB,CAAZ,IAAwCA,OAAO,CAACC,MAAR,KAAmB,UAA/D,EAA2E;AACzE,aAAOD,OAAP;AACD;AACF;;AAED;AACD,CArBM","sourcesContent":["import { InsertDatesResponse, isDateSeparator } from '../utils/insertDates';\n\nimport type {\n  DefaultAttachmentType,\n  DefaultChannelType,\n  DefaultCommandType,\n  DefaultEventType,\n  DefaultMessageType,\n  DefaultReactionType,\n  DefaultUserType,\n  UnknownType,\n} from '../../../types/types';\n\nexport const getLastReceivedMessage = <\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType\n>(\n  messages: InsertDatesResponse<At, Ch, Co, Ev, Me, Re, Us>,\n) => {\n  /**\n   * There are no status on dates so they will be skipped\n   */\n  for (const message of messages) {\n    if (message && !isDateSeparator(message) && message.status === 'received') {\n      return message;\n    }\n  }\n\n  return;\n};\n"]}