{"version":3,"sources":["insertDates.ts"],"names":["isDateSeparator","message","type","insertDates","messages","newMessages","length","entries","i","deleted_at","push","messageDate","created_at","getDay","prevMessageDate","date"],"mappings":";;;;;;;;;;;;;;;AAqDO,IAAMA,eAAe,GAAG,SAAlBA,eAAkB,CAS7BC,OAT6B;AAAA,SAW7BA,OAAO,CAACC,IAAR,KAAiB,cAXY;AAAA,CAAxB;;;;AAyBA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CASzBC,QATyB,EAYtB;AACH,MAAMC,WAA4D,GAAG,EAArE;;AACA,MAAID,QAAQ,CAACE,MAAT,KAAoB,CAAxB,EAA2B;AACzB,WAAOD,WAAP;AACD;;AAED,uDAA2BD,QAAQ,CAACG,OAAT,EAA3B,wCAA+C;AAAA;;AAAA;;AAAA,QAAnCC,CAAmC;AAAA,QAAhCP,OAAgC;;AAI7C,QAAIA,OAAO,CAACC,IAAR,KAAiB,cAAjB,IAAmCD,OAAO,CAACQ,UAA/C,EAA2D;AACzDJ,MAAAA,WAAW,CAACK,IAAZ,CAAiBT,OAAjB;AACA;AACD;;AAMD,QAAMU,WAAW,GAAGV,OAAO,CAACW,UAAR,CAAmBC,MAAnB,EAApB;AAOA,QAAMC,eAAe,GACnBN,CAAC,GAAGJ,QAAQ,CAACE,MAAT,GAAkB,CAAtB,GACIF,QAAQ,CAACI,CAAC,GAAG,CAAL,CAAR,CAAgBI,UAAhB,CAA2BC,MAA3B,EADJ,GAEIF,WAHN;;AAQA,QAAIH,CAAC,KAAK,CAAV,EAAa;AACXH,MAAAA,WAAW,CAACK,IAAZ,CACE;AACEK,QAAAA,IAAI,EAAEd,OAAO,CAACW,UADhB;AAEEV,QAAAA,IAAI,EAAE;AAFR,OADF,EAKED,OALF;AAYD,KAbD,MAaO,IAAIU,WAAW,KAAKG,eAApB,EAAqC;AAC1CT,MAAAA,WAAW,CAACK,IAAZ,CAAiBT,OAAjB,EAA0B;AACxBc,QAAAA,IAAI,EAAEX,QAAQ,CAACI,CAAC,GAAG,CAAL,CAAR,CAAgBI,UADE;AAExBV,QAAAA,IAAI,EAAE;AAFkB,OAA1B;AAQD,KATM,MASA;AACLG,MAAAA,WAAW,CAACK,IAAZ,CAAiBT,OAAjB;AACD;AACF;;AAED,SAAOI,WAAP;AACD,CA1EM","sourcesContent":["import type { ChannelState } from 'stream-chat';\n\nimport type {\n  MessagesContextValue,\n  MessageWithDates,\n} from '../../../contexts/messagesContext/MessagesContext';\nimport type { ThreadContextValue } from '../../../contexts/threadContext/ThreadContext';\nimport type {\n  DefaultAttachmentType,\n  DefaultChannelType,\n  DefaultCommandType,\n  DefaultEventType,\n  DefaultMessageType,\n  DefaultReactionType,\n  DefaultUserType,\n  UnknownType,\n} from '../../../types/types';\n\nexport type DateSeparator<\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType\n> = {\n  date: Message<At, Ch, Co, Ev, Me, Re, Us>['created_at'] | string;\n  type: 'message.date';\n};\n\nexport type MessageOrDate<\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType\n> =\n  | Message<At, Ch, Co, Ev, Me, Re, Us>\n  | DateSeparator<At, Ch, Co, Ev, Me, Re, Us>;\n\nexport type InsertDatesResponse<\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType\n> = MessageOrDate<At, Ch, Co, Ev, Me, Re, Us>[];\n\nexport const isDateSeparator = <\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType\n>(\n  message: MessageOrDate<At, Ch, Co, Ev, Me, Re, Us>,\n): message is DateSeparator<At, Ch, Co, Ev, Me, Re, Us> =>\n  message.type === 'message.date';\n\nexport type Message<\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType\n> =\n  | ReturnType<ChannelState<At, Ch, Co, Ev, Me, Re, Us>['messageToImmutable']>\n  | MessageWithDates<At, Ch, Co, Me, Re, Us>;\n\nexport const insertDates = <\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType\n>(\n  messages:\n    | MessagesContextValue<At, Ch, Co, Ev, Me, Re, Us>['messages']\n    | ThreadContextValue<At, Ch, Co, Ev, Me, Re, Us>['threadMessages'],\n) => {\n  const newMessages: InsertDatesResponse<At, Ch, Co, Ev, Me, Re, Us> = [];\n  if (messages.length === 0) {\n    return newMessages;\n  }\n\n  for (const [i, message] of messages.entries()) {\n    /**\n     * If message read or deleted don't consider for date labels\n     */\n    if (message.type === 'message.read' || message.deleted_at) {\n      newMessages.push(message);\n      continue;\n    }\n\n    /**\n     * Get the date of the current message and create\n     * variable for previous date (day)\n     */\n    const messageDate = message.created_at.getDay();\n\n    /**\n     * If this is not the last entry in the messages array\n     * set the previous message date (day) to the date of the next\n     * message in the array\n     */\n    const prevMessageDate =\n      i < messages.length - 1\n        ? messages[i + 1].created_at.getDay()\n        : messageDate;\n\n    /**\n     * Before the first message insert a date object\n     */\n    if (i === 0) {\n      newMessages.push(\n        {\n          date: message.created_at,\n          type: 'message.date',\n        } as DateSeparator<At, Ch, Co, Ev, Me, Re, Us>,\n        message,\n      );\n\n      /**\n       * If the date (day) has changed between two messages\n       * insert a date object\n       */\n    } else if (messageDate !== prevMessageDate) {\n      newMessages.push(message, {\n        date: messages[i + 1].created_at,\n        type: 'message.date',\n      } as DateSeparator<At, Ch, Co, Ev, Me, Re, Us>);\n\n      /**\n       * Otherwise just add the message\n       */\n    } else {\n      newMessages.push(message);\n    }\n  }\n\n  return newMessages;\n};\n"]}