{"version":3,"sources":["getGroupStyles.ts"],"names":["getGroupStyles","params","messagesWithDates","noGroupByUser","messageGroupStyles","i","length","previousMessage","message","nextMessage","groupStyles","type","userId","user","id","isTopMessage","attachments","deleted_at","isBottomMessage","push","splice"],"mappings":"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","sourcesContent":["import { InsertDatesResponse, isDateSeparator } from './insertDates';\n\nimport type { GroupType } from '../../../contexts/messagesContext/MessagesContext';\nimport type {\n  DefaultAttachmentType,\n  DefaultChannelType,\n  DefaultCommandType,\n  DefaultEventType,\n  DefaultMessageType,\n  DefaultReactionType,\n  DefaultUserType,\n  UnknownType,\n} from '../../../types/types';\n\nexport type GetGroupStylesParams<\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType\n> = {\n  messagesWithDates: InsertDatesResponse<At, Ch, Co, Ev, Me, Re, Us>;\n  noGroupByUser?: boolean;\n};\n\nexport const getGroupStyles = <\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType\n>(\n  params: GetGroupStylesParams<At, Ch, Co, Ev, Me, Re, Us>,\n) => {\n  const { messagesWithDates, noGroupByUser } = params;\n  const messageGroupStyles: { [key: string]: GroupType[] } = {};\n\n  for (let i = 0; i < messagesWithDates.length; i++) {\n    const previousMessage = messagesWithDates[i - 1];\n    const message = messagesWithDates[i];\n    const nextMessage = messagesWithDates[i + 1];\n    const groupStyles: GroupType[] = [];\n\n    /**\n     * Skip event and date messages\n     */\n    if (message.type === 'channel.event') {\n      continue;\n    }\n\n    if (isDateSeparator(message)) {\n      continue;\n    }\n\n    const userId = message?.user?.id || null;\n\n    const isTopMessage =\n      !previousMessage ||\n      isDateSeparator(previousMessage) ||\n      previousMessage.type === 'system' ||\n      previousMessage.type === 'channel.event' ||\n      (previousMessage.attachments &&\n        previousMessage.attachments.length !== 0) ||\n      userId !== previousMessage?.user?.id ||\n      previousMessage.type === 'error' ||\n      !!previousMessage.deleted_at;\n\n    const isBottomMessage =\n      !nextMessage ||\n      isDateSeparator(nextMessage) ||\n      nextMessage.type === 'system' ||\n      nextMessage.type === 'channel.event' ||\n      (nextMessage.attachments && nextMessage.attachments.length !== 0) ||\n      userId !== nextMessage?.user?.id ||\n      nextMessage.type === 'error' ||\n      !!nextMessage.deleted_at;\n\n    /**\n     * Add group styles key for top message\n     */\n    if (isTopMessage) {\n      groupStyles.push('top');\n    }\n\n    /**\n     * Add group styles key for bottom message\n     */\n    if (isBottomMessage) {\n      /**\n       * If the bottom message is also the top, or deleted, or an error,\n       * add the key for single message instead of bottom\n       */\n      if (isTopMessage || message.deleted_at || message.type === 'error') {\n        groupStyles.splice(0, groupStyles.length);\n        groupStyles.push('single');\n      } else {\n        groupStyles.push('bottom');\n      }\n    }\n\n    /**\n     * Add the key for all non top or bottom messages, if the message is\n     * deleted or an error add the key for single otherwise middle\n     */\n    if (!isTopMessage && !isBottomMessage) {\n      if (message.deleted_at || message.type === 'error') {\n        groupStyles.splice(0, groupStyles.length);\n        groupStyles.push('single');\n      } else {\n        groupStyles.splice(0, groupStyles.length);\n        groupStyles.push('middle');\n      }\n    }\n\n    /**\n     * If there are attachments add the key for single\n     */\n    if (message.attachments && message.attachments.length !== 0) {\n      groupStyles.splice(0, groupStyles.length);\n      groupStyles.push('single');\n    }\n\n    /**\n     * If noGroupByUser set add the key for single\n     */\n    if (noGroupByUser) {\n      groupStyles.splice(0, groupStyles.length);\n      groupStyles.push('single');\n    }\n\n    if (message.id) {\n      messageGroupStyles[message.id] = groupStyles;\n    }\n  }\n\n  return messageGroupStyles;\n};\n"]}