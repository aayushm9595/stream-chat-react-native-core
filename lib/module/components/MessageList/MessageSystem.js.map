{"version":3,"sources":["MessageSystem.tsx"],"names":["Container","styled","View","theme","messageList","messageSystem","container","css","DateText","Text","dateText","Line","colors","light","line","text","TextContainer","textContainer","MessageSystem","props","formatDate","message","tDateTimeParser","createdAt","created_at","parsedDate","date","calendar","toUpperCase"],"mappings":";;;;;;;;;AAAA;;AAEA;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAeA,IAAMA,SAAS,GAAGC,yBAAOC,IAAV,oBAKX;AAAA,MAAGC,KAAH,QAAGA,KAAH;AAAA,SAAeA,KAAK,CAACC,WAAN,CAAkBC,aAAlB,CAAgCC,SAAhC,CAA0CC,GAAzD;AAAA,CALW,CAAf;;AAQA,IAAMC,QAAQ,GAAGP,yBAAOQ,IAAV,qBAKV;AAAA,MAAGN,KAAH,SAAGA,KAAH;AAAA,SAAeA,KAAK,CAACC,WAAN,CAAkBC,aAAlB,CAAgCK,QAAhC,CAAyCH,GAAxD;AAAA,CALU,CAAd;;AAQA,IAAMI,IAAI,GAAGV,yBAAOC,IAAV,qBACY;AAAA,MAAGC,KAAH,SAAGA,KAAH;AAAA,SAAeA,KAAK,CAACS,MAAN,CAAaC,KAA5B;AAAA,CADZ,EAIN;AAAA,MAAGV,KAAH,SAAGA,KAAH;AAAA,SAAeA,KAAK,CAACC,WAAN,CAAkBC,aAAlB,CAAgCS,IAAhC,CAAqCP,GAApD;AAAA,CAJM,CAAV;;AAOA,IAAME,IAAI,GAAGR,yBAAOQ,IAAV,qBAKN;AAAA,MAAGN,KAAH,SAAGA,KAAH;AAAA,SAAeA,KAAK,CAACC,WAAN,CAAkBC,aAAlB,CAAgCU,IAAhC,CAAqCR,GAApD;AAAA,CALM,CAAV;;AAQA,IAAMS,aAAa,GAAGf,yBAAOC,IAAV,qBAGf;AAAA,MAAGC,KAAH,SAAGA,KAAH;AAAA,SAAeA,KAAK,CAACC,WAAN,CAAkBC,aAAlB,CAAgCY,aAAhC,CAA8CV,GAA7D;AAAA,CAHe,CAAnB;;AA+BO,IAAMW,aAAa,GAAG,SAAhBA,aAAgB,CAS3BC,KAT2B,EAUxB;AAAA;;AAAA,MACKC,UADL,GAC6BD,KAD7B,CACKC,UADL;AAAA,MACiBC,OADjB,GAC6BF,KAD7B,CACiBE,OADjB;;AAAA,8BAGyB,gDAHzB;AAAA,MAGKC,eAHL,yBAGKA,eAHL;;AAKH,MAAMC,SAAS,GAAGF,OAAO,CAACG,UAA1B;AACA,MAAMC,UAAU,GAAGH,eAAe,CAACC,SAAD,CAAlC;AACA,MAAMG,IAAI,GACRN,UAAU,IAAIG,SAAd,GACIH,UAAU,CAACG,SAAD,CADd,GAEIE,UAAU,IAAI,uCAAcA,UAAd,CAAd,GACAA,UAAU,CAACE,QAAX,GAAsBC,WAAtB,EADA,GAEAH,UALN;AAOA,SACE,gCAAC,SAAD;AAAW,IAAA,MAAM,EAAC,gBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,gCAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,gCAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,gCAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAO,kBAAAJ,OAAO,CAACN,IAAR,mCAAca,WAAd,OAA+B,EAAtC,CADF,EAEE,gCAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAWF,IAAX,CAFF,CAFF,EAME,gCAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,CADF;AAUD,CAlCM","sourcesContent":["import React from 'react';\n\nimport {\n  isDayOrMoment,\n  TDateTimeParserInput,\n  useTranslationContext,\n} from '../../contexts/translationContext/TranslationContext';\nimport { styled } from '../../styles/styledComponents';\n\nimport type { Message } from './utils/insertDates';\n\nimport type {\n  DefaultAttachmentType,\n  DefaultChannelType,\n  DefaultCommandType,\n  DefaultEventType,\n  DefaultMessageType,\n  DefaultReactionType,\n  DefaultUserType,\n  UnknownType,\n} from '../../types/types';\n\nconst Container = styled.View`\n  align-items: center;\n  flex-direction: row;\n  justify-content: center;\n  margin-bottom: 10px;\n  ${({ theme }) => theme.messageList.messageSystem.container.css}\n`;\n\nconst DateText = styled.Text`\n  color: rgba(0, 0, 0, 0.5);\n  font-size: 10px;\n  font-weight: bold;\n  text-align: center;\n  ${({ theme }) => theme.messageList.messageSystem.dateText.css}\n`;\n\nconst Line = styled.View`\n  background-color: ${({ theme }) => theme.colors.light};\n  flex: 1;\n  height: 0.5px;\n  ${({ theme }) => theme.messageList.messageSystem.line.css}\n`;\n\nconst Text = styled.Text`\n  color: rgba(0, 0, 0, 0.5);\n  font-size: 10px;\n  font-weight: bold;\n  text-align: center;\n  ${({ theme }) => theme.messageList.messageSystem.text.css}\n`;\n\nconst TextContainer = styled.View`\n  flex: 3;\n  margin-top: 10px;\n  ${({ theme }) => theme.messageList.messageSystem.textContainer.css}\n`;\n\nexport type MessageSystemProps<\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType\n> = {\n  /** Current [message object](https://getstream.io/chat/docs/#message_format) */\n  message: Message<At, Ch, Co, Ev, Me, Re, Us>;\n  /**\n   * Formatter function for date object.\n   *\n   * @param date TDateTimeParserInput object of message\n   * @returns string\n   */\n  formatDate?: (date: TDateTimeParserInput) => string;\n};\n\n/**\n * A component to display system message. e.g, when someone updates the channel,\n * they can attach a message with that update. That message will be available\n * in message list as (type) system message.\n */\nexport const MessageSystem = <\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType\n>(\n  props: MessageSystemProps<At, Ch, Co, Ev, Me, Re, Us>,\n) => {\n  const { formatDate, message } = props;\n\n  const { tDateTimeParser } = useTranslationContext();\n\n  const createdAt = message.created_at as TDateTimeParserInput | undefined;\n  const parsedDate = tDateTimeParser(createdAt);\n  const date =\n    formatDate && createdAt\n      ? formatDate(createdAt)\n      : parsedDate && isDayOrMoment(parsedDate)\n      ? parsedDate.calendar().toUpperCase()\n      : parsedDate;\n\n  return (\n    <Container testID='message-system'>\n      <Line />\n      <TextContainer>\n        <Text>{message.text?.toUpperCase() || ''}</Text>\n        <DateText>{date}</DateText>\n      </TextContainer>\n      <Line />\n    </Container>\n  );\n};\n"]}