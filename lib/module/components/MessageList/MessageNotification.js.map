{"version":3,"sources":["MessageNotification.tsx"],"names":["Container","styled","TouchableOpacity","theme","colors","primary","messageList","messageNotification","container","css","MessageNotificationText","Text","text","MessageNotification","props","onPress","showNotification","t","opacity","Animated","Value","current","timing","duration","toValue","useNativeDriver","start","bottom","position"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AAEA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,SAAS,GAAGC,yBAAOC,gBAAV,oBAEO;AAAA,MAAGC,KAAH,QAAGA,KAAH;AAAA,SAAeA,KAAK,CAACC,MAAN,CAAaC,OAA5B;AAAA,CAFP,EASX;AAAA,MAAGF,KAAH,SAAGA,KAAH;AAAA,SAAeA,KAAK,CAACG,WAAN,CAAkBC,mBAAlB,CAAsCC,SAAtC,CAAgDC,GAA/D;AAAA,CATW,CAAf;;AAYA,IAAMC,uBAAuB,GAAGT,yBAAOU,IAAV,qBAIzB;AAAA,MAAGR,KAAH,SAAGA,KAAH;AAAA,SAAeA,KAAK,CAACG,WAAN,CAAkBC,mBAAlB,CAAsCK,IAAtC,CAA2CH,GAA1D;AAAA,CAJyB,CAA7B;;AAiBO,IAAMI,mBAAuD,GAAG,SAA1DA,mBAA0D,CACrEC,KADqE,EAElE;AAAA,MACKC,OADL,GAC0CD,KAD1C,CACKC,OADL;AAAA,8BAC0CD,KAD1C,CACcE,gBADd;AAAA,MACcA,gBADd,sCACiC,IADjC;;AAAA,8BAGW,gDAHX;AAAA,MAGKC,CAHL,yBAGKA,CAHL;;AAKH,MAAMC,OAAO,GAAG,mBAAO,IAAIC,sBAASC,KAAb,CAAmB,CAAnB,CAAP,EAA8BC,OAA9C;AAEA,wBAAU,YAAM;AACdF,0BAASG,MAAT,CAAgBJ,OAAhB,EAAyB;AACvBK,MAAAA,QAAQ,EAAE,GADa;AAEvBC,MAAAA,OAAO,EAAER,gBAAgB,GAAG,CAAH,GAAO,CAFT;AAGvBS,MAAAA,eAAe,EAAE;AAHM,KAAzB,EAIGC,KAJH;AAKD,GAND,EAMG,CAACV,gBAAD,CANH;AAQA,SAAOA,gBAAgB,GACrB,gCAAC,qBAAD,CAAU,IAAV;AACE,IAAA,KAAK,EAAE;AACLW,MAAAA,MAAM,EAAE,CADH;AAELT,MAAAA,OAAO,EAAPA,OAFK;AAGLU,MAAAA,QAAQ,EAAE;AAHL,KADT;AAME,IAAA,MAAM,EAAC,sBANT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQE,gCAAC,SAAD;AAAW,IAAA,OAAO,EAAEb,OAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,gCAAC,uBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA0BE,CAAC,CAAC,cAAD,CAA3B,CADF,CARF,CADqB,GAanB,IAbJ;AAcD,CA/BM","sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { Animated, GestureResponderEvent } from 'react-native';\n\nimport { useTranslationContext } from '../../contexts/translationContext/TranslationContext';\nimport { styled } from '../../styles/styledComponents';\n\nconst Container = styled.TouchableOpacity`\n  align-items: center;\n  background-color: ${({ theme }) => theme.colors.primary};\n  border-radius: 13px;\n  height: 27px;\n  justify-content: center;\n  transform: translateY(9px);\n  width: 112px;\n  z-index: 10;\n  ${({ theme }) => theme.messageList.messageNotification.container.css}\n`;\n\nconst MessageNotificationText = styled.Text`\n  color: white;\n  font-size: 12px;\n  font-weight: 600;\n  ${({ theme }) => theme.messageList.messageNotification.text.css}\n`;\n\nexport type MessageNotificationProps = {\n  /** onPress handler */\n  onPress: (event: GestureResponderEvent) => void;\n  /** If we should show the notification or not */\n  showNotification?: boolean;\n};\n\n/**\n * @example ./MessageNotification.md\n */\nexport const MessageNotification: React.FC<MessageNotificationProps> = (\n  props,\n) => {\n  const { onPress, showNotification = true } = props;\n\n  const { t } = useTranslationContext();\n\n  const opacity = useRef(new Animated.Value(0)).current;\n\n  useEffect(() => {\n    Animated.timing(opacity, {\n      duration: 500,\n      toValue: showNotification ? 1 : 0,\n      useNativeDriver: true,\n    }).start();\n  }, [showNotification]);\n\n  return showNotification ? (\n    <Animated.View\n      style={{\n        bottom: 0,\n        opacity,\n        position: 'absolute',\n      }}\n      testID='message-notification'\n    >\n      <Container onPress={onPress}>\n        <MessageNotificationText>{t('New Messages')}</MessageNotificationText>\n      </Container>\n    </Animated.View>\n  ) : null;\n};\n"]}