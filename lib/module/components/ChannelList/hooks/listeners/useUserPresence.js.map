{"version":3,"sources":["useUserPresence.ts"],"names":["useUserPresence","setChannels","client","handleEvent","event","channels","newChannels","map","channel","user","id","state","members","setIn","on","off"],"mappings":";;;;;;;;;AAAA;;AAEA;;AA6BO,IAAMA,eAAe,GAAG,SAAlBA,eAAkB,OAUe;AAAA,MAD5CC,WAC4C,QAD5CA,WAC4C;;AAAA,wBACzB,kCADyB;AAAA,MACpCC,MADoC,mBACpCA,MADoC;;AAG5C,wBAAU,YAAM;AACd,QAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD,EAA8C;AAChEH,MAAAA,WAAW,CAAC,UAACI,QAAD,EAAc;AACxB,YAAMC,WAAW,GAAGD,QAAQ,CAACE,GAAT,CAAa,UAACC,OAAD,EAAa;AAAA;;AAC5C,cAAI,iBAACJ,KAAK,CAACK,IAAP,qBAAC,YAAYC,EAAb,KAAmB,CAACF,OAAO,CAACG,KAAR,CAAcC,OAAd,CAAsBR,KAAK,CAACK,IAAN,CAAWC,EAAjC,CAAxB,EAA8D;AAC5D,mBAAOF,OAAP;AACD,WAFD,MAEO;AACLA,YAAAA,OAAO,CAACG,KAAR,CAAcC,OAAd,CAAsBC,KAAtB,CAA4B,CAACT,KAAK,CAACK,IAAN,CAAWC,EAAZ,EAAgB,MAAhB,CAA5B,EAAqDN,KAAK,CAACK,IAA3D;AACA,mBAAOD,OAAP;AACD;AACF,SAPmB,CAApB;AASA,mDAAWF,WAAX;AACD,OAXU,CAAX;AAYD,KAbD;;AAeAJ,IAAAA,MAAM,CAACY,EAAP,CAAU,uBAAV,EAAmCX,WAAnC;AACAD,IAAAA,MAAM,CAACY,EAAP,CAAU,cAAV,EAA0BX,WAA1B;AAEA,WAAO,YAAM;AACXD,MAAAA,MAAM,CAACa,GAAP,CAAW,uBAAX,EAAoCZ,WAApC;AACAD,MAAAA,MAAM,CAACa,GAAP,CAAW,cAAX,EAA2BZ,WAA3B;AACD,KAHD;AAID,GAvBD,EAuBG,EAvBH;AAwBD,CArCM","sourcesContent":["import { useEffect } from 'react';\n\nimport { useChatContext } from '../../../../contexts/chatContext/ChatContext';\n\nimport type { Channel, Event } from 'stream-chat';\n\nimport type {\n  DefaultAttachmentType,\n  DefaultChannelType,\n  DefaultCommandType,\n  DefaultEventType,\n  DefaultMessageType,\n  DefaultReactionType,\n  DefaultUserType,\n  UnknownType,\n} from '../../../../types/types';\n\ntype Parameters<\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType\n> = {\n  setChannels: React.Dispatch<\n    React.SetStateAction<Channel<At, Ch, Co, Ev, Me, Re, Us>[]>\n  >;\n};\n\nexport const useUserPresence = <\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType\n>({\n  setChannels,\n}: Parameters<At, Ch, Co, Ev, Me, Re, Us>) => {\n  const { client } = useChatContext<At, Ch, Co, Ev, Me, Re, Us>();\n\n  useEffect(() => {\n    const handleEvent = (event: Event<At, Ch, Co, Ev, Me, Re, Us>) => {\n      setChannels((channels) => {\n        const newChannels = channels.map((channel) => {\n          if (!event.user?.id || !channel.state.members[event.user.id]) {\n            return channel;\n          } else {\n            channel.state.members.setIn([event.user.id, 'user'], event.user);\n            return channel;\n          }\n        });\n\n        return [...newChannels];\n      });\n    };\n\n    client.on('user.presence.changed', handleEvent);\n    client.on('user.updated', handleEvent);\n\n    return () => {\n      client.off('user.presence.changed', handleEvent);\n      client.off('user.updated', handleEvent);\n    };\n  }, []);\n};\n"]}