{"version":3,"sources":["useNewMessage.ts"],"names":["useNewMessage","lockChannelOrder","setChannels","client","handleEvent","event","channels","cid","on","off"],"mappings":";;;;;;;;;AAAA;;AAEA;;AAEA;;AA8BO,IAAMA,aAAa,GAAG,SAAhBA,aAAgB,OAWiB;AAAA,MAF5CC,gBAE4C,QAF5CA,gBAE4C;AAAA,MAD5CC,WAC4C,QAD5CA,WAC4C;;AAAA,wBACzB,kCADyB;AAAA,MACpCC,MADoC,mBACpCA,MADoC;;AAG5C,wBAAU,YAAM;AACd,QAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD,EAA8C;AAChEH,MAAAA,WAAW,CAAC,UAACI,QAAD,EAAc;AACxB,YAAI,CAACL,gBAAD,IAAqBI,KAAK,CAACE,GAA/B,EACE,OAAO,0BAA0C;AAC/CD,UAAAA,QAAQ,EAARA,QAD+C;AAE/CC,UAAAA,GAAG,EAAEF,KAAK,CAACE;AAFoC,SAA1C,CAAP;AAIF,mDAAWD,QAAX;AACD,OAPU,CAAX;AAQD,KATD;;AAWAH,IAAAA,MAAM,CAACK,EAAP,CAAU,aAAV,EAAyBJ,WAAzB;AACA,WAAO;AAAA,aAAMD,MAAM,CAACM,GAAP,CAAW,aAAX,EAA0BL,WAA1B,CAAN;AAAA,KAAP;AACD,GAdD,EAcG,EAdH;AAeD,CA7BM","sourcesContent":["import { useEffect } from 'react';\n\nimport { moveChannelUp } from '../../utils';\n\nimport { useChatContext } from '../../../../contexts/chatContext/ChatContext';\n\nimport type { Channel, Event } from 'stream-chat';\n\nimport type {\n  DefaultAttachmentType,\n  DefaultChannelType,\n  DefaultCommandType,\n  DefaultEventType,\n  DefaultMessageType,\n  DefaultReactionType,\n  DefaultUserType,\n  UnknownType,\n} from '../../../../types/types';\n\ntype Parameters<\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType\n> = {\n  lockChannelOrder: boolean;\n  setChannels: React.Dispatch<\n    React.SetStateAction<Channel<At, Ch, Co, Ev, Me, Re, Us>[]>\n  >;\n};\n\nexport const useNewMessage = <\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType\n>({\n  lockChannelOrder,\n  setChannels,\n}: Parameters<At, Ch, Co, Ev, Me, Re, Us>) => {\n  const { client } = useChatContext<At, Ch, Co, Ev, Me, Re, Us>();\n\n  useEffect(() => {\n    const handleEvent = (event: Event<At, Ch, Co, Ev, Me, Re, Us>) => {\n      setChannels((channels) => {\n        if (!lockChannelOrder && event.cid)\n          return moveChannelUp<At, Ch, Co, Ev, Me, Re, Us>({\n            channels,\n            cid: event.cid,\n          });\n        return [...channels];\n      });\n    };\n\n    client.on('message.new', handleEvent);\n    return () => client.off('message.new', handleEvent);\n  }, []);\n};\n"]}