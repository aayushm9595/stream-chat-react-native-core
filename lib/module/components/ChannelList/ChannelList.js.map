{"version":3,"sources":["ChannelList.tsx"],"names":["DEFAULT_FILTERS","DEFAULT_OPTIONS","DEFAULT_SORT","ChannelList","props","filters","List","ChannelListMessenger","lockChannelOrder","onAddedToChannel","onChannelDeleted","onChannelHidden","onChannelTruncated","onChannelUpdated","onMessageNew","onRemovedFromChannel","onSelect","options","setFlatListRef","sort","listRef","forceUpdate","setForceUpdate","channels","hasNextPage","loadNextPage","refreshList","reloadList","setChannels","status","error","loadingChannels","loadingNextPage","refreshing","ref","current"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\n\nimport {\n  ChannelListMessenger,\n  ChannelListMessengerProps,\n} from './ChannelListMessenger';\n\nimport { useAddedToChannelNotification } from './hooks/listeners/useAddedToChannelNotification';\nimport { useChannelDeleted } from './hooks/listeners/useChannelDeleted';\nimport { useChannelHidden } from './hooks/listeners/useChannelHidden';\nimport { useChannelTruncated } from './hooks/listeners/useChannelTruncated';\nimport { useChannelUpdated } from './hooks/listeners/useChannelUpdated';\nimport { useConnectionRecovered } from './hooks/listeners/useConnectionRecovered';\nimport { useNewMessage } from './hooks/listeners/useNewMessage';\nimport { useNewMessageNotification } from './hooks/listeners/useNewMessageNotification';\nimport { usePaginatedChannels } from './hooks/usePaginatedChannels';\nimport { useRemovedFromChannelNotification } from './hooks/listeners/useRemovedFromChannelNotification';\nimport { useUserPresence } from './hooks/listeners/useUserPresence';\n\nimport type { FlatList, FlatListProps } from 'react-native';\nimport type {\n  Channel,\n  ChannelFilters,\n  ChannelOptions,\n  ChannelSort,\n  Event,\n} from 'stream-chat';\n\nimport type { HeaderErrorProps } from './ChannelListHeaderErrorIndicator';\nimport type { ChannelPreviewMessengerProps } from '../ChannelPreview/ChannelPreviewMessenger';\nimport type { EmptyStateProps } from '../Indicators/EmptyStateIndicator';\nimport type { LoadingErrorProps } from '../Indicators/LoadingErrorIndicator';\nimport type { LoadingProps } from '../Indicators/LoadingIndicator';\n\nimport type {\n  DefaultAttachmentType,\n  DefaultChannelType,\n  DefaultCommandType,\n  DefaultEventType,\n  DefaultMessageType,\n  DefaultReactionType,\n  DefaultUserType,\n  UnknownType,\n} from '../../types/types';\n\nexport type ChannelListProps<\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType\n> = {\n  /**\n   * Function to set the currently active channel, acts as a bridge between ChannelList and Channel components\n   *\n   * @param channel A channel object\n   * */\n  onSelect: (channel: Channel<At, Ch, Co, Ev, Me, Re, Us>) => void;\n  /**\n   * Besides the existing default behavior of the ChannelListMessenger component, you can attach\n   * additional props to the underlying React Native FlatList.\n   *\n   * You can find list of all the available FlatList props here - https://facebook.github.io/react-native/docs/flatlist#props\n   *\n   * **EXAMPLE:**\n   *\n   * ```\n   * <ChannelListMessenger\n   *  channels={channels}\n   *  additionalFlatListProps={{ bounces: true }}\n   * />\n   * ```\n   *\n   * **Note:** Don't use `additionalFlatListProps` to access the FlatList ref, use `setFlatListRef`\n   */\n  additionalFlatListProps?: Partial<\n    FlatListProps<Channel<At, Ch, Co, Ev, Me, Re, Us>>\n  >;\n  /**\n   * Custom indicator to use when channel list is empty\n   *\n   * Default: [EmptyStateIndicator](https://getstream.github.io/stream-chat-react-native/#emptystateindicator)\n   * */\n  EmptyStateIndicator?: React.ComponentType<EmptyStateProps>;\n  /**\n   * Object containing channel query filters\n   * @see See [Channel query documentation](https://getstream.io/chat/docs/query_channels) for a list of available filter fields\n   * */\n  filters?: ChannelFilters<Ch, Co, Us>;\n  /**\n   * Custom loading indicator to display at bottom of the list, while loading further pages\n   *\n   * Default: [ChannelListFooterLoadingIndicator](https://getstream.github.io/stream-chat-react-native/#ChannelListFooterLoadingIndicator)\n   */\n  FooterLoadingIndicator?: React.ComponentType;\n  /**\n   * Custom indicator to display error at top of list, if loading/pagination error occurs\n   *\n   * Default: [ChannelListHeaderErrorIndicator](https://getstream.github.io/stream-chat-react-native/#ChannelListHeaderErrorIndicator)\n   */\n  HeaderErrorIndicator?: React.ComponentType<HeaderErrorProps>;\n  /**\n   * Custom indicator to display network-down error at top of list, if there is connectivity issue\n   *\n   * Default: [ChannelListHeaderNetworkDownIndicator](https://getstream.github.io/stream-chat-react-native/#ChannelListHeaderNetworkDownIndicator)\n   */\n  HeaderNetworkDownIndicator?: React.ComponentType;\n  /**\n   * Custom UI component to display the list of channels\n   *\n   * Default: [ChannelListMessenger](https://getstream.github.io/stream-chat-react-native/#channellistmessenger)\n   */\n  List?: React.ComponentType<\n    ChannelListMessengerProps<At, Ch, Co, Ev, Me, Re, Us>\n  >;\n  /**\n   * Custom indicator to use when there is error in fetching channels\n   *\n   * Default: [LoadingErrorIndicator](https://getstream.github.io/stream-chat-react-native/#loadingerrorindicator)\n   * */\n  LoadingErrorIndicator?: React.ComponentType<LoadingErrorProps>;\n  /**\n   * Custom loading indicator to use\n   *\n   * Default: [LoadingIndicator](https://getstream.github.io/stream-chat-react-native/#loadingindicator)\n   * */\n  LoadingIndicator?: React.ComponentType<LoadingProps>;\n  /**\n   * The React Native FlatList threshold to fetch more data\n   * @see See loadMoreThreshold [doc](https://facebook.github.io/react-native/docs/flatlist#onendreachedthreshold)\n   * */\n  loadMoreThreshold?: number;\n  /**\n   * If set to true, channels won't dynamically sort by most recent message, defaults to false\n   */\n  lockChannelOrder?: boolean;\n  /**\n   * Function that overrides default behavior when a user gets added to a channel\n   *\n   * @param {Event} event [Event Object](https://getstream.io/chat/docs/event_object) corresponding to `notification.added_to_channel` event\n   * */\n  onAddedToChannel?: (\n    setChannels: React.Dispatch<\n      React.SetStateAction<Channel<At, Ch, Co, Ev, Me, Re, Us>[]>\n    >,\n    event: Event<At, Ch, Co, Ev, Me, Re, Us>,\n  ) => void;\n  /**\n   * Function that overrides default behavior when a channel gets deleted. In absence of this prop, the channel will be removed from the list.\n   *\n   * @param {Event} event [Event object](https://getstream.io/chat/docs/event_object) corresponding to `channel.deleted` event\n   * */\n  onChannelDeleted?: (\n    setChannels: React.Dispatch<\n      React.SetStateAction<Channel<At, Ch, Co, Ev, Me, Re, Us>[]>\n    >,\n    event: Event<At, Ch, Co, Ev, Me, Re, Us>,\n  ) => void;\n  /**\n   * Function that overrides default behavior when a channel gets hidden. In absence of this prop, the channel will be removed from the list.\n   *\n   * @param {Event} event [Event object](https://getstream.io/chat/docs/event_object) corresponding to `channel.hidden` event\n   * */\n  onChannelHidden?: (\n    setChannels: React.Dispatch<\n      React.SetStateAction<Channel<At, Ch, Co, Ev, Me, Re, Us>[]>\n    >,\n    event: Event<At, Ch, Co, Ev, Me, Re, Us>,\n  ) => void;\n  /**\n   * Function to customize behavior when a channel gets truncated\n   *\n   * @param {Event} event [Event object](https://getstream.io/chat/docs/event_object) corresponding to `channel.truncated` event\n   * */\n  onChannelTruncated?: (\n    setChannels: React.Dispatch<\n      React.SetStateAction<Channel<At, Ch, Co, Ev, Me, Re, Us>[]>\n    >,\n    event: Event<At, Ch, Co, Ev, Me, Re, Us>,\n  ) => void;\n  /**\n   * Function that overrides default behavior when a channel gets updated\n   *\n   * @param {Event} event [Event object](https://getstream.io/chat/docs/event_object) corresponding to `channel.updated` event\n   * */\n  onChannelUpdated?: (\n    setChannels: React.Dispatch<\n      React.SetStateAction<Channel<At, Ch, Co, Ev, Me, Re, Us>[]>\n    >,\n    event: Event<At, Ch, Co, Ev, Me, Re, Us>,\n  ) => void;\n  /**\n   * Function that overrides default behavior when new message is received on channel not currently being watched\n   *\n   * @param {Event} event [Event object](https://getstream.io/chat/docs/event_object) corresponding to `notification.message_new` event\n   * */\n  onMessageNew?: (\n    setChannels: React.Dispatch<\n      React.SetStateAction<Channel<At, Ch, Co, Ev, Me, Re, Us>[]>\n    >,\n    event: Event<At, Ch, Co, Ev, Me, Re, Us>,\n  ) => void;\n  /**\n   * Function that overrides default behavior when a user gets removed from a channel\n   *\n   * @param {Event} event [Event object](https://getstream.io/chat/docs/event_object) corresponding to `notification.removed_from_channel` event\n   * */\n  onRemovedFromChannel?: (\n    setChannels: React.Dispatch<\n      React.SetStateAction<Channel<At, Ch, Co, Ev, Me, Re, Us>[]>\n    >,\n    event: Event<At, Ch, Co, Ev, Me, Re, Us>,\n  ) => void;\n  /**\n   * Object containing channel query options\n   * @see See [Channel query documentation](https://getstream.io/chat/docs/query_channels) for a list of available option fields\n   * */\n  options?: ChannelOptions;\n  /**\n   * Custom UI component to display individual channel list items\n   *\n   * Default: [ChannelPreviewMessenger](https://getstream.github.io/stream-chat-react-native/#channelpreviewmessenger)\n   * */\n  Preview?: React.ComponentType<\n    ChannelPreviewMessengerProps<At, Ch, Co, Ev, Me, Re, Us>\n  >;\n  /**\n   * Function to gain access to the inner FlatList ref\n   *\n   * **Example:**\n   *\n   * ```\n   * <ChannelListMessenger\n   *  setFlatListRef={(ref) => {\n   *    // Use ref for your own good\n   *  }}\n   * ```\n   */\n  setFlatListRef?: (\n    ref: FlatList<Channel<At, Ch, Co, Ev, Me, Re, Us>> | null,\n  ) => void;\n  /**\n   * Object containing channel sort parameters\n   * @see See [Channel query documentation](https://getstream.io/chat/docs/query_channels) for a list of available sorting fields\n   * */\n  sort?: ChannelSort<Ch>;\n};\n\nconst DEFAULT_FILTERS = {};\nconst DEFAULT_OPTIONS = {};\nconst DEFAULT_SORT = {};\n\n/**\n * This component fetches a list of channels, allowing you to select the channel you want to open.\n * The ChannelList doesn't provide any UI for the underlying React Native FlatList. UI is determined by the `List` component which is\n * provided to the ChannelList component as a prop. By default, the ChannelListMessenger component is used as the list UI.\n *\n * @example ./ChannelList.md\n */\nexport const ChannelList = <\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType\n>(\n  props: ChannelListProps<At, Ch, Co, Ev, Me, Re, Us>,\n) => {\n  const {\n    filters = DEFAULT_FILTERS,\n    List = ChannelListMessenger,\n    lockChannelOrder = false,\n    onAddedToChannel,\n    onChannelDeleted,\n    onChannelHidden,\n    onChannelTruncated,\n    onChannelUpdated,\n    onMessageNew,\n    onRemovedFromChannel,\n    onSelect,\n    options = DEFAULT_OPTIONS,\n    setFlatListRef,\n    sort = DEFAULT_SORT,\n  } = props;\n\n  const listRef = useRef<FlatList<Channel<At, Ch, Co, Ev, Me, Re, Us>> | null>(\n    null,\n  );\n  const [forceUpdate, setForceUpdate] = useState(0);\n\n  const {\n    channels,\n    hasNextPage,\n    loadNextPage,\n    refreshList,\n    reloadList,\n    setChannels,\n    status,\n  } = usePaginatedChannels<At, Ch, Co, Ev, Me, Re, Us>({\n    filters,\n    options,\n    sort,\n  });\n\n  useEffect(() => {\n    // TODO: Use sync api endpoint to refresh the list, instead of calling queryChannels.\n    refreshList();\n  }, [forceUpdate]);\n\n  // Setup event listeners\n  useAddedToChannelNotification({\n    onAddedToChannel,\n    setChannels,\n  });\n\n  useChannelDeleted({\n    onChannelDeleted,\n    setChannels,\n  });\n\n  useChannelHidden({\n    onChannelHidden,\n    setChannels,\n  });\n\n  useChannelTruncated({\n    onChannelTruncated,\n    setChannels,\n    setForceUpdate,\n  });\n\n  useChannelUpdated({\n    onChannelUpdated,\n    setChannels,\n  });\n\n  useConnectionRecovered<At, Ch, Co, Ev, Me, Re, Us>({\n    setForceUpdate,\n  });\n\n  useNewMessage({\n    lockChannelOrder,\n    setChannels,\n  });\n\n  useNewMessageNotification({\n    onMessageNew,\n    setChannels,\n  });\n\n  useRemovedFromChannelNotification({\n    onRemovedFromChannel,\n    setChannels,\n  });\n\n  useUserPresence({\n    setChannels,\n  });\n\n  return (\n    <List<At, Ch, Co, Ev, Me, Re, Us>\n      {...props}\n      channels={channels}\n      error={status.error}\n      forceUpdate={forceUpdate}\n      hasNextPage={hasNextPage}\n      loadingChannels={status.loadingChannels}\n      loadingNextPage={status.loadingNextPage}\n      loadNextPage={loadNextPage}\n      refreshing={status.refreshing}\n      refreshList={refreshList}\n      reloadList={reloadList}\n      setActiveChannel={onSelect}\n      setFlatListRef={(\n        ref: FlatList<Channel<At, Ch, Co, Ev, Me, Re, Us>> | null,\n      ) => {\n        listRef.current = ref;\n        setFlatListRef && setFlatListRef(ref);\n      }}\n    />\n  );\n};\n"]}