{"version":3,"sources":["ImageUploadPreview.tsx"],"names":["closeRound","require","Container","styled","View","theme","messageInput","imageUploadPreview","container","css","Dismiss","TouchableOpacity","dismiss","DismissImage","Image","dismissImage","ItemContainer","itemContainer","Upload","upload","ImageUploadPreview","props","imageUploads","removeImage","retryUpload","renderItem","item","newImage","state","FileState","UPLOADED","UPLOADING","ProgressIndicatorTypes","IN_PROGRESS","UPLOAD_FAILED","RETRY","undefined","uri","file","url","id","length","flex"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { FlatList, ImageRequireSource } from 'react-native';\n\nimport { UploadProgressIndicator } from './UploadProgressIndicator';\n\nimport type { ImageUpload } from './hooks/useMessageDetailsForState';\n\nimport { styled } from '../../styles/styledComponents';\nimport { FileState, ProgressIndicatorTypes } from '../../utils/utils';\n\nconst closeRound: ImageRequireSource = require('../../images/icons/close-round.png');\n\nconst Container = styled.View`\n  height: 70px;\n  padding: 10px;\n  ${({ theme }) => theme.messageInput.imageUploadPreview.container.css};\n`;\n\nconst Dismiss = styled.TouchableOpacity`\n  align-items: center;\n  background-color: #fff;\n  border-radius: 20px;\n  height: 20px;\n  justify-content: center;\n  position: absolute;\n  right: 5px;\n  top: 5px;\n  width: 20px;\n  ${({ theme }) => theme.messageInput.imageUploadPreview.dismiss.css};\n`;\n\nconst DismissImage = styled.Image`\n  height: 10px;\n  width: 10px;\n  ${({ theme }) => theme.messageInput.imageUploadPreview.dismissImage.css};\n`;\n\nconst ItemContainer = styled.View`\n  align-items: flex-start;\n  flex-direction: row;\n  height: 50px;\n  margin-left: 5px;\n  ${({ theme }) => theme.messageInput.imageUploadPreview.itemContainer.css};\n`;\n\nconst Upload = styled.Image`\n  border-radius: 10px;\n  height: 50px;\n  width: 50px;\n  ${({ theme }) => theme.messageInput.imageUploadPreview.upload.css};\n`;\n\nexport type ImageUploadPreviewProps = {\n  /**\n   * An array of image objects which are set for upload. It has the following structure:\n   *\n   * ```json\n   *  [\n   *    {\n   *      \"file\": // File object,\n   *      \"id\": \"randomly_generated_temp_id_1\",\n   *      \"state\": \"uploading\" // or \"finished\",\n   *    },\n   *    {\n   *      \"file\": // File object,\n   *      \"id\": \"randomly_generated_temp_id_2\",\n   *      \"state\": \"uploading\" // or \"finished\",\n   *    },\n   *  ]\n   * ```\n   *\n   */\n  imageUploads: ImageUpload[];\n  /**\n   * Function for removing an image from the upload preview\n   *\n   * @param id string ID of image in `imageUploads` object in state of MessageInput\n   */\n  removeImage: (id: string) => void;\n  /**\n   * Function for attempting to upload an image\n   *\n   * @param id string ID of image in `imageUploads` object in state of MessageInput\n   */\n  retryUpload: ({ newImage }: { newImage: ImageUpload }) => Promise<void>;\n};\n\n/**\n * UI Component to preview the images set for upload\n *\n * @example ./ImageUploadPreview.md\n */\nexport const ImageUploadPreview: React.FC<ImageUploadPreviewProps> = (\n  props,\n) => {\n  const { imageUploads, removeImage, retryUpload } = props;\n\n  const renderItem = ({ item }: { item: ImageUpload }) => (\n    <ItemContainer>\n      <UploadProgressIndicator\n        action={() => {\n          if (retryUpload) {\n            retryUpload({ newImage: item });\n          }\n        }}\n        active={item.state !== FileState.UPLOADED}\n        type={\n          item.state === FileState.UPLOADING\n            ? ProgressIndicatorTypes.IN_PROGRESS\n            : item.state === FileState.UPLOAD_FAILED\n            ? ProgressIndicatorTypes.RETRY\n            : undefined\n        }\n      >\n        <Upload\n          resizeMode='cover'\n          source={{ uri: item.file.uri || item.url }}\n        />\n      </UploadProgressIndicator>\n      <Dismiss\n        onPress={() => {\n          if (removeImage) {\n            removeImage(item.id);\n          }\n        }}\n        testID='remove-image-upload-preview'\n      >\n        <DismissImage source={closeRound} />\n      </Dismiss>\n    </ItemContainer>\n  );\n\n  return imageUploads?.length > 0 ? (\n    <Container>\n      <FlatList\n        data={imageUploads}\n        horizontal\n        keyExtractor={(item) => item.id}\n        renderItem={renderItem}\n        style={{ flex: 1 }}\n      />\n    </Container>\n  ) : null;\n};\n"]}