{"version":3,"sources":["UploadProgressIndicator.tsx"],"names":["iconReload","require","ActivityIndicatorContainer","styled","View","Container","theme","messageInput","uploadProgressIndicator","container","css","Overlay","overlay","RetryButtonContainer","TouchableOpacity","UploadProgressIndicator","props","action","active","children","type","ProgressIndicatorTypes","IN_PROGRESS","RETRY","height","width"],"mappings":";;;;;;;;;AAAA;;AACA;;AAQA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,UAA8B,GAAGC,OAAO,4BAA9C;;AAEA,IAAMC,0BAA0B,GAAGC,yBAAOC,IAAV,mBAAhC;;AAUA,IAAMC,SAAS,GAAGF,yBAAOC,IAAV,qBAOX;AAAA,MAAGE,KAAH,QAAGA,KAAH;AAAA,SAAeA,KAAK,CAACC,YAAN,CAAmBC,uBAAnB,CAA2CC,SAA3C,CAAqDC,GAApE;AAAA,CAPW,CAAf;;AAUA,IAAMC,OAAO,GAAGR,yBAAOC,IAAV,qBAQT;AAAA,MAAGE,KAAH,SAAGA,KAAH;AAAA,SAAeA,KAAK,CAACC,YAAN,CAAmBC,uBAAnB,CAA2CI,OAA3C,CAAmDF,GAAlE;AAAA,CARS,CAAb;;AAWA,IAAMG,oBAAoB,GAAGV,yBAAOW,gBAAV,oBAA1B;;AAmBO,IAAMC,uBAA+D,GAAG,SAAlEA,uBAAkE,CAC7EC,KAD6E,EAE1E;AAAA,MACKC,MADL,GACwCD,KADxC,CACKC,MADL;AAAA,MACaC,MADb,GACwCF,KADxC,CACaE,MADb;AAAA,MACqBC,QADrB,GACwCH,KADxC,CACqBG,QADrB;AAAA,MAC+BC,IAD/B,GACwCJ,KADxC,CAC+BI,IAD/B;AAGH,SAAO,CAACF,MAAD,GACL,gCAAC,iBAAD;AAAM,IAAA,MAAM,EAAC,oCAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAmDC,QAAnD,CADK,GAGL,gCAAC,iBAAD;AAAM,IAAA,MAAM,EAAC,kCAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,QADH,EAEE,gCAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAGE,gCAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGC,IAAI,KAAKC,8BAAuBC,WAAhC,IACC,gCAAC,0BAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,gCAAC,8BAAD;AACE,IAAA,KAAK,EAAC,MADR;AAEE,IAAA,MAAM,EAAC,2BAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAFJ,EASGF,IAAI,KAAKC,8BAAuBE,KAAhC,IACC,gCAAC,oBAAD;AAAsB,IAAA,OAAO,EAAEN,MAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,gCAAC,kBAAD;AACE,IAAA,MAAM,EAAEjB,UADV;AAEE,IAAA,KAAK,EAAE;AAAEwB,MAAAA,MAAM,EAAE,EAAV;AAAcC,MAAAA,KAAK,EAAE;AAArB,KAFT;AAGE,IAAA,MAAM,EAAC,iCAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAVJ,CAHF,CAHF;AA2BD,CAhCM","sourcesContent":["import React from 'react';\nimport {\n  ActivityIndicator,\n  GestureResponderEvent,\n  Image,\n  ImageRequireSource,\n  View,\n} from 'react-native';\n\nimport { styled } from '../../styles/styledComponents';\nimport { ProgressIndicatorTypes } from '../../utils/utils';\n\nconst iconReload: ImageRequireSource = require('../../images/reload1.png');\n\nconst ActivityIndicatorContainer = styled.View`\n  align-items: center;\n  bottom: 0;\n  justify-content: center;\n  left: 0;\n  position: absolute;\n  right: 0;\n  top: 0;\n`;\n\nconst Container = styled.View`\n  align-items: center;\n  background-color: rgba(255, 255, 255, 0);\n  height: 100%;\n  justify-content: center;\n  position: absolute;\n  width: 100%;\n  ${({ theme }) => theme.messageInput.uploadProgressIndicator.container.css};\n`;\n\nconst Overlay = styled.View`\n  align-items: center;\n  background-color: rgba(0, 0, 0, 0.3);\n  height: 100%;\n  justify-content: center;\n  opacity: 0;\n  position: absolute;\n  width: 100%;\n  ${({ theme }) => theme.messageInput.uploadProgressIndicator.overlay.css};\n`;\n\nconst RetryButtonContainer = styled.TouchableOpacity`\n  align-items: center;\n  bottom: 0;\n  justify-content: center;\n  left: 0;\n  position: absolute;\n  right: 0;\n  top: 0;\n`;\n\nexport type UploadProgressIndicatorProps = {\n  /** Action triggered when clicked indicator */\n  action?: (event: GestureResponderEvent) => void;\n  /** Boolean status of upload progress */\n  active?: boolean;\n  /** Type of active indicator */\n  type?: 'in_progress' | 'retry';\n};\n\nexport const UploadProgressIndicator: React.FC<UploadProgressIndicatorProps> = (\n  props,\n) => {\n  const { action, active, children, type } = props;\n\n  return !active ? (\n    <View testID='inactive-upload-progress-indicator'>{children}</View>\n  ) : (\n    <View testID='active-upload-progress-indicator'>\n      {children}\n      <Overlay />\n      <Container>\n        {type === ProgressIndicatorTypes.IN_PROGRESS && (\n          <ActivityIndicatorContainer>\n            <ActivityIndicator\n              color='grey'\n              testID='upload-progress-indicator'\n            />\n          </ActivityIndicatorContainer>\n        )}\n        {type === ProgressIndicatorTypes.RETRY && (\n          <RetryButtonContainer onPress={action}>\n            <Image\n              source={iconReload}\n              style={{ height: 18, width: 18 }}\n              testID='retry-upload-progress-indicator'\n            />\n          </RetryButtonContainer>\n        )}\n      </Container>\n    </View>\n  );\n};\n"]}