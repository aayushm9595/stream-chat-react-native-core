{"version":3,"sources":["FileIcon.tsx"],"names":["iconPDF","require","iconDOC","iconPPT","iconXLS","iconTAR","Icon","styled","Image","theme","message","file","icon","css","wordMimeTypes","excelMimeTypes","powerpointMimeTypes","archiveFileTypes","codeFileTypes","mimeTypeToIconMap","type","mimeTypeToIcon","mimeType","FileIcon","size","height","width"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport type { ImageRequireSource } from 'react-native';\n\nimport { styled } from '../../styles/styledComponents';\n\nconst iconPDF: ImageRequireSource = require('../../images/PDF.png');\nconst iconDOC: ImageRequireSource = require('../../images/DOC.png');\nconst iconPPT: ImageRequireSource = require('../../images/PPT.png');\nconst iconXLS: ImageRequireSource = require('../../images/XLS.png');\nconst iconTAR: ImageRequireSource = require('../../images/TAR.png');\n\nconst Icon = styled.Image`\n  ${({ theme }) => theme.message.file.icon.css};\n`;\n\n// Partially based on:\n// https://stackoverflow.com/a/4212908/2570866\n\nconst wordMimeTypes = [\n  // Microsoft Word\n  // .doc .dot\n  'application/msword',\n  // .doc .dot\n  'application/msword-template',\n  // .docx\n  'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n  // .dotx (no test)\n  'application/vnd.openxmlformats-officedocument.wordprocessingml.template',\n  // .docm\n  'application/vnd.ms-word.document.macroEnabled.12',\n  // .dotm (no test)\n  'application/vnd.ms-word.template.macroEnabled.12',\n\n  // LibreOffice/OpenOffice Writer\n  // .odt\n  'application/vnd.oasis.opendocument.text',\n  // .ott\n  'application/vnd.oasis.opendocument.text-template',\n  // .fodt\n  'application/vnd.oasis.opendocument.text-flat-xml',\n  // .uot\n  // NOTE: firefox doesn't know mimetype so maybe ignore\n];\n\nconst excelMimeTypes = [\n  // .csv\n  'text/csv',\n  // TODO: maybe more data files\n\n  // Microsoft Excel\n  // .xls .xlt .xla (no test for .xla)\n  'application/vnd.ms-excel',\n  // .xlsx\n  'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n  // .xltx (no test)\n  'application/vnd.openxmlformats-officedocument.spreadsheetml.template',\n  // .xlsm\n  'application/vnd.ms-excel.sheet.macroEnabled.12',\n  // .xltm (no test)\n  'application/vnd.ms-excel.template.macroEnabled.12',\n  // .xlam (no test)\n  'application/vnd.ms-excel.addin.macroEnabled.12',\n  // .xlsb (no test)\n  'application/vnd.ms-excel.addin.macroEnabled.12',\n\n  // LibreOffice/OpenOffice Calc\n  // .ods\n  'application/vnd.oasis.opendocument.spreadsheet',\n  // .ots\n  'application/vnd.oasis.opendocument.spreadsheet-template',\n  // .fods\n  'application/vnd.oasis.opendocument.spreadsheet-flat-xml',\n  // .uos\n  // NOTE: firefox doesn't know mimetype so maybe ignore\n];\n\nconst powerpointMimeTypes = [\n  // Microsoft Word\n  // .ppt .pot .pps .ppa (no test for .ppa)\n  'application/vnd.ms-powerpoint',\n  // .pptx\n  'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n  // .potx (no test)\n  'application/vnd.openxmlformats-officedocument.presentationml.template',\n  // .ppsx\n  'application/vnd.openxmlformats-officedocument.presentationml.slideshow',\n  // .ppam\n  'application/vnd.ms-powerpoint.addin.macroEnabled.12',\n  // .pptm\n  'application/vnd.ms-powerpoint.presentation.macroEnabled.12',\n  // .potm\n  'application/vnd.ms-powerpoint.template.macroEnabled.12',\n  // .ppsm\n  'application/vnd.ms-powerpoint.slideshow.macroEnabled.12',\n\n  // LibreOffice/OpenOffice Writer\n  // .odp\n  'application/vnd.oasis.opendocument.presentation',\n  // .otp\n  'application/vnd.oasis.opendocument.presentation-template',\n  // .fodp\n  'application/vnd.oasis.opendocument.presentation-flat-xml',\n  // .uop\n  // NOTE: firefox doesn't know mimetype so maybe ignore\n];\n\nconst archiveFileTypes = [\n  // .zip\n  'application/zip',\n  // .z7\n  'application/x-7z-compressed',\n  // .ar\n  'application/x-archive',\n  // .tar\n  'application/x-tar',\n  // .tar.gz\n  'application/gzip',\n  // .tar.Z\n  'application/x-compress',\n  // .tar.bz2\n  'application/x-bzip',\n  // .tar.lz\n  'application/x-lzip',\n  // .tar.lz4\n  'application/x-lz4',\n  // .tar.lzma\n  'application/x-lzma',\n  // .tar.lzo (no test)\n  'application/x-lzop',\n  // .tar.xz\n  'application/x-xz',\n  // .war\n  'application/x-webarchive',\n  // .rar\n  'application/vnd.rar',\n];\n\nconst codeFileTypes = [\n  // .html .htm\n  'text/html',\n  // .css\n  'text/css',\n  // .js\n  'application/x-javascript',\n  // .json\n  'application/json',\n  // .py\n  'text/x-python',\n  // .go\n  'text/x-go',\n  // .c\n  'text/x-csrc',\n  // .cpp\n  'text/x-c++src',\n  // .rb\n  'application/x-ruby',\n  // .rust\n  'text/rust',\n  // .java\n  'text/x-java',\n  // .php\n  'application/x-php',\n  // .cs\n  'text/x-csharp',\n  // .scala\n  'text/x-scala',\n  // .erl\n  'text/x-erlang',\n  // .sh\n  'application/x-shellscript',\n];\n\nconst mimeTypeToIconMap: Record<string, ImageRequireSource> = {\n  'application/pdf': iconPDF,\n};\n\nfor (const type of wordMimeTypes) {\n  mimeTypeToIconMap[type] = iconDOC;\n}\n\nfor (const type of excelMimeTypes) {\n  mimeTypeToIconMap[type] = iconXLS;\n}\n\nfor (const type of powerpointMimeTypes) {\n  mimeTypeToIconMap[type] = iconPPT;\n}\n\nfor (const type of archiveFileTypes) {\n  mimeTypeToIconMap[type] = iconTAR;\n}\n\nfor (const type of codeFileTypes) {\n  mimeTypeToIconMap[type] = iconDOC;\n}\n\nfunction mimeTypeToIcon(mimeType?: string): ImageRequireSource {\n  if (!mimeType) return iconDOC;\n\n  const icon = mimeTypeToIconMap[mimeType];\n  if (icon) return icon;\n\n  return iconDOC;\n}\n\nexport type FileIconProps = {\n  mimeType?: string;\n  size?: number;\n};\n\nexport const FileIcon: React.FC<FileIconProps> = ({ mimeType, size }) => (\n  <Icon\n    source={mimeTypeToIcon(mimeType)}\n    style={size ? { height: size, width: size } : {}}\n  />\n);\n"]}