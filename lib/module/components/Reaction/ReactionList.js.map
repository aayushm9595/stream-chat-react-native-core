{"version":3,"sources":["ReactionList.tsx"],"names":["leftTail","require","leftCenter","leftEnd","rightTail","rightCenter","rightEnd","Container","styled","View","theme","message","reactionList","container","css","ImageWrapper","LeftCenter","Image","LeftEnd","LeftTail","ReactionCount","Text","reactionCounts","undefined","reactionCount","Reactions","RightCenter","RightEnd","RightTail","Wrapper","alignment","ReactionList","props","getTotalReactionCount","latestReactions","supportedReactions","emojiData","visible"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport { renderReactions } from './utils/renderReactions';\n\nimport { styled } from '../../styles/styledComponents';\nimport { emojiData } from '../../utils/utils';\n\nimport type { ImageRequireSource } from 'react-native';\n\nimport type {\n  Alignment,\n  MessageWithDates,\n} from '../../contexts/messagesContext/MessagesContext';\nimport type {\n  DefaultAttachmentType,\n  DefaultChannelType,\n  DefaultCommandType,\n  DefaultMessageType,\n  DefaultReactionType,\n  DefaultUserType,\n  UnknownType,\n} from '../../types/types';\n\nconst leftTail: ImageRequireSource = require('../../images/reactionlist/left-tail.png');\nconst leftCenter: ImageRequireSource = require('../../images/reactionlist/left-center.png');\nconst leftEnd: ImageRequireSource = require('../../images/reactionlist/left-end.png');\n\nconst rightTail: ImageRequireSource = require('../../images/reactionlist/right-tail.png');\nconst rightCenter: ImageRequireSource = require('../../images/reactionlist/right-center.png');\nconst rightEnd: ImageRequireSource = require('../../images/reactionlist/right-end.png');\n\nconst Container = styled.View`\n  align-items: center;\n  flex-direction: row;\n  height: 24px;\n  padding-horizontal: 5px;\n  z-index: 1;\n  ${({ theme }) => theme.message.reactionList.container.css}\n`;\n\nconst ImageWrapper = styled.View`\n  flex-direction: row;\n  top: -23px;\n`;\n\nconst LeftCenter = styled.Image`\n  flex: 1;\n  height: 33px;\n`;\n\nconst LeftEnd = styled.Image`\n  height: 33px;\n  width: 14px;\n`;\n\nconst LeftTail = styled.Image`\n  height: 33px;\n  width: 25px;\n`;\n\nconst ReactionCount = styled.Text<{ reactionCounts: number }>`\n  color: white;\n  font-size: 12px;\n  ${({ reactionCounts }) =>\n    reactionCounts < 10 ? undefined : 'min-width: 20px;'}\n  ${({ theme }) => theme.message.reactionList.reactionCount.css}\n`;\n\nconst Reactions = styled.View`\n  flex-direction: row;\n`;\n\nconst RightCenter = styled.Image`\n  flex: 1;\n  height: 33px;\n`;\n\nconst RightEnd = styled.Image`\n  height: 33px;\n  width: 14px;\n`;\n\nconst RightTail = styled.Image`\n  height: 33px;\n  width: 25px;\n`;\n\nconst Wrapper = styled.View<{ alignment: Alignment }>`\n  align-self: ${({ alignment }) =>\n    alignment === 'left' ? 'flex-start' : 'flex-end'};\n  height: 28px;\n  ${({ alignment }) => `${alignment === 'left' ? 'left' : 'right'}: -10px`}\n  z-index: 10;\n`;\n\nexport type LatestReactions<\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType\n> = MessageWithDates<At, Ch, Co, Me, Re, Us>['latest_reactions'];\n\nexport type Reaction = {\n  icon: string;\n  id: string;\n};\n\nexport type ReactionListProps<\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType\n> = {\n  alignment: Alignment;\n  getTotalReactionCount: (\n    arg: {\n      icon: string;\n      id: string;\n    }[],\n  ) => number;\n  latestReactions: LatestReactions<At, Ch, Co, Me, Re, Us>;\n  /**\n   * e.g.,\n   * [\n   *  {\n   *    id: 'like',\n   *    icon: 'üëç',\n   *  },\n   *  {\n   *    id: 'love',\n   *    icon: '‚ù§Ô∏èÔ∏è',\n   *  },\n   *  {\n   *    id: 'haha',\n   *    icon: 'üòÇ',\n   *  },\n   *  {\n   *    id: 'wow',\n   *    icon: 'üòÆ',\n   *  },\n   * ]\n   */\n  supportedReactions: Reaction[];\n  visible: boolean;\n};\n\n/**\n * @example ./ReactionList.md\n */\nexport const ReactionList = <\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType\n>(\n  props: ReactionListProps<At, Ch, Co, Me, Re, Us>,\n) => {\n  const {\n    alignment,\n    getTotalReactionCount,\n    latestReactions,\n    supportedReactions = emojiData,\n    visible,\n  } = props;\n\n  if (!visible) return null;\n\n  return (\n    <Wrapper alignment={alignment} testID='reaction-list'>\n      <Container>\n        <Reactions>\n          {renderReactions(latestReactions, supportedReactions)}\n        </Reactions>\n        <ReactionCount\n          reactionCounts={getTotalReactionCount(supportedReactions)}\n        >\n          {getTotalReactionCount(supportedReactions)}\n        </ReactionCount>\n      </Container>\n      <ImageWrapper>\n        {alignment === 'left' ? (\n          <>\n            <LeftTail source={leftTail} />\n            <LeftCenter resizeMode='stretch' source={leftCenter} />\n            <LeftEnd source={leftEnd} />\n          </>\n        ) : (\n          <>\n            <RightEnd source={rightEnd} />\n            <RightCenter resizeMode='stretch' source={rightCenter} />\n            <RightTail source={rightTail} />\n          </>\n        )}\n      </ImageWrapper>\n    </Wrapper>\n  );\n};\n"]}