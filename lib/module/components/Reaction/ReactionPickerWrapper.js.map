{"version":3,"sources":["ReactionPickerWrapper.tsx"],"names":["ReactionPickerWrapper","props","alignment","children","customMessageContent","dismissReactionPicker","emojiData","emojiDataDefault","handleReaction","hideReactionCount","hideReactionOwners","message","offset","left","right","top","openReactionPicker","ReactionPicker","ReactionPickerDefault","reactionPickerVisible","supportedReactions","messageContainer","rpLeft","setRPLeft","rpRight","setRPRight","rpTop","setRPTop","setReactionPickerPosition","setTimeout","current","measureInWindow","x","y","width","undefined","Math","round","Dimensions","get","latest_reactions","reaction_counts"],"mappings":"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","sourcesContent":["import React, { PropsWithChildren, useEffect, useRef, useState } from 'react';\nimport { Dimensions, TouchableOpacity } from 'react-native';\n\nimport { ReactionPicker as ReactionPickerDefault } from './ReactionPicker';\n\nimport { emojiData as emojiDataDefault } from '../../utils/utils';\n\nimport type { LatestReactions, Reaction } from './ReactionList';\nimport type { ReactionPickerProps } from './ReactionPicker';\n\nimport type {\n  Alignment,\n  MessageWithDates,\n} from '../../contexts/messagesContext/MessagesContext';\nimport type { Message } from '../../components/MessageList/utils/insertDates';\nimport type {\n  DefaultAttachmentType,\n  DefaultChannelType,\n  DefaultCommandType,\n  DefaultEventType,\n  DefaultMessageType,\n  DefaultReactionType,\n  DefaultUserType,\n  UnknownType,\n} from '../../types/types';\n\nexport type ReactionPickerWrapperProps<\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType\n> = {\n  alignment: Alignment;\n  customMessageContent: boolean;\n  dismissReactionPicker: () => void;\n  handleReaction: (id: Reaction['id']) => void;\n  hideReactionCount: boolean;\n  hideReactionOwners: boolean;\n  message: Message<At, Ch, Co, Ev, Me, Re, Us>;\n  offset: { left: number; right: number; top: number };\n  openReactionPicker: () => void;\n  reactionPickerVisible: boolean;\n  /**\n   * e.g.,\n   * [\n   *  {\n   *    id: 'like',\n   *    icon: 'üëç',\n   *  },\n   *  {\n   *    id: 'love',\n   *    icon: '‚ù§Ô∏èÔ∏è',\n   *  },\n   *  {\n   *    id: 'haha',\n   *    icon: 'üòÇ',\n   *  },\n   *  {\n   *    id: 'wow',\n   *    icon: 'üòÆ',\n   *  },\n   * ]\n   */\n  supportedReactions: Reaction[];\n  /**\n   * @deprecated\n   * emojiData is deprecated. But going to keep it for now\n   * to have backward compatibility. Please use supportedReactions instead.\n   * TODO: Remove following prop in 1.x.x\n   */\n  emojiData?: Reaction[];\n  ReactionPicker?: React.ComponentType<\n    ReactionPickerProps<At, Ch, Co, Me, Re, Us>\n  >;\n};\n\nexport const ReactionPickerWrapper = <\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType\n>(\n  props: PropsWithChildren<\n    ReactionPickerWrapperProps<At, Ch, Co, Ev, Me, Re, Us>\n  >,\n) => {\n  const {\n    alignment,\n    children,\n    customMessageContent,\n    dismissReactionPicker,\n    emojiData = emojiDataDefault,\n    handleReaction,\n    hideReactionCount = false,\n    hideReactionOwners = false,\n    message,\n    offset = { left: 30, right: 10, top: 40 },\n    openReactionPicker,\n    ReactionPicker = ReactionPickerDefault,\n    reactionPickerVisible,\n    supportedReactions = emojiDataDefault,\n  } = props;\n\n  const messageContainer = useRef<TouchableOpacity>(null);\n  const [rpLeft, setRPLeft] = useState<number>();\n  const [rpRight, setRPRight] = useState<number>();\n  const [rpTop, setRPTop] = useState<number>();\n\n  useEffect(() => {\n    if (reactionPickerVisible) {\n      setReactionPickerPosition();\n    }\n  }, [reactionPickerVisible]);\n\n  const setReactionPickerPosition = () => {\n    setTimeout(\n      () => {\n        if (messageContainer.current) {\n          messageContainer.current.measureInWindow((x, y, width) => {\n            setRPLeft(alignment === 'left' ? x - 10 + offset.left : undefined);\n            setRPRight(\n              alignment === 'right'\n                ? Math.round(Dimensions.get('window').width) -\n                    (x + width + offset.right)\n                : undefined,\n            );\n            setRPTop(y - 60 + offset.top);\n          });\n        }\n      },\n      customMessageContent ? 10 : 0,\n    );\n  };\n\n  return (\n    <TouchableOpacity\n      onPress={openReactionPicker}\n      ref={messageContainer}\n      testID='reaction-picker-wrapper'\n    >\n      {children}\n      <ReactionPicker<At, Ch, Co, Me, Re, Us>\n        {...props}\n        handleDismiss={dismissReactionPicker}\n        handleReaction={handleReaction}\n        hideReactionCount={hideReactionCount}\n        hideReactionOwners={hideReactionOwners}\n        latestReactions={\n          message.latest_reactions as LatestReactions<At, Ch, Co, Me, Re, Us>\n        }\n        reactionCounts={\n          message.reaction_counts as MessageWithDates<\n            At,\n            Ch,\n            Co,\n            Me,\n            Re,\n            Us\n          >['reaction_counts']\n        }\n        reactionPickerVisible={reactionPickerVisible}\n        rpLeft={rpLeft}\n        rpRight={rpRight}\n        rpTop={rpTop}\n        supportedReactions={supportedReactions || emojiData}\n      />\n    </TouchableOpacity>\n  );\n};\n"]}