{"version":3,"sources":["CommandsItem.tsx"],"names":["CommandArgs","styled","Text","theme","messageInput","suggestions","command","args","css","CommandDescription","description","Container","View","container","Title","title","Top","top","CommandsItem","item","name"],"mappings":";;;;;;;;;AAAA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA,IAAMA,WAAW,GAAGC,yBAAOC,IAAV,oBACb;AAAA,MAAGC,KAAH,QAAGA,KAAH;AAAA,SAAeA,KAAK,CAACC,YAAN,CAAmBC,WAAnB,CAA+BC,OAA/B,CAAuCC,IAAvC,CAA4CC,GAA3D;AAAA,CADa,CAAjB;;AAIA,IAAMC,kBAAkB,GAAGR,yBAAOC,IAAV,qBACpB;AAAA,MAAGC,KAAH,SAAGA,KAAH;AAAA,SAAeA,KAAK,CAACC,YAAN,CAAmBC,WAAnB,CAA+BC,OAA/B,CAAuCI,WAAvC,CAAmDF,GAAlE;AAAA,CADoB,CAAxB;;AAIA,IAAMG,SAAS,GAAGV,yBAAOW,IAAV,qBAEX;AAAA,MAAGT,KAAH,SAAGA,KAAH;AAAA,SAAeA,KAAK,CAACC,YAAN,CAAmBC,WAAnB,CAA+BC,OAA/B,CAAuCO,SAAvC,CAAiDL,GAAhE;AAAA,CAFW,CAAf;;AAKA,IAAMM,KAAK,GAAGb,yBAAOC,IAAV,qBAEP;AAAA,MAAGC,KAAH,SAAGA,KAAH;AAAA,SAAeA,KAAK,CAACC,YAAN,CAAmBC,WAAnB,CAA+BC,OAA/B,CAAuCS,KAAvC,CAA6CP,GAA5D;AAAA,CAFO,CAAX;;AAKA,IAAMQ,GAAG,GAAGf,yBAAOW,IAAV,qBAGL;AAAA,MAAGT,KAAH,SAAGA,KAAH;AAAA,SAAeA,KAAK,CAACC,YAAN,CAAmBC,WAAnB,CAA+BC,OAA/B,CAAuCW,GAAvC,CAA2CT,GAA1D;AAAA,CAHK,CAAT;;AAoBO,IAAMU,YAAY,GAAG,SAAfA,YAAe;AAAA,yBAC1BC,IAD0B;AAAA,MAClBZ,IADkB,cAClBA,IADkB;AAAA,MACZG,WADY,cACZA,WADY;AAAA,MACCU,IADD,cACCA,IADD;AAAA,SAG1B,gCAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,gCAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,gCAAC,KAAD;AAAO,IAAA,MAAM,EAAC,qBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAsCA,IAAtC,MADF,EAEE,gCAAC,WAAD;AAAa,IAAA,MAAM,EAAC,oBAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA0Cb,IAA1C,CAFF,CADF,EAKE,gCAAC,kBAAD;AAAoB,IAAA,MAAM,EAAC,2BAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGG,WADH,CALF,CAH0B;AAAA,CAArB","sourcesContent":["import React from 'react';\n\nimport { styled } from '../../styles/styledComponents';\n\nimport type { SuggestionCommand } from '../../contexts/suggestionsContext/SuggestionsContext';\nimport type { DefaultCommandType } from '../../types/types';\n\nconst CommandArgs = styled.Text`\n  ${({ theme }) => theme.messageInput.suggestions.command.args.css}\n`;\n\nconst CommandDescription = styled.Text`\n  ${({ theme }) => theme.messageInput.suggestions.command.description.css}\n`;\n\nconst Container = styled.View`\n  padding: 10px;\n  ${({ theme }) => theme.messageInput.suggestions.command.container.css}\n`;\n\nconst Title = styled.Text`\n  font-weight: bold;\n  ${({ theme }) => theme.messageInput.suggestions.command.title.css}\n`;\n\nconst Top = styled.View`\n  align-items: center;\n  flex-direction: row;\n  ${({ theme }) => theme.messageInput.suggestions.command.top.css}\n`;\n\nexport type CommandsItemProps<Co extends string = DefaultCommandType> = {\n  /**\n   * A CommandResponse of suggested CommandTypes with these properties\n   *\n   * - args: Arguments which can be passed to the command\n   * - description: Description of the command\n   * - name: Name of the command\n   */\n  item: SuggestionCommand<Co>;\n};\n\n/**\n * @example ./CommandsItem.md\n */\nexport const CommandsItem = <Co extends string = DefaultCommandType>({\n  item: { args, description, name },\n}: CommandsItemProps<Co>) => (\n  <Container>\n    <Top>\n      <Title testID='commands-item-title'>/{name} </Title>\n      <CommandArgs testID='commands-item-args'>{args}</CommandArgs>\n    </Top>\n    <CommandDescription testID='commands-item-description'>\n      {description}\n    </CommandDescription>\n  </Container>\n);\n"]}