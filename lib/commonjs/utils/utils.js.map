{"version":3,"sources":["utils.ts"],"names":["emojiData","icon","id","FileState","Object","freeze","FINISHED","NO_FILE","UPLOAD_FAILED","UPLOADED","UPLOADING","ProgressIndicatorTypes","IN_PROGRESS","RETRY","isUserResponse","user","undefined","getCommands","channel","getConfig","commands","getMembers","members","state","values","length","filter","member","map","getWatchers","watchers","getMembersAndWatchers","users","reduce","acc","cur","queryMembers","query","onReady","name","$autocomplete","response","forEach","push","queryMembersDebounced","leading","trailing","isMentionTrigger","trigger","ACITriggerSettings","onMentionSelectItem","t","msg","autocompleteSuggestionsLimit","component","dataProvider","text","indexOf","selectedCommands","command","sort","a","b","nameA","toLowerCase","nameB","result","slice","output","entity","caretPosition","key","title","callback","item","_","matchingUsers","data","MESSAGE_ACTIONS","edit","reactions","reply","makeImageCompatibleUrl","url","trim"],"mappings":"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","sourcesContent":["import debounce from 'lodash/debounce';\n\nimport type {\n  Channel,\n  ChannelMemberAPIResponse,\n  ChannelMemberResponse,\n  UserResponse,\n} from 'stream-chat';\nimport type { DebouncedFunc } from 'lodash';\nimport type { CommandsItemProps } from '../components/AutoCompleteInput/CommandsItem';\nimport type { MentionsItemProps } from '../components/AutoCompleteInput/MentionsItem';\nimport type {\n  SuggestionCommand,\n  SuggestionUser,\n} from '../contexts/suggestionsContext/SuggestionsContext';\nimport type { TranslationContextValue } from '../contexts/translationContext/TranslationContext';\nimport type {\n  DefaultAttachmentType,\n  DefaultChannelType,\n  DefaultCommandType,\n  DefaultEventType,\n  DefaultMessageType,\n  DefaultReactionType,\n  DefaultUserType,\n  UnknownType,\n} from '../types/types';\n\nexport const emojiData = [\n  {\n    icon: 'üëç',\n    id: 'like',\n  },\n  {\n    icon: '‚ù§Ô∏èÔ∏è',\n    id: 'love',\n  },\n  {\n    icon: 'üòÇ',\n    id: 'haha',\n  },\n  {\n    icon: 'üòÆ',\n    id: 'wow',\n  },\n  {\n    icon: 'üòî',\n    id: 'sad',\n  },\n  {\n    icon: 'üò†',\n    id: 'angry',\n  },\n];\n\nexport const FileState = Object.freeze({\n  // finished and uploaded state are the same thing. First is set on frontend,\n  // while later is set on backend side\n  // TODO: Unify both of them\n  FINISHED: 'finished',\n  NO_FILE: 'no_file',\n  UPLOAD_FAILED: 'upload_failed',\n  UPLOADED: 'uploaded',\n  UPLOADING: 'uploading',\n});\n\nexport const ProgressIndicatorTypes: {\n  IN_PROGRESS: 'in_progress';\n  RETRY: 'retry';\n} = Object.freeze({\n  IN_PROGRESS: 'in_progress',\n  RETRY: 'retry',\n});\n\nconst isUserResponse = <Us extends DefaultUserType = DefaultUserType>(\n  user: SuggestionUser<Us> | undefined,\n): user is SuggestionUser<Us> => (user as SuggestionUser<Us>) !== undefined;\n\nconst getCommands = <\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType\n>(\n  channel: Channel<At, Ch, Co, Ev, Me, Re, Us>,\n) => channel.getConfig()?.commands || [];\n\nconst getMembers = <\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType\n>(\n  channel: Channel<At, Ch, Co, Ev, Me, Re, Us>,\n) => {\n  const members = (channel.state.members as unknown) as ChannelMemberResponse<\n    Us\n  >[];\n  return members && Object.values(members).length\n    ? (Object.values(members).filter((member) => member.user) as Array<\n        ChannelMemberResponse<Us> & { user: UserResponse<Us> }\n      >).map((member) => member.user)\n    : [];\n};\n\nconst getWatchers = <\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType\n>(\n  channel: Channel<At, Ch, Co, Ev, Me, Re, Us>,\n) => {\n  const watchers = (channel.state.watchers as unknown) as UserResponse<Us>[];\n  return watchers && Object.values(watchers).length\n    ? [...Object.values(watchers)]\n    : [];\n};\n\nconst getMembersAndWatchers = <\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType\n>(\n  channel: Channel<At, Ch, Co, Ev, Me, Re, Us>,\n) => {\n  const users = [...getMembers(channel), ...getWatchers(channel)];\n\n  return Object.values(\n    users.reduce((acc, cur) => {\n      if (!acc[cur.id]) {\n        acc[cur.id] = cur;\n      }\n\n      return acc;\n    }, {} as { [key: string]: SuggestionUser<Us> }),\n  );\n};\ntype QueryMembersFunction<\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType\n> = (\n  channel: Channel<At, Ch, Co, Ev, Me, Re, Us>,\n  query: SuggestionUser<Us>['name'],\n  onReady?: (users: SuggestionUser<Us>[]) => void,\n) => Promise<void>;\n\n// TODO: test to see if this function works as it integrated a debounce function\nconst queryMembers = async <\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType\n>(\n  channel: Channel<At, Ch, Co, Ev, Me, Re, Us>,\n  query: SuggestionUser<Us>['name'],\n  onReady?: (users: SuggestionUser<Us>[]) => void,\n): Promise<void> => {\n  if (typeof query === 'string') {\n    const response = (await ((channel as unknown) as Channel).queryMembers({\n      name: { $autocomplete: query },\n    })) as ChannelMemberAPIResponse<Us>;\n\n    const users: SuggestionUser<Us>[] = [];\n    response.members.forEach(\n      (member) => isUserResponse(member.user) && users.push(member.user),\n    );\n    if (onReady && users) {\n      onReady(users);\n    }\n  }\n};\nexport const queryMembersDebounced = debounce(queryMembers, 200, {\n  leading: false,\n  trailing: true,\n});\nexport const isMentionTrigger = (trigger: Trigger): trigger is '@' =>\n  trigger === '@';\n\nexport type Trigger = '/' | '@';\n\nexport type TriggerSettings<\n  Co extends string = DefaultCommandType,\n  Us extends UnknownType = DefaultUserType\n> = {\n  '/': {\n    component: string | React.ComponentType<Partial<CommandsItemProps<Co>>>;\n    dataProvider: (\n      query: SuggestionCommand<Co>['name'],\n      text: string,\n      onReady?: (\n        data: SuggestionCommand<Co>[],\n        q: SuggestionCommand<Co>['name'],\n      ) => void,\n    ) => SuggestionCommand<Co>[];\n    output: (\n      entity: SuggestionCommand<Co>,\n    ) => {\n      caretPosition: string;\n      key: string;\n      text: string;\n    };\n    title: string;\n  };\n  '@': {\n    callback: (item: SuggestionUser<Us>) => void;\n    component: string | React.ComponentType<Partial<MentionsItemProps<Us>>>;\n    dataProvider: (\n      query: SuggestionUser<Us>['name'],\n      _: string,\n      onReady?: (\n        data: SuggestionUser<Us>[],\n        q: SuggestionUser<Us>['name'],\n      ) => void,\n    ) => SuggestionUser<Us>[] | Promise<void> | void;\n    output: (\n      entity: SuggestionUser<Us>,\n    ) => {\n      caretPosition: string;\n      key: string;\n      text: string;\n    };\n    title: string;\n  };\n};\n\nexport type ACITriggerSettingsParams<\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType\n> = {\n  channel: Channel<At, Ch, Co, Ev, Me, Re, Us>;\n  onMentionSelectItem: (item: SuggestionUser<Us>) => void;\n  autocompleteSuggestionsLimit?: number;\n} & Pick<TranslationContextValue, 't'>;\n\n/**\n * ACI = AutoCompleteInput\n *\n * DataProvider accepts `onReady` function, which will execute once the data is ready.\n * Another approach would have been to simply return the data from dataProvider and let the\n * component await for it and then execute the required logic. We are going for callback instead\n * of async-await since we have debounce function in dataProvider. Which will delay the execution\n * of api call on trailing end of debounce (lets call it a1) but will return with result of\n * previous call without waiting for a1. So in this case, we want to execute onReady, when trailing\n * end of debounce executes.\n */\nexport const ACITriggerSettings = <\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType\n>({\n  channel,\n  onMentionSelectItem,\n  t = (msg: string) => msg,\n  autocompleteSuggestionsLimit = 10,\n}: ACITriggerSettingsParams<At, Ch, Co, Ev, Me, Re, Us>): TriggerSettings<\n  Co,\n  Us\n> => ({\n  '/': {\n    component: 'CommandsItem',\n    dataProvider: (query, text, onReady) => {\n      if (text.indexOf('/') !== 0) return [];\n\n      const selectedCommands = getCommands(channel).filter(\n        (command) => query && command.name?.indexOf(query) !== -1,\n      );\n\n      // sort alphabetically unless the you're matching the first char\n      selectedCommands.sort((a, b) => {\n        let nameA = a.name?.toLowerCase() || '';\n        let nameB = b.name?.toLowerCase() || '';\n        if (query && nameA.indexOf(query) === 0) {\n          nameA = `0${nameA}`;\n        }\n        if (query && nameB.indexOf(query) === 0) {\n          nameB = `0${nameB}`;\n        }\n        if (nameA < nameB) return -1;\n        if (nameA > nameB) return 1;\n\n        return 0;\n      });\n\n      const result = selectedCommands.slice(0, autocompleteSuggestionsLimit);\n\n      if (onReady) {\n        onReady(result, query);\n      }\n\n      return result;\n    },\n    output: (entity) => ({\n      caretPosition: 'next',\n      key: `${entity.name}`,\n      text: `/${entity.name}`,\n    }),\n    title: t('Commands'),\n  },\n  '@': {\n    callback: (item) => {\n      onMentionSelectItem(item);\n    },\n    component: 'MentionsItem',\n    dataProvider: (query, _, onReady) => {\n      const members = channel.state.members;\n\n      /**\n       * By default, we return maximum 100 members via queryChannels api call.\n       * Thus it is safe to assume, that if number of members in channel.state is < 100,\n       * then all the members are already available on client side and we don't need to\n       * make any api call to queryMembers endpoint.\n       */\n      if (!query || Object.values(members).length < 100) {\n        const users = getMembersAndWatchers(channel);\n\n        const matchingUsers = users.filter((user) => {\n          if (!query) return true;\n          if (user.name?.toLowerCase().indexOf(query.toLowerCase()) !== -1) {\n            return true;\n          }\n          if (user.id.toLowerCase().indexOf(query.toLowerCase()) !== -1) {\n            return true;\n          }\n          return false;\n        });\n\n        const data = matchingUsers.slice(0, autocompleteSuggestionsLimit);\n\n        if (onReady) {\n          onReady(data, query);\n        }\n\n        return data;\n      }\n      return (queryMembersDebounced as DebouncedFunc<\n        QueryMembersFunction<At, Ch, Co, Ev, Me, Re, Us>\n      >)(channel, query, (data) => {\n        if (onReady) {\n          onReady(data, query);\n        }\n      });\n    },\n    output: (entity) => ({\n      caretPosition: 'next',\n      key: entity.id,\n      text: `@${entity.name || entity.id}`,\n    }),\n    title: t('Searching for people'),\n  },\n});\n\nexport const MESSAGE_ACTIONS = {\n  delete: 'delete',\n  edit: 'edit',\n  reactions: 'reactions',\n  reply: 'reply',\n};\n\nexport const makeImageCompatibleUrl = (url: string) =>\n  (url.indexOf('//') === 0 ? `https:${url}` : url).trim();\n"]}