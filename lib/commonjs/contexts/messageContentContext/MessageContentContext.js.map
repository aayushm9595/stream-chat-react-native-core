{"version":3,"sources":["MessageContentContext.tsx"],"names":["MessageContentContext","React","createContext","MessageContentProvider","children","value","useMessageContentContext","withMessageContentContext","Component","WithMessageContentContextComponent","props","messageContentContext","displayName"],"mappings":";;;;;;;;;;;AAAA;;AAOA;;;;AAUO,IAAMA,qBAAqB,GAAGC,kBAAMC,aAAN,CACnC,EADmC,CAA9B;;;;AAIA,IAAMC,sBAAsB,GAAG,SAAzBA,sBAAyB;AAAA,MACpCC,QADoC,QACpCA,QADoC;AAAA,MAEpCC,KAFoC,QAEpCA,KAFoC;AAAA,SAMpC,gCAAC,qBAAD,CAAuB,QAAvB;AACE,IAAA,KAAK,EAAGA,KADV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGGD,QAHH,CANoC;AAAA,CAA/B;;;;AAaA,IAAME,wBAAwB,GAAG,SAA3BA,wBAA2B;AAAA,SACrC,uBAAWN,qBAAX,CADqC;AAAA,CAAjC;;;;AAQA,IAAMO,yBAAyB,GAAG,SAA5BA,yBAA4B,CACvCC,SADuC,EAEiB;AACxD,MAAMC,kCAAkC,GAAG,SAArCA,kCAAqC,CACzCC,KADyC,EAEtC;AACH,QAAMC,qBAAqB,GAAGL,wBAAwB,EAAtD;AAEA,WAAO,gCAAC,SAAD,gCAAgBI,KAAhB,EAAiCC,qBAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;AACD,GAND;;AAOAF,EAAAA,kCAAkC,CAACG,WAAnC,iCAA6E,oCAC3EJ,SAD2E,CAA7E;AAGA,SAAOC,kCAAP;AACD,CAdM","sourcesContent":["import React, { PropsWithChildren, useContext } from 'react';\n\nimport type {\n  GestureResponderEvent,\n  TouchableOpacityProps,\n} from 'react-native';\n\nimport { getDisplayName } from '../utils/getDisplayName';\n\nimport type { UnknownType } from '../../types/types';\n\nexport type MessageContentContextValue = {\n  onLongPress: (event: GestureResponderEvent) => void;\n  additionalTouchableProps?: Omit<TouchableOpacityProps, 'style'>;\n  disabled?: boolean;\n};\n\nexport const MessageContentContext = React.createContext(\n  {} as MessageContentContextValue,\n);\n\nexport const MessageContentProvider = ({\n  children,\n  value,\n}: PropsWithChildren<{\n  value: MessageContentContextValue;\n}>) => (\n  <MessageContentContext.Provider\n    value={(value as unknown) as MessageContentContextValue}\n  >\n    {children}\n  </MessageContentContext.Provider>\n);\n\nexport const useMessageContentContext = () =>\n  (useContext(MessageContentContext) as unknown) as MessageContentContextValue;\n\n/**\n * Typescript currently does not support partial inference so if MessageContentContext\n * typing is desired while using the HOC withMessageContentContextContext the Props for the\n * wrapped component must be provided as the first generic.\n */\nexport const withMessageContentContext = <P extends UnknownType>(\n  Component: React.ComponentType<P>,\n): React.FC<Omit<P, keyof MessageContentContextValue>> => {\n  const WithMessageContentContextComponent = (\n    props: Omit<P, keyof MessageContentContextValue>,\n  ) => {\n    const messageContentContext = useMessageContentContext();\n\n    return <Component {...(props as P)} {...messageContentContext} />;\n  };\n  WithMessageContentContextComponent.displayName = `WithMessageContentContext${getDisplayName(\n    Component,\n  )}`;\n  return WithMessageContentContextComponent;\n};\n"]}