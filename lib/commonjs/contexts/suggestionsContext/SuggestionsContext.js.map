{"version":3,"sources":["SuggestionsContext.tsx"],"names":["isSuggestionUser","suggestion","SuggestionsContext","React","createContext","SuggestionsProvider","children","value","componentType","setComponentType","suggestions","setSuggestions","suggestionsBackdropHeight","setSuggestionsBackdropHeight","suggestionsLeftMargin","setSuggestionsLeftMargin","suggestionsTitle","setSuggestionsTitle","suggestionsViewActive","setSuggestionsViewActive","suggestionsWidth","setSuggestionsWidth","messageInputBox","rootView","onKeyboardHidden","subscription","Keyboard","addListener","remove","openSuggestions","title","component","getInputBoxPosition","inputBoxPosition","y","x","width","updateSuggestions","newSuggestions","closeSuggestions","setInputBoxContainerRef","ref","current","Promise","resolve","nodeHandleRoot","measureLayout","height","suggestionsContext","useSuggestionsContext","withSuggestionsContext","Component","WithSuggestionsContextComponent","props","displayName"],"mappings":"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","sourcesContent":["import React, {\n  PropsWithChildren,\n  useContext,\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\nimport { findNodeHandle, Keyboard, View } from 'react-native';\n\nimport { SuggestionsList } from './SuggestionsList';\n\nimport { getDisplayName } from '../utils/getDisplayName';\n\nimport type { CommandResponse, UserResponse } from 'stream-chat';\n\nimport type {\n  DefaultCommandType,\n  DefaultUserType,\n  UnknownType,\n} from '../../types/types';\n\nexport type SuggestionComponentType<\n  Co extends string = DefaultCommandType,\n  Us extends UnknownType = DefaultUserType\n> = string | React.ReactElement<{ item: Suggestion<Co, Us> }>;\n\nexport const isSuggestionUser = <\n  Co extends string = DefaultCommandType,\n  Us extends UnknownType = DefaultUserType\n>(\n  suggestion: Suggestion<Co, Us>,\n): suggestion is SuggestionUser<Us> => 'id' in suggestion;\n\nexport type Suggestion<\n  Co extends string = DefaultCommandType,\n  Us extends UnknownType = DefaultUserType\n> = SuggestionCommand<Co> | SuggestionUser<Us>;\n\nexport type SuggestionCommand<\n  Co extends string = DefaultCommandType\n> = CommandResponse<Co>;\n\nexport type SuggestionUser<\n  Us extends UnknownType = DefaultUserType\n> = UserResponse<Us>;\n\nexport type Suggestions<\n  Co extends string = DefaultCommandType,\n  Us extends UnknownType = DefaultUserType\n> = {\n  data: Suggestion<Co, Us>[];\n  onSelect: (item: Suggestion<Co, Us>) => void;\n};\n\nexport type SuggestionsContextValue<\n  Co extends string = DefaultCommandType,\n  Us extends UnknownType = DefaultUserType\n> = {\n  closeSuggestions: () => void;\n  openSuggestions: (\n    title: string,\n    component: SuggestionComponentType<Co, Us>,\n  ) => Promise<void>;\n  setInputBoxContainerRef: (ref: View | null) => void;\n  updateSuggestions: (newSuggestions: Suggestions<Co, Us>) => void;\n};\n\nexport const SuggestionsContext = React.createContext(\n  {} as SuggestionsContextValue,\n);\n\ntype MeasureLayout = () => Promise<{\n  height: number;\n  width: number;\n  x: number;\n  y: number;\n}>;\n\n/**\n * This provider component exposes the properties stored within the SuggestionsContext.\n */\nexport const SuggestionsProvider = <\n  Co extends string = DefaultCommandType,\n  Us extends UnknownType = DefaultUserType\n>({\n  children,\n  value,\n}: PropsWithChildren<{ value?: Partial<SuggestionsContextValue<Co, Us>> }>) => {\n  const [componentType, setComponentType] = useState<\n    SuggestionComponentType<Co, Us>\n  >('');\n  const [suggestions, setSuggestions] = useState<Suggestions<Co, Us>>();\n  const [suggestionsBackdropHeight, setSuggestionsBackdropHeight] = useState(0);\n  const [suggestionsLeftMargin, setSuggestionsLeftMargin] = useState(0);\n  const [suggestionsTitle, setSuggestionsTitle] = useState('');\n  const [suggestionsViewActive, setSuggestionsViewActive] = useState(false);\n  const [suggestionsWidth, setSuggestionsWidth] = useState(0);\n\n  const messageInputBox = useRef<View | null>(null);\n  const rootView = useRef<View>(null);\n\n  // For the time being, we will just dismiss the suggestions view when keyboard is dismissed.\n  // TODO: Ideally SuggestionsView should update the position as per keyboard status (open/closed).\n  // Lets handle it after stream-chat-react-native@2.0.0 is published\n  useEffect(() => {\n    const onKeyboardHidden = () => {\n      setSuggestionsViewActive(false);\n    };\n\n    const subscription = Keyboard.addListener(\n      'keyboardDidHide',\n      onKeyboardHidden,\n    );\n\n    return () => {\n      subscription.remove();\n    };\n  }, []);\n\n  const openSuggestions = async (\n    title: string,\n    component: SuggestionComponentType<Co, Us>,\n  ) => {\n    const inputBoxPosition = await getInputBoxPosition();\n\n    setComponentType(component);\n    setSuggestionsBackdropHeight(inputBoxPosition.y);\n    setSuggestionsLeftMargin(inputBoxPosition.x);\n    setSuggestionsTitle(title);\n    setSuggestionsViewActive(true);\n    setSuggestionsWidth(inputBoxPosition.width);\n  };\n\n  const updateSuggestions = (newSuggestions: Suggestions<Co, Us>) => {\n    setSuggestions(newSuggestions);\n    setSuggestionsViewActive(!!componentType);\n  };\n\n  const closeSuggestions = () => {\n    setComponentType('');\n    setSuggestionsTitle('');\n    setSuggestionsViewActive(false);\n  };\n\n  const setInputBoxContainerRef = (ref: View) => {\n    messageInputBox.current = ref;\n  };\n\n  const getInputBoxPosition: MeasureLayout = () =>\n    new Promise((resolve) => {\n      const nodeHandleRoot = findNodeHandle(rootView.current) || 0;\n      messageInputBox?.current?.measureLayout(\n        nodeHandleRoot,\n        (x, y, width, height) => {\n          resolve({ height, width, x, y });\n        },\n        () => resolve({ height: 0, width: 0, x: 0, y: 0 }),\n      );\n    });\n\n  const suggestionsContext = {\n    closeSuggestions: value?.closeSuggestions || closeSuggestions,\n    openSuggestions: value?.openSuggestions || openSuggestions,\n    setInputBoxContainerRef:\n      value?.setInputBoxContainerRef || setInputBoxContainerRef,\n    updateSuggestions: value?.updateSuggestions || updateSuggestions,\n  };\n\n  return (\n    <SuggestionsContext.Provider\n      value={(suggestionsContext as unknown) as SuggestionsContextValue}\n    >\n      {/** TODO: Support dynamic item view for different type of suggestions */}\n      {suggestions && (\n        <SuggestionsList<Co, Us>\n          active={suggestionsViewActive}\n          backdropHeight={suggestionsBackdropHeight}\n          componentType={componentType}\n          handleDismiss={() => setSuggestionsViewActive(false)}\n          marginLeft={suggestionsLeftMargin}\n          suggestions={suggestions}\n          suggestionsTitle={suggestionsTitle}\n          width={suggestionsWidth}\n        />\n      )}\n      <View collapsable={false} ref={rootView} style={{ height: '100%' }}>\n        {children}\n      </View>\n    </SuggestionsContext.Provider>\n  );\n};\n\nexport const useSuggestionsContext = <\n  Co extends string = DefaultCommandType,\n  Us extends UnknownType = DefaultUserType\n>() =>\n  (useContext(SuggestionsContext) as unknown) as SuggestionsContextValue<\n    Co,\n    Us\n  >;\n\nexport const withSuggestionsContext = <\n  P extends UnknownType,\n  Co extends string = DefaultCommandType,\n  Us extends UnknownType = DefaultUserType\n>(\n  Component: React.ComponentType<P>,\n): React.FC<Omit<P, keyof SuggestionsContextValue<Co, Us>>> => {\n  const WithSuggestionsContextComponent = (\n    props: Omit<P, keyof SuggestionsContextValue<Co, Us>>,\n  ) => {\n    const suggestionsContext = useSuggestionsContext<Co, Us>();\n\n    return <Component {...(props as P)} {...suggestionsContext} />;\n  };\n  WithSuggestionsContextComponent.displayName = `WithSuggestionsContext${getDisplayName(\n    Component,\n  )}`;\n  return WithSuggestionsContextComponent;\n};\n"]}