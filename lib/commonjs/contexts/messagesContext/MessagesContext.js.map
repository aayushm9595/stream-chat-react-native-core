{"version":3,"sources":["MessagesContext.tsx"],"names":["isEditingBoolean","editing","MessagesContext","React","createContext","MessagesProvider","children","value","useMessagesContext","withMessagesContext","Component","WithMessagesContextComponent","props","messagesContext","displayName"],"mappings":";;;;;;;;;;;AAAA;;AAEA;;;;AA2CO,IAAMA,gBAAgB,GAAG,SAAnBA,gBAAmB,CAS9BC,OAT8B;AAAA,SAUP,OAAOA,OAAP,KAAmB,SAVZ;AAAA,CAAzB;;;;AA+DA,IAAMC,eAAe,GAAGC,kBAAMC,aAAN,CAAoB,EAApB,CAAxB;;;;AAEA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB;AAAA,MAS9BC,QAT8B,QAS9BA,QAT8B;AAAA,MAU9BC,KAV8B,QAU9BA,KAV8B;AAAA,SAc9B,gCAAC,eAAD,CAAiB,QAAjB;AAA0B,IAAA,KAAK,EAAGA,KAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,QADH,CAd8B;AAAA,CAAzB;;;;AAmBA,IAAME,kBAAkB,GAAG,SAArBA,kBAAqB;AAAA,SAS/B,uBAAWN,eAAX,CAT+B;AAAA,CAA3B;;;;AAwBA,IAAMO,mBAAmB,GAAG,SAAtBA,mBAAsB,CAUjCC,SAViC,EAa9B;AACH,MAAMC,4BAA4B,GAAG,SAA/BA,4BAA+B,CACnCC,KADmC,EAEhC;AACH,QAAMC,eAAe,GAAGL,kBAAkB,EAA1C;AAEA,WAAO,gCAAC,SAAD,gCAAgBI,KAAhB,EAAiCC,eAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;AACD,GAND;;AAOAF,EAAAA,4BAA4B,CAACG,WAA7B,2BAAiE,oCAC/DJ,SAD+D,CAAjE;AAGA,SAAOC,4BAAP;AACD,CAzBM","sourcesContent":["import React, { PropsWithChildren, useContext } from 'react';\n\nimport { getDisplayName } from '../utils/getDisplayName';\n\nimport type { DebouncedFunc } from 'lodash';\nimport type {\n  ChannelState,\n  MessageResponse,\n  StreamChat,\n  Message as StreamMessage,\n  UpdatedMessage,\n  UserResponse,\n} from 'stream-chat';\n\nimport type { SuggestionCommand } from '../suggestionsContext/SuggestionsContext';\nimport type { AttachmentProps } from '../../components/Attachment/Attachment';\nimport type { MessageSimpleProps } from '../../components/Message/MessageSimple/MessageSimple';\nimport type { Message } from '../../components/MessageList/utils/insertDates';\nimport type {\n  DefaultAttachmentType,\n  DefaultChannelType,\n  DefaultCommandType,\n  DefaultEventType,\n  DefaultMessageType,\n  DefaultReactionType,\n  DefaultUserType,\n  UnknownType,\n} from '../../types/types';\n\nexport type Alignment = 'right' | 'left';\n\nexport type GroupType = 'bottom' | 'middle' | 'single' | 'top';\n\nexport type MessageWithDates<\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType\n> = MessageResponse<At, Ch, Co, Me, Re, Us> & {\n  groupStyles: GroupType[];\n  readBy: UserResponse<Us>[];\n};\n\nexport const isEditingBoolean = <\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType\n>(\n  editing: MessagesContextValue<At, Ch, Co, Ev, Me, Re, Us>['editing'],\n): editing is boolean => typeof editing === 'boolean';\n\nexport type MessagesContextValue<\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType\n> = {\n  clearEditingState: () => void;\n  editing: boolean | Message<At, Ch, Co, Ev, Me, Re, Us>;\n  editMessage: (\n    updatedMessage: UpdatedMessage<At, Ch, Co, Me, Re, Us>,\n  ) => ReturnType<StreamChat<At, Ch, Co, Ev, Me, Re, Us>['updateMessage']>;\n  emojiData: Array<{\n    icon: string;\n    id: string;\n  }>;\n  hasMore: boolean;\n  loadingMore: boolean;\n  loadMore: DebouncedFunc<() => Promise<void>>;\n  messages: ChannelState<At, Ch, Co, Ev, Me, Re, Us>['messages'];\n  removeMessage: (message: {\n    id: string;\n    parent_id?: StreamMessage<At, Me, Us>['parent_id'];\n  }) => void;\n  retrySendMessage: (\n    message: MessageResponse<At, Ch, Co, Me, Re, Us>,\n  ) => Promise<void>;\n  sendMessage: (message: Partial<StreamMessage<At, Me, Us>>) => Promise<void>;\n  setEditingState: (message: Message<At, Ch, Co, Ev, Me, Re, Us>) => void;\n  updateMessage: (\n    updatedMessage: MessageResponse<At, Ch, Co, Me, Re, Us>,\n    extraState?: {\n      commands?: SuggestionCommand<Co>[];\n      messageInput?: string;\n      threadMessages?: ChannelState<\n        At,\n        Ch,\n        Co,\n        Ev,\n        Me,\n        Re,\n        Us\n      >['threads'][string];\n    },\n  ) => void;\n  Attachment?: React.ComponentType<AttachmentProps<At>>;\n  Message?: React.ComponentType<MessageSimpleProps<At, Ch, Co, Ev, Me, Re, Us>>;\n};\n\nexport const MessagesContext = React.createContext({} as MessagesContextValue);\n\nexport const MessagesProvider = <\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType\n>({\n  children,\n  value,\n}: PropsWithChildren<{\n  value: MessagesContextValue<At, Ch, Co, Ev, Me, Re, Us>;\n}>) => (\n  <MessagesContext.Provider value={(value as unknown) as MessagesContextValue}>\n    {children}\n  </MessagesContext.Provider>\n);\n\nexport const useMessagesContext = <\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType\n>() =>\n  (useContext(MessagesContext) as unknown) as MessagesContextValue<\n    At,\n    Ch,\n    Co,\n    Ev,\n    Me,\n    Re,\n    Us\n  >;\n\n/**\n * Typescript currently does not support partial inference so if ChatContext\n * typing is desired while using the HOC withChannelContext the Props for the\n * wrapped component must be provided as the first generic.\n */\nexport const withMessagesContext = <\n  P extends UnknownType,\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType\n>(\n  Component: React.ComponentType<P>,\n): React.FC<\n  Omit<P, keyof MessagesContextValue<At, Ch, Co, Ev, Me, Re, Us>>\n> => {\n  const WithMessagesContextComponent = (\n    props: Omit<P, keyof MessagesContextValue<At, Ch, Co, Ev, Me, Re, Us>>,\n  ) => {\n    const messagesContext = useMessagesContext<At, Ch, Co, Ev, Me, Re, Us>();\n\n    return <Component {...(props as P)} {...messagesContext} />;\n  };\n  WithMessagesContextComponent.displayName = `WithMessagesContext${getDisplayName(\n    Component,\n  )}`;\n  return WithMessagesContextComponent;\n};\n"]}