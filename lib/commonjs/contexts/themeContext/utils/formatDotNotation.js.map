{"version":3,"sources":["formatDotNotation.ts"],"names":["formatDotNotation","formattedStyle","modifiedTheme","themeDiff","k","Error"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AAWO,IAAMA,iBAAiB,GAAG,SAApBA,iBAAoB,OAGF;AAAA,MAF7BC,cAE6B,QAF7BA,cAE6B;AAAA,MAD7BC,aAC6B,QAD7BA,aAC6B;;AAC7B,MAAI,+BAAcD,cAAd,CAAJ,EAAmC;AACjC,QAAME,SAAS,GAAG,EAAlB;;AACA,SAAK,IAAMC,CAAX,IAAgBH,cAAhB,EAA6C;AAC3C,UAAI,qBAAUC,aAAV,EAAyBE,CAAzB,CAAJ,EAAiC;AAC/B,+BAAMD,SAAN,EAAiB,qBAAU,EAAV,EAAcC,CAAd,EAAkBH,cAAD,CAA8BG,CAA9B,CAAjB,CAAjB;AACD,OAFD,MAEO;AACL,cAAMC,KAAK,wBAAsBD,CAAtB,CAAX;AACD;AACF;;AACD,WAAOD,SAAP;AACD;;AACD,SAAOD,aAAP;AACD,CAhBM","sourcesContent":["import lodashGet from 'lodash/get';\nimport isPlainObject from 'lodash/isPlainObject';\nimport merge from 'lodash/merge';\nimport lodashSet from 'lodash/set';\n\nimport type { ThemeType } from './replaceCssShorthand';\n\nimport type { Theme } from '../../../styles/themeConstants';\n\nexport type FormatDotNotationParams = {\n  formattedStyle: string | number | boolean | ThemeType;\n  modifiedTheme: Theme;\n};\n\nexport const formatDotNotation = ({\n  formattedStyle,\n  modifiedTheme,\n}: FormatDotNotationParams) => {\n  if (isPlainObject(formattedStyle)) {\n    const themeDiff = {};\n    for (const k in formattedStyle as ThemeType) {\n      if (lodashGet(modifiedTheme, k)) {\n        merge(themeDiff, lodashSet({}, k, (formattedStyle as ThemeType)[k]));\n      } else {\n        throw Error(`Unknown theme key ${k}`);\n      }\n    }\n    return themeDiff;\n  }\n  return modifiedTheme;\n};\n"]}