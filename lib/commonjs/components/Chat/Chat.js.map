{"version":3,"sources":["Chat.tsx"],"names":["Chat","props","children","client","i18nInstance","logger","style","channel","setChannel","t","key","tDateTimeParser","input","translators","setTranslators","connectionRecovering","isOnline","setUserAgent","Platform","OS","version","recoverStateOnReconnect","setActiveChannel","newChannel","chatContext"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AACA;;AAEA;;AACA;;AAEA;;AACA;;AACA;;AAKA;;;;AA4GO,IAAMA,IAAI,GAAG,SAAPA,IAAO,CASlBC,KATkB,EAUf;AAAA,MACKC,QADL,GACoED,KADpE,CACKC,QADL;AAAA,MACeC,MADf,GACoEF,KADpE,CACeE,MADf;AAAA,MACuBC,YADvB,GACoEH,KADpE,CACuBG,YADvB;AAAA,sBACoEH,KADpE,CACqCI,MADrC;AAAA,MACqCA,MADrC,8BAC8C;AAAA,WAAM,IAAN;AAAA,GAD9C;AAAA,MAC0DC,KAD1D,GACoEL,KADpE,CAC0DK,KAD1D;;AAAA,kBAG2B,sBAH3B;AAAA;AAAA,MAGIC,OAHJ;AAAA,MAGaC,UAHb;;AAAA,mBAImC,qBAAkC;AACtEC,IAAAA,CAAC,EAAE,WAACC,GAAD;AAAA,aAAiBA,GAAjB;AAAA,KADmE;AAEtEC,IAAAA,eAAe,EAAE,yBAACC,KAAD;AAAA,aAAoC,uBAAMA,KAAN,CAApC;AAAA;AAFqD,GAAlC,CAJnC;AAAA;AAAA,MAIIC,WAJJ;AAAA,MAIiBC,cAJjB;;AAUH,oCAAc;AAAEV,IAAAA,YAAY,EAAZA,YAAF;AAAgBU,IAAAA,cAAc,EAAdA;AAAhB,GAAd;;AAVG,qBAawC,+BAQzCX,MARyC,CAbxC;AAAA,MAaKY,oBAbL,gBAaKA,oBAbL;AAAA,MAa2BC,QAb3B,gBAa2BA,QAb3B;;AAuBH,wBAAU,YAAM;AACdb,IAAAA,MAAM,QAAN,YAAAA,MAAM,CAAEc,YAAR,+BAAiDC,sBAASC,EAA1D,SAAgEC,gBAAhE;AACAjB,IAAAA,MAAM,CAACkB,uBAAP,GAAiC,KAAjC;AACD,GAHD,EAGG,EAHH;;AAKA,MAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,UAAD;AAAA,WACvBf,UAAU,CAACe,UAAD,CADa;AAAA,GAAzB;;AAGA,MAAI,CAACV,WAAW,CAACJ,CAAjB,EAAoB,OAAO,IAAP;AAEpB,MAAMe,WAAW,GAAG;AAClBjB,IAAAA,OAAO,EAAPA,OADkB;AAElBJ,IAAAA,MAAM,EAANA,MAFkB;AAGlBY,IAAAA,oBAAoB,EAApBA,oBAHkB;AAIlBC,IAAAA,QAAQ,EAARA,QAJkB;AAKlBX,IAAAA,MAAM,EAANA,MALkB;AAMlBiB,IAAAA,gBAAgB,EAAhBA;AANkB,GAApB;AASA,SACE,gCAAC,yBAAD;AAA0C,IAAA,KAAK,EAAEE,WAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,gCAAC,uCAAD;AAAqB,IAAA,KAAK,EAAEX,WAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,gCAAC,2BAAD;AAAe,IAAA,KAAK,EAAEP,KAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA8BJ,QAA9B,CADF,CADF,CADF;AAOD,CA3DM","sourcesContent":["import React, { PropsWithChildren, useEffect, useState } from 'react';\nimport { Platform } from 'react-native';\nimport Dayjs from 'dayjs';\n\nimport { useIsOnline } from './hooks/useIsOnline';\nimport { useStreami18n } from './hooks/useStreami18n';\n\nimport { ChatProvider } from '../../contexts/chatContext/ChatContext';\nimport { ThemeProvider } from '../../contexts/themeContext/ThemeContext';\nimport {\n  TranslationContextValue,\n  TranslationProvider,\n} from '../../contexts/translationContext/TranslationContext';\n\nimport { version } from '../../../package.json';\n\nimport type { Channel, StreamChat } from 'stream-chat';\n\nimport type { ThemeType } from '../../contexts/themeContext/utils/replaceCssShorthand';\nimport type { Streami18n } from '../../utils/Streami18n';\nimport type {\n  DefaultAttachmentType,\n  DefaultChannelType,\n  DefaultCommandType,\n  DefaultEventType,\n  DefaultMessageType,\n  DefaultReactionType,\n  DefaultUserType,\n  UnknownType,\n} from '../../types/types';\n\nexport type ChatProps<\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType\n> = {\n  /** The StreamChat client object */\n  client: StreamChat<At, Ch, Co, Ev, Me, Re, Us>;\n  /**\n   * Instance of Streami18n class should be provided to Chat component to enable internationalization.\n   *\n   * Stream provides following list of in-built translations:\n   * 1. English (en)\n   * 2. Dutch (nl)\n   * 3. ...\n   * 4. ...\n   *\n   * Simplest way to start using chat components in one of the in-built languages would be following:\n   *\n   * ```\n   * const i18n = new Streami18n('nl');\n   * <Chat client={chatClient} i18nInstance={i18n}>\n   *  ...\n   * </Chat>\n   * ```\n   *\n   * If you would like to override certain keys in in-built translation.\n   * UI will be automatically updated in this case.\n   *\n   * ```\n   * const i18n = new Streami18n('nl');\n   *\n   * i18n.registerTranslation('nl', {\n   *  'Nothing yet...': 'Nog Niet ...',\n   *  '{{ firstUser }} and {{ secondUser }} are typing...': '{{ firstUser }} en {{ secondUser }} zijn aan het typen...',\n   * });\n   *\n   * <Chat client={chatClient} i18nInstance={i18n}>\n   *  ...\n   * </Chat>\n   * ```\n   *\n   * You can use the same function to add whole new language.\n   *\n   * ```\n   * const i18n = new Streami18n('it');\n   *\n   * i18n.registerTranslation('it', {\n   *  'Nothing yet...': 'Non ancora ...',\n   *  '{{ firstUser }} and {{ secondUser }} are typing...': '{{ firstUser }} a {{ secondUser }} stanno scrivendo...',\n   * });\n   *\n   * // Make sure to call setLanguage to reflect new language in UI.\n   * i18n.setLanguage('it');\n   * <Chat client={chatClient} i18nInstance={i18n}>\n   *  ...\n   * </Chat>\n   * ```\n   */\n  i18nInstance?: Streami18n;\n  logger?: (message?: string) => void;\n  style?: ThemeType;\n};\n\n/**\n * Chat - Wrapper component for Chat. The needs to be placed around any other chat components.\n * This Chat component provides the ChatContext to all other components.\n *\n * The ChatContext provides the following props:\n *\n * - channel - currently active channel\n * - client - client connection\n * - connectionRecovering - whether or not websocket is reconnecting\n * - isOnline - whether or not set user is active\n * - logger - custom logging function\n * - setActiveChannel - function to set the currently active channel\n *\n * The Chat Component takes the following generics in order:\n * - At (AttachmentType) - custom Attachment object extension\n * - Ct (ChannelType) - custom Channel object extension\n * - Co (CommandType) - custom Command string union extension\n * - Ev (EventType) - custom Event object extension\n * - Me (MessageType) - custom Message object extension\n * - Re (ReactionType) - custom Reaction object extension\n * - Us (UserType) - custom User object extension\n *\n * @example ./Chat.md\n */\nexport const Chat = <\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType\n>(\n  props: PropsWithChildren<ChatProps<At, Ch, Co, Ev, Me, Re, Us>>,\n) => {\n  const { children, client, i18nInstance, logger = () => null, style } = props;\n\n  const [channel, setChannel] = useState<Channel<At, Ch, Co, Ev, Me, Re, Us>>();\n  const [translators, setTranslators] = useState<TranslationContextValue>({\n    t: (key: string) => key,\n    tDateTimeParser: (input?: string | number | Date) => Dayjs(input),\n  });\n\n  // Setup translators\n  useStreami18n({ i18nInstance, setTranslators });\n\n  // Setup connection event listeners\n  const { connectionRecovering, isOnline } = useIsOnline<\n    At,\n    Ch,\n    Co,\n    Ev,\n    Me,\n    Re,\n    Us\n  >(client);\n\n  useEffect(() => {\n    client?.setUserAgent(`stream-chat-react-native-${Platform.OS}-${version}`);\n    client.recoverStateOnReconnect = false;\n  }, []);\n\n  const setActiveChannel = (newChannel?: Channel<At, Ch, Co, Ev, Me, Re, Us>) =>\n    setChannel(newChannel);\n\n  if (!translators.t) return null;\n\n  const chatContext = {\n    channel,\n    client,\n    connectionRecovering,\n    isOnline,\n    logger,\n    setActiveChannel,\n  };\n\n  return (\n    <ChatProvider<At, Ch, Co, Ev, Me, Re, Us> value={chatContext}>\n      <TranslationProvider value={translators}>\n        <ThemeProvider style={style}>{children}</ThemeProvider>\n      </TranslationProvider>\n    </ChatProvider>\n  );\n};\n"]}