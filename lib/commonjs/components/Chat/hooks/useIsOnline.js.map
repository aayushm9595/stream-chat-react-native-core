{"version":3,"sources":["useIsOnline.ts"],"names":["useIsOnline","client","unsubscribeNetInfo","setUnsubscribeNetInfo","isOnline","setIsOnline","connectionRecovering","setConnectionRecovering","handleChangedEvent","event","online","handleRecoveredEvent","notifyChatClient","netInfoState","wsConnection","onlineStatusChanged","type","setConnectionListener","NetInfo","fetch","then","addEventListener","on","off"],"mappings":";;;;;;;;;AAAA;;AAEA;;AAgBO,IAAMA,WAAW,GAAG,SAAdA,WAAc,CASzBC,MATyB,EAUtB;AAAA,kBACiD,sBADjD;AAAA;AAAA,MACIC,kBADJ;AAAA,MACwBC,qBADxB;;AAAA,mBAI6B,qBAAS,IAAT,CAJ7B;AAAA;AAAA,MAIIC,QAJJ;AAAA,MAIcC,WAJd;;AAAA,mBAKqD,qBAAS,KAAT,CALrD;AAAA;AAAA,MAKIC,oBALJ;AAAA,MAK0BC,uBAL1B;;AAOH,wBAAU,YAAM;AACd,QAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CACzBC,KADyB,EAEtB;AACHF,MAAAA,uBAAuB,CAAC,CAACE,KAAK,CAACC,MAAR,CAAvB;AACAL,MAAAA,WAAW,CAACI,KAAK,CAACC,MAAN,IAAgB,KAAjB,CAAX;AACD,KALD;;AAOA,QAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB;AAAA,aAAMJ,uBAAuB,CAAC,KAAD,CAA7B;AAAA,KAA7B;;AAEA,QAAMK,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,YAAD,EAA2B;AAClD,UAAIZ,MAAJ,oBAAIA,MAAM,CAAEa,YAAZ,EAA0B;AACxB,YAAID,YAAJ,EAAkB;AAChBZ,UAAAA,MAAM,CAACa,YAAP,CAAoBC,mBAApB,CAAwC;AACtCC,YAAAA,IAAI,EAAE;AADgC,WAAxC;AAGD,SAJD,MAIO;AACLf,UAAAA,MAAM,CAACa,YAAP,CAAoBC,mBAApB,CAAwC;AACtCC,YAAAA,IAAI,EAAE;AADgC,WAAxC;AAGD;AACF;AACF,KAZD;;AAcA,QAAMC,qBAAqB,GAAG,SAAxBA,qBAAwB,GAAM;AAClCC,sBAAQC,KAAR,GAAgBC,IAAhB,CAAqB,UAACP,YAAD,EAAkB;AACrCD,QAAAA,gBAAgB,CAACC,YAAD,CAAhB;AACD,OAFD;;AAGAV,MAAAA,qBAAqB,CACnBe,gBAAQG,gBAAR,CAAyB,UAACR,YAAD,EAAkB;AACzCD,QAAAA,gBAAgB,CAACC,YAAD,CAAhB;AACD,OAFD,CADmB,CAArB;AAKD,KATD;;AAWA,QAAIZ,MAAJ,EAAY;AACVA,MAAAA,MAAM,CAACqB,EAAP,CAAU,oBAAV,EAAgCd,kBAAhC;AACAP,MAAAA,MAAM,CAACqB,EAAP,CAAU,sBAAV,EAAkCX,oBAAlC;AACAM,MAAAA,qBAAqB;AACtB;;AAED,WAAO,YAAM;AACXhB,MAAAA,MAAM,CAACsB,GAAP,CAAW,oBAAX,EAAiCf,kBAAjC;AACAP,MAAAA,MAAM,CAACsB,GAAP,CAAW,sBAAX,EAAmCZ,oBAAnC;;AACA,UAAIT,kBAAJ,EAAwB;AACtBA,QAAAA,kBAAkB;AACnB;AACF,KAND;AAOD,GAhDD,EAgDG,CAACD,MAAD,CAhDH;AAkDA,SAAO;AAAEK,IAAAA,oBAAoB,EAApBA,oBAAF;AAAwBF,IAAAA,QAAQ,EAARA;AAAxB,GAAP;AACD,CApEM","sourcesContent":["import { useEffect, useState } from 'react';\n\nimport { NetInfo } from '../../../native';\n\nimport type { NetInfoSubscription } from '@react-native-community/netinfo';\nimport type { StreamChat, Event as StreamEvent } from 'stream-chat';\n\nimport type {\n  DefaultAttachmentType,\n  DefaultChannelType,\n  DefaultCommandType,\n  DefaultEventType,\n  DefaultMessageType,\n  DefaultReactionType,\n  DefaultUserType,\n  UnknownType,\n} from '../../../types/types';\n\nexport const useIsOnline = <\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType\n>(\n  client: StreamChat<At, Ch, Co, Ev, Me, Re, Us>,\n) => {\n  const [unsubscribeNetInfo, setUnsubscribeNetInfo] = useState<\n    NetInfoSubscription\n  >();\n  const [isOnline, setIsOnline] = useState(true);\n  const [connectionRecovering, setConnectionRecovering] = useState(false);\n\n  useEffect(() => {\n    const handleChangedEvent = (\n      event: StreamEvent<At, Ch, Co, Ev, Me, Re, Us>,\n    ) => {\n      setConnectionRecovering(!event.online);\n      setIsOnline(event.online || false);\n    };\n\n    const handleRecoveredEvent = () => setConnectionRecovering(false);\n\n    const notifyChatClient = (netInfoState: boolean) => {\n      if (client?.wsConnection) {\n        if (netInfoState) {\n          client.wsConnection.onlineStatusChanged({\n            type: 'online',\n          } as Event);\n        } else {\n          client.wsConnection.onlineStatusChanged({\n            type: 'offline',\n          } as Event);\n        }\n      }\n    };\n\n    const setConnectionListener = () => {\n      NetInfo.fetch().then((netInfoState) => {\n        notifyChatClient(netInfoState);\n      });\n      setUnsubscribeNetInfo(\n        NetInfo.addEventListener((netInfoState) => {\n          notifyChatClient(netInfoState);\n        }),\n      );\n    };\n\n    if (client) {\n      client.on('connection.changed', handleChangedEvent);\n      client.on('connection.recovered', handleRecoveredEvent);\n      setConnectionListener();\n    }\n\n    return () => {\n      client.off('connection.changed', handleChangedEvent);\n      client.off('connection.recovered', handleRecoveredEvent);\n      if (unsubscribeNetInfo) {\n        unsubscribeNetInfo();\n      }\n    };\n  }, [client]);\n\n  return { connectionRecovering, isOnline };\n};\n"]}