{"version":3,"sources":["LoadingIndicator.tsx"],"names":["Container","styled","View","theme","loadingIndicator","container","css","LoadingText","Text","loadingText","LoadingIndicatorWrapper","text","LoadingIndicator","props","listType","t"],"mappings":";;;;;;;;;AAAA;;AAEA;;AAEA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,SAAS,GAAGC,yBAAOC,IAAV,oBAIX;AAAA,MAAGC,KAAH,QAAGA,KAAH;AAAA,SAAeA,KAAK,CAACC,gBAAN,CAAuBC,SAAvB,CAAiCC,GAAhD;AAAA,CAJW,CAAf;;AAMA,IAAMC,WAAW,GAAGN,yBAAOO,IAAV,qBAIb;AAAA,MAAGL,KAAH,SAAGA,KAAH;AAAA,SAAeA,KAAK,CAACC,gBAAN,CAAuBK,WAAvB,CAAmCH,GAAlD;AAAA,CAJa,CAAjB;;AAOA,IAAMI,uBAAmD,GAAG,SAAtDA,uBAAsD;AAAA,MAAGC,IAAH,SAAGA,IAAH;AAAA,SAC1D,gCAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,gCAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,gCAAC,WAAD;AAAa,IAAA,MAAM,EAAC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA+BA,IAA/B,CAFF,CAD0D;AAAA,CAA5D;;AAiBO,IAAMC,gBAAwC,GAAG,SAA3CA,gBAA2C,CAACC,KAAD,EAAW;AAAA,MACzDC,QADyD,GAC/BD,KAD+B,CACzDC,QADyD;AAAA,MAC/CL,WAD+C,GAC/BI,KAD+B,CAC/CJ,WAD+C;;AAAA,8BAGnD,gDAHmD;AAAA,MAGzDM,CAHyD,yBAGzDA,CAHyD;;AAKjE,MAAIN,WAAJ,EAAiB;AACf,WAAO,gCAAC,uBAAD;AAAyB,MAAA,IAAI,EAAEA,WAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AAED,UAAQK,QAAR;AACE,SAAK,SAAL;AACE,aAAO,gCAAC,uBAAD;AAAyB,QAAA,IAAI,EAAEC,CAAC,CAAC,sBAAD,CAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;;AACF,SAAK,SAAL;AACE,aAAO,gCAAC,uBAAD;AAAyB,QAAA,IAAI,EAAEA,CAAC,CAAC,sBAAD,CAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;;AACF;AACE,aAAO,gCAAC,uBAAD;AAAyB,QAAA,IAAI,EAAEA,CAAC,CAAC,aAAD,CAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AANJ;AAQD,CAjBM","sourcesContent":["import React from 'react';\n\nimport { Spinner } from '../Spinner/Spinner';\n\nimport { useTranslationContext } from '../../contexts/translationContext/TranslationContext';\nimport { styled } from '../../styles/styledComponents';\n\nconst Container = styled.View`\n  align-items: center;\n  height: 100%;\n  justify-content: center;\n  ${({ theme }) => theme.loadingIndicator.container.css};\n`;\nconst LoadingText = styled.Text`\n  font-size: 14px;\n  font-weight: 600;\n  margin-top: 20px;\n  ${({ theme }) => theme.loadingIndicator.loadingText.css};\n`;\n\nconst LoadingIndicatorWrapper: React.FC<{ text: string }> = ({ text }) => (\n  <Container>\n    <Spinner />\n    <LoadingText testID='loading'>{text}</LoadingText>\n  </Container>\n);\n\nexport type LoadingProps = {\n  listType?: 'channel' | 'message' | 'default';\n  loadingText?: string;\n};\n\n/**\n * UI Component for LoadingIndicator\n *\n * @example ./LoadingIndicator.md\n */\nexport const LoadingIndicator: React.FC<LoadingProps> = (props) => {\n  const { listType, loadingText } = props;\n\n  const { t } = useTranslationContext();\n\n  if (loadingText) {\n    return <LoadingIndicatorWrapper text={loadingText} />;\n  }\n\n  switch (listType) {\n    case 'channel':\n      return <LoadingIndicatorWrapper text={t('Loading channels ...')} />;\n    case 'message':\n      return <LoadingIndicatorWrapper text={t('Loading messages ...')} />;\n    default:\n      return <LoadingIndicatorWrapper text={t('Loading ...')} />;\n  }\n};\n"]}