{"version":3,"sources":["renderText.tsx"],"names":["defaultMarkdownStyles","inlineCode","backgroundColor","borderColor","color","fontSize","padding","paddingHorizontal","link","textDecorationLine","url","renderText","params","markdownRules","markdownStyles","message","mentioned_users","text","newText","trim","urls","list","urlInfo","displayLink","encoded","replace","length","omission","markdown","protocol","raw","i","username","name","id","regEx","RegExp","styles"],"mappings":";;;;;;;;;AAAA;;AAEA;;AACA;;AACA;;;;;;;;;;;;;;AAeA,IAAMA,qBAAqB,GAAG;AAC5BC,EAAAA,UAAU,EAAE;AACVC,IAAAA,eAAe,EAAE,SADP;AAEVC,IAAAA,WAAW,EAAE,SAFH;AAGVC,IAAAA,KAAK,EAAE,KAHG;AAIVC,IAAAA,QAAQ,EAAE,EAJA;AAKVC,IAAAA,OAAO,EAAE,CALC;AAMVC,IAAAA,iBAAiB,EAAE;AANT,GADgB;AAS5BC,EAAAA,IAAI,EAAE;AACJJ,IAAAA,KAAK,EAAE,MADH;AAEJK,IAAAA,kBAAkB,EAAE;AAFhB,GATsB;AAa5BC,EAAAA,GAAG,EAAE;AACHN,IAAAA,KAAK,EAAE,MADJ;AAEHK,IAAAA,kBAAkB,EAAE;AAFjB;AAbuB,CAA9B;;AAiCO,IAAME,UAAU,GAAG,SAAbA,UAAa,CASxBC,MATwB,EAUrB;AAAA,MACKC,aADL,GACgDD,MADhD,CACKC,aADL;AAAA,MACoBC,cADpB,GACgDF,MADhD,CACoBE,cADpB;AAAA,MACoCC,OADpC,GACgDH,MADhD,CACoCG,OADpC;AAAA,8BAKoCA,OALpC,CAKKC,eALL;AAAA,MAKKA,eALL,sCAKuB,EALvB;AAAA,MAK2BC,IAL3B,GAKoCF,OALpC,CAK2BE,IAL3B;AAOH,MAAI,CAACA,IAAL,EAAW,OAAO,IAAP;AAEX,MAAIC,OAAO,GAAGD,IAAI,CAACE,IAAL,EAAd;AACA,MAAMC,IAAI,GAAG,0BAASF,OAAT,EAAkB;AAC7BG,IAAAA,IAAI,EAAE;AADuB,GAAlB,CAAb;;AAIA,uDAAsBD,IAAtB,wCAA4B;AAAA,QAAjBE,OAAiB;AAC1B,QAAMC,WAAW,GAAG,0BAASD,OAAO,CAACE,OAAR,CAAgBC,OAAhB,CAAwB,UAAxB,EAAoC,EAApC,CAAT,EAAkD;AACpEC,MAAAA,MAAM,EAAE,GAD4D;AAEpEC,MAAAA,QAAQ,EAAE;AAF0D,KAAlD,CAApB;AAIA,QAAMC,QAAQ,SAAOL,WAAP,UAAuBD,OAAO,CAACO,QAA/B,GAA0CP,OAAO,CAACE,OAAlD,MAAd;AACAN,IAAAA,OAAO,GAAGA,OAAO,CAACO,OAAR,CAAgBH,OAAO,CAACQ,GAAxB,EAA6BF,QAA7B,CAAV;AACD;;AAED,MAAIZ,eAAe,CAACU,MAApB,EAA4B;AAC1B,SAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGf,eAAe,CAACU,MAApC,EAA4CK,CAAC,EAA7C,EAAiD;AAC/C,UAAMC,QAAQ,GAAGhB,eAAe,CAACe,CAAD,CAAf,CAAmBE,IAAnB,IAA2BjB,eAAe,CAACe,CAAD,CAAf,CAAmBG,EAA/D;;AACA,UAAMN,SAAQ,WAASI,QAAT,OAAd;;AACA,UAAMG,KAAK,GAAG,IAAIC,MAAJ,OAAeJ,QAAf,EAA2B,GAA3B,CAAd;AACAd,MAAAA,OAAO,GAAGA,OAAO,CAACO,OAAR,CAAgBU,KAAhB,EAAuBP,SAAvB,CAAV;AACD;AACF;;AAEDV,EAAAA,OAAO,GAAGA,OAAO,CAACO,OAAR,CAAgB,UAAhB,EAA4B,MAA5B,CAAV;;AACA,MAAMY,MAAM,mCACPrC,qBADO,GAEPc,cAFO,CAAZ;;AAKA,SACE,gCAAC,qCAAD;AAAU,IAAA,KAAK,EAAED,aAAjB;AAAgC,IAAA,MAAM,EAAEwB,MAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGnB,OADH,CADF;AAKD,CArDM","sourcesContent":["import React from 'react';\n// @ts-expect-error\nimport Markdown from '@stream-io/react-native-simple-markdown';\nimport anchorme from 'anchorme';\nimport truncate from 'lodash/truncate';\n\nimport type { MarkdownStyle } from '../../../../styles/themeConstants';\nimport type { Message } from '../../../MessageList/utils/insertDates';\nimport type {\n  DefaultAttachmentType,\n  DefaultChannelType,\n  DefaultCommandType,\n  DefaultEventType,\n  DefaultMessageType,\n  DefaultReactionType,\n  DefaultUserType,\n  UnknownType,\n} from '../../../../types/types';\n\nconst defaultMarkdownStyles = {\n  inlineCode: {\n    backgroundColor: '#F3F3F3',\n    borderColor: '#dddddd',\n    color: 'red',\n    fontSize: 13,\n    padding: 3,\n    paddingHorizontal: 5,\n  },\n  link: {\n    color: 'blue',\n    textDecorationLine: 'underline',\n  },\n  url: {\n    color: 'blue',\n    textDecorationLine: 'underline',\n  },\n};\n\nexport type RenderTextParams<\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType\n> = {\n  markdownRules: UnknownType;\n  markdownStyles: MarkdownStyle;\n  message: Message<At, Ch, Co, Ev, Me, Re, Us>;\n};\n\nexport const renderText = <\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType\n>(\n  params: RenderTextParams<At, Ch, Co, Ev, Me, Re, Us>,\n) => {\n  const { markdownRules, markdownStyles, message } = params;\n\n  // take the @ mentions and turn them into markdown?\n  // translate links\n  const { mentioned_users = [], text } = message;\n\n  if (!text) return null;\n\n  let newText = text.trim();\n  const urls = anchorme(newText, {\n    list: true,\n  });\n\n  for (const urlInfo of urls) {\n    const displayLink = truncate(urlInfo.encoded.replace(/^(www\\.)/, ''), {\n      length: 200,\n      omission: '...',\n    });\n    const markdown = `[${displayLink}](${urlInfo.protocol}${urlInfo.encoded})`;\n    newText = newText.replace(urlInfo.raw, markdown);\n  }\n\n  if (mentioned_users.length) {\n    for (let i = 0; i < mentioned_users.length; i++) {\n      const username = mentioned_users[i].name || mentioned_users[i].id;\n      const markdown = `**@${username}**`;\n      const regEx = new RegExp(`@${username}`, 'g');\n      newText = newText.replace(regEx, markdown);\n    }\n  }\n\n  newText = newText.replace(/[<&\"'>]/g, '\\\\$&');\n  const styles = {\n    ...defaultMarkdownStyles,\n    ...markdownStyles,\n  };\n\n  return (\n    <Markdown rules={markdownRules} styles={styles}>\n      {newText}\n    </Markdown>\n  );\n};\n"]}