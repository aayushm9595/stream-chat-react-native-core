{"version":3,"sources":["MessageSimple.tsx"],"names":["Container","styled","View","alignment","hasMarginBottom","isVeryLastMessage","theme","message","container","css","MessageSimple","props","forceAlign","groupStyles","isMyMessage","MessageAvatar","DefaultMessageAvatar","MessageContent","DefaultMessageContent","MessageStatus","DefaultMessageStatus","reactionsEnabled","showMessageStatus","channel","customMessageContent","state","messages","length","id","forwardedProps","latest_reactions","ReactionList"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport { MessageAvatar as DefaultMessageAvatar } from './MessageAvatar';\nimport {\n  MessageContent as DefaultMessageContent,\n  ForwardedMessageProps,\n} from './MessageContent';\nimport { MessageStatus as DefaultMessageStatus } from './MessageStatus';\n\nimport { styled } from '../../../styles/styledComponents';\nimport { useChannelContext } from '../../../contexts/channelContext/ChannelContext';\n\nimport type {\n  GestureResponderEvent,\n  TouchableOpacityProps,\n} from 'react-native';\n\nimport type { MessageActionSheetProps } from './MessageActionSheet';\nimport type { MessageTextProps } from './MessageTextContainer';\n\nimport type { ActionProps, MessageProps } from '../Message';\n\nimport type { ActionHandler } from '../../Attachment/Attachment';\nimport type { AttachmentActionsProps } from '../../Attachment/AttachmentActions';\nimport type { CardProps } from '../../Attachment/Card';\nimport type { FileAttachmentProps } from '../../Attachment/FileAttachment';\nimport type { FileAttachmentGroupProps } from '../../Attachment/FileAttachmentGroup';\nimport type { GalleryProps } from '../../Attachment/Gallery';\nimport type { ReactionListProps } from '../../Reaction/ReactionList';\n\nimport type { Message } from '../../../components/MessageList/utils/insertDates';\nimport type {\n  Alignment,\n  GroupType,\n  MessagesContextValue,\n} from '../../../contexts/messagesContext/MessagesContext';\nimport type { TDateTimeParserInput } from '../../../contexts/translationContext/TranslationContext';\nimport type {\n  DefaultAttachmentType,\n  DefaultChannelType,\n  DefaultCommandType,\n  DefaultEventType,\n  DefaultMessageType,\n  DefaultReactionType,\n  DefaultUserType,\n  UnknownType,\n} from '../../../types/types';\n\nconst Container = styled.View<{\n  alignment: Alignment;\n  hasMarginBottom: boolean;\n  isVeryLastMessage: boolean;\n}>`\n  align-items: flex-end;\n  flex-direction: row;\n  justify-content: ${({ alignment }) =>\n    alignment === 'left' ? 'flex-start' : 'flex-end'};\n  margin-bottom: ${({ hasMarginBottom, isVeryLastMessage }) =>\n    hasMarginBottom ? (isVeryLastMessage ? 30 : 20) : 0}px;\n  ${({ theme }) => theme.message.container.css}\n`;\n\nexport type MessageSimpleProps<\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType\n> = ActionProps &\n  MessageProps<At, Ch, Co, Ev, Me, Re, Us> & {\n    /**\n     * Whether or not user actions are enabled\n     */\n    actionsEnabled: boolean;\n    /**\n     * Whether or not to show the action sheet\n     */\n    actionSheetVisible: boolean;\n    /**\n     * Function that returns a boolean indicating whether or not the user can delete the message.\n     */\n    canDeleteMessage: () => boolean | undefined;\n    /**\n     * Function that returns a boolean indicating whether or not the user can edit the message.\n     */\n    canEditMessage: () => boolean | undefined;\n\n    /** Dismiss the reaction picker */\n    dismissReactionPicker: () => void;\n    /**\n     * Get the total number of reactions on a message\n     */\n    getTotalReactionCount: (\n      supportedReactions: {\n        icon: string;\n        id: string;\n      }[],\n    ) => number;\n\n    /** Handler for actions. Actions in combination with attachments can be used to build [commands](https://getstream.io/chat/docs/#channel_commands). */\n    handleAction: ActionHandler;\n    /**\n     * Handler to delete a current message.\n     */\n    handleDelete: () => Promise<void>;\n    /**\n     * Handler to edit a current message. This function sets the current message as the `editing` property of channel context.\n     * The `editing` prop is used by the MessageInput component to switch to edit mode.\n     */\n    handleEdit: () => void;\n    /** Handler to flag the message */\n    handleFlag: () => Promise<void>;\n    /** Handler to mute the user */\n    handleMute: () => Promise<void>;\n    /** Handler to process a reaction */\n    handleReaction: (reactionType: string) => Promise<void>;\n    /** Handler to resend the message */\n    handleRetry: () => Promise<void>;\n    /**\n     * Returns true if the current user has admin privileges\n     */\n    isAdmin: () => boolean | undefined;\n    /**\n     * Returns true if the current user is a moderator\n     */\n    isModerator: () => boolean | undefined;\n    /**\n     * Returns true if message belongs to current user, else false\n     */\n    isMyMessage: (message: Message<At, Ch, Co, Ev, Me, Re, Us>) => boolean;\n\n    /** Opens the reaction picker */\n    openReactionPicker: () => Promise<void>;\n    /** Whether or not the reaction picker is visible */\n    reactionPickerVisible: boolean;\n    /**\n     * React useState hook setter function that toggles action sheet visibility\n     */\n    setActionSheetVisible: React.Dispatch<React.SetStateAction<boolean>>;\n    /**\n     * Opens the action sheet\n     */\n    showActionSheet: () => Promise<void>;\n    /**\n     * Custom UI component for the action sheet that appears on long press of a Message.\n     * Defaults to: https://github.com/GetStream/stream-chat-react-native/blob/master/src/components/Message/MessageSimple/MessageActionSheet.tsx\n     *\n     * Wrap your action sheet component in `React.forwardRef` to gain access to the `actionSheetRef` set in MessageContent.\n     */\n    ActionSheet?: React.ComponentType<MessageActionSheetProps>;\n    /**\n     * Provide any additional props for `TouchableOpacity` which wraps inner MessageContent component here.\n     * Please check docs for TouchableOpacity for supported props - https://reactnative.dev/docs/touchableopacity#props\n     */\n    additionalTouchableProps?: Omit<TouchableOpacityProps, 'style'>;\n    /**\n     * Custom UI component to display attachments on individual messages\n     * Default component (accepts the same props): [Attachment](https://getstream.github.io/stream-chat-react-native/#attachment)\n     */\n    Attachment?: MessagesContextValue<At, Ch, Co, Ev, Me, Re, Us>['Attachment'];\n    /**\n     * Custom UI component to display attachment actions. e.g., send, shuffle, cancel in case of giphy\n     * Defaults to https://github.com/GetStream/stream-chat-react-native/blob/master/src/components/Attachment/AttachmentActions.tsx\n     */\n    AttachmentActions?: React.ComponentType<AttachmentActionsProps<At>>;\n    /**\n     * Custom UI component to display generic media type e.g. giphy, url preview etc\n     * Defaults to https://github.com/GetStream/stream-chat-react-native/blob/master/src/components/Attachment/Card.tsx\n     */\n    Card?: React.ComponentType<CardProps<At>>;\n    /**\n     * Custom UI component to override default cover (between Header and Footer) of Card component.\n     * Accepts the same props as Card component.\n     */\n    CardCover?: React.ComponentType<CardProps<At>>;\n    /**\n     * Custom UI component to override default Footer of Card component.\n     * Accepts the same props as Card component.\n     */\n    CardFooter?: React.ComponentType<CardProps<At>>;\n    /**\n     * Custom UI component to override default header of Card component.\n     * Accepts the same props as Card component.\n     */\n    CardHeader?: React.ComponentType<CardProps<At>>;\n    /**\n     * Whether or not users are able to long press messages.\n     */\n    enableLongPress?: boolean;\n    /**\n     * Custom UI component to display File type attachment.\n     * Defaults to https://github.com/GetStream/stream-chat-react-native/blob/master/src/components/Attachment/FileAttachment.tsx\n     */\n    FileAttachment?: React.ComponentType<FileAttachmentProps<At>>;\n    /**\n     * Custom UI component to display group of File type attachments or multiple file attachments (in single message).\n     * Defaults to https://github.com/GetStream/stream-chat-react-native/blob/master/src/components/Attachment/FileAttachmentGroup.tsx\n     */\n    FileAttachmentGroup?: React.ComponentType<FileAttachmentGroupProps<At>>;\n    /**\n     * Force alignment of message to left or right - 'left' | 'right'\n     * By default, current user's messages will be aligned to right and other user's messages will be aligned to left.\n     * */\n    forceAlign?: Alignment | boolean;\n    /**\n     * Optional function to custom format the message date\n     */\n    formatDate?: (date: TDateTimeParserInput) => string;\n    /**\n     * Custom UI component to display image attachments.\n     * Defaults to https://github.com/GetStream/stream-chat-react-native/blob/master/src/components/Attachment/Gallery.tsx\n     */\n    Gallery?: React.ComponentType<GalleryProps<At>>;\n    /**\n     * Custom UI component to display Giphy image.\n     * Defaults to https://github.com/GetStream/stream-chat-react-native/blob/master/src/components/Attachment/Card.tsx\n     */\n    Giphy?: React.ComponentType<CardProps<At>>;\n    /** enable hiding reaction count from reaction picker  */\n    hideReactionCount?: boolean;\n    /** enable hiding reaction owners from reaction picker */\n    hideReactionOwners?: boolean;\n    /** Boolean if current message is part of thread */\n    isThreadList?: boolean;\n    /** Object specifying rules defined within simple-markdown https://github.com/Khan/simple-markdown#adding-a-simple-extension */\n    markdownRules?: UnknownType;\n    /**\n     * Array of allowed actions on message. e.g. ['edit', 'delete', 'reactions', 'reply']\n     * If all the actions need to be disabled, empty array or false should be provided as value of prop.\n     * */\n    messageActions?: boolean | string[];\n    /**\n     * Custom UI component for the avatar next to a message\n     * Defaults to: https://github.com/GetStream/stream-chat-react-native/blob/master/src/components/Message/MessageSimple/MessageAvatar.tsx\n     * */\n    MessageAvatar?: React.ComponentType<\n      ForwardedMessageProps<At, Ch, Co, Ev, Me, Re, Us>\n    > & { showAvatar?: boolean };\n    /**\n     * Custom UI component for message content\n     * Defaults to: https://github.com/GetStream/stream-chat-react-native/blob/master/src/components/Message/MessageSimple/MessageContent.tsx\n     * */\n    MessageContent?: React.ComponentType<\n      ForwardedMessageProps<At, Ch, Co, Ev, Me, Re, Us>\n    >;\n    /**\n     * Custom UI component for message status (delivered/read)\n     * Defaults to: https://github.com/GetStream/stream-chat-react-native/blob/master/src/components/Message/MessageSimple/MessageStatus.tsx\n     *\n     * */\n    MessageStatus?: React.ComponentType<\n      ForwardedMessageProps<At, Ch, Co, Ev, Me, Re, Us>\n    >;\n    /** Custom UI component for message text */\n    MessageText?: React.ComponentType<\n      MessageTextProps<At, Ch, Co, Ev, Me, Re, Us>\n    >;\n    /**\n     * Function that overrides default behavior when message is long pressed\n     * e.g. if you would like to open reaction picker on message long press:\n     *\n     * ```\n     * import { MessageSimple } from 'stream-chat-react-native' // or 'stream-chat-expo'\n     * ...\n     * const MessageUIComponent = (props) => {\n     *  return (\n     *    <MessageSimple\n     *      {...props}\n     *      onLongPress={(message, e) => {\n     *        props.openReactionPicker();\n     *        // Or if you want to open action sheet\n     *        // props.showActionSheet();\n     *      }}\n     *  )\n     * }\n     * ```\n     *\n     * Similarly, you can call other methods available on the Message\n     * component such as handleEdit, handleDelete, handleAction etc.\n     *\n     * Source - [Message](https://github.com/GetStream/stream-chat-react-native/blob/master/src/components/Message/Message.tsx)\n     *\n     * By default, we show the action sheet with all the message actions on long press.\n     *\n     * @param message Message object which was long pressed\n     * @param event   Event object for onLongPress event\n     * */\n    onLongPress?: (\n      message: Message<At, Ch, Co, Ev, Me, Re, Us>,\n      event: GestureResponderEvent,\n    ) => void;\n    /**\n     * Function that overrides default behavior when message is pressed/touched\n     * e.g. if you would like to open reaction picker on message press:\n     *\n     * ```\n     * import { MessageSimple } from 'stream-chat-react-native' // or 'stream-chat-expo'\n     * ...\n     * const MessageUIComponent = (props) => {\n     *  return (\n     *    <MessageSimple\n     *      {...props}\n     *      onPress={(message, e) => {\n     *        props.openReactionPicker();\n     *        // Or if you want to open action sheet\n     *        // props.showActionSheet();\n     *      }}\n     *  )\n     * }\n     * ```\n     *\n     * Similarly, you can call other methods available on the Message\n     * component such as handleEdit, handleDelete, handleAction etc.\n     *\n     * Source - [Message](https://github.com/GetStream/stream-chat-react-native/blob/master/src/components/Message/Message.tsx)\n     *\n     * By default, messages do not have an on press action.\n     *\n     * @param message Message object which was long pressed\n     * @param event   Event object for onLongPress event\n     * */\n    onPress?: (\n      message: Message<At, Ch, Co, Ev, Me, Re, Us>,\n      event: GestureResponderEvent,\n    ) => void;\n    /**\n     * Custom UI component to display reaction list.\n     * Defaults to: https://github.com/GetStream/stream-chat-react-native/blob/master/src/components/Reaction/ReactionList.tsx\n     */\n    ReactionList?: React.ComponentType<\n      ReactionListProps<At, Ch, Co, Me, Re, Us>\n    >;\n    showMessageStatus?: boolean;\n    /**\n     * e.g.,\n     * [\n     *  {\n     *    id: 'like',\n     *    icon: '👍',\n     *  },\n     *  {\n     *    id: 'love',\n     *    icon: '❤️️',\n     *  },\n     *  {\n     *    id: 'haha',\n     *    icon: '😂',\n     *  },\n     *  {\n     *    id: 'wow',\n     *    icon: '😮',\n     *  },\n     * ]\n     */\n    supportedReactions?: {\n      icon: string;\n      id: string;\n    }[];\n    textBeforeAttachment?: boolean;\n    /**\n     * Custom UI component to display enriched url preview.\n     * Defaults to https://github.com/GetStream/stream-chat-react-native/blob/master/src/components/Attachment/Card.tsx\n     */\n    UrlPreview?: React.ComponentType<CardProps<At>>;\n  };\n\n/**\n *\n * Message UI component\n *\n * @example ./MessageSimple.md\n */\nexport const MessageSimple = <\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType\n>(\n  props: MessageSimpleProps<At, Ch, Co, Ev, Me, Re, Us>,\n) => {\n  const {\n    forceAlign = false,\n    groupStyles,\n    isMyMessage,\n    message,\n    MessageAvatar = DefaultMessageAvatar,\n    MessageContent = DefaultMessageContent,\n    MessageStatus = DefaultMessageStatus,\n    reactionsEnabled = true,\n    showMessageStatus = true,\n  } = props;\n\n  const { channel } = useChannelContext<At, Ch, Co, Ev, Me, Re, Us>();\n\n  const customMessageContent = !!props.MessageContent;\n\n  const alignment =\n    forceAlign && (forceAlign === 'left' || forceAlign === 'right')\n      ? forceAlign\n      : isMyMessage(message)\n      ? 'right'\n      : 'left';\n\n  const isVeryLastMessage =\n    channel?.state.messages[channel?.state.messages.length - 1]?.id ===\n    message.id;\n  const hasMarginBottom =\n    groupStyles[0] === 'single' || groupStyles[0] === 'bottom';\n\n  const forwardedProps = {\n    ...props,\n    alignment,\n    customMessageContent,\n    groupStyles:\n      reactionsEnabled &&\n      message.latest_reactions &&\n      message.latest_reactions.length > 0 &&\n      props.ReactionList\n        ? (['bottom'] as GroupType[])\n        : groupStyles,\n  };\n\n  return (\n    <Container\n      alignment={alignment}\n      hasMarginBottom={hasMarginBottom}\n      isVeryLastMessage={isVeryLastMessage}\n      testID='message-simple-wrapper'\n    >\n      {alignment === 'right' ? (\n        <>\n          <MessageContent<At, Ch, Co, Ev, Me, Re, Us> {...forwardedProps} />\n          <MessageAvatar<At, Ch, Co, Ev, Me, Re, Us> {...forwardedProps} />\n          {showMessageStatus && (\n            <MessageStatus<At, Ch, Co, Ev, Me, Re, Us> {...forwardedProps} />\n          )}\n        </>\n      ) : (\n        <>\n          <MessageAvatar<At, Ch, Co, Ev, Me, Re, Us> {...forwardedProps} />\n          <MessageContent<At, Ch, Co, Ev, Me, Re, Us> {...forwardedProps} />\n        </>\n      )}\n    </Container>\n  );\n};\n"]}