{"version":3,"sources":["MessageTextContainer.tsx"],"names":["TextContainer","styled","View","alignment","status","theme","type","colors","transparent","light","groupStyle","indexOf","message","content","textContainer","borderRadiusS","borderRadiusL","leftBorderColor","rightBorderColor","leftBorderWidth","rightBorderWidth","css","MessageTextContainer","props","groupStyles","markdownRules","MessageText","ThemeContext","text","Array","isArray","attachments","length","markdownStyles","markdown","renderText"],"mappings":"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","sourcesContent":["import React, { useContext } from 'react';\n\nimport { capitalize } from './utils/capitalize';\nimport { renderText } from './utils/renderText';\n\nimport { styled, ThemeContext } from '../../../styles/styledComponents';\n\nimport type { MessageSimpleProps } from './MessageSimple';\nimport type { RenderTextParams } from './utils/renderText';\n\nimport type {\n  Alignment,\n  GroupType,\n} from '../../../contexts/messagesContext/MessagesContext';\nimport type { Message as MessageType } from '../../../components/MessageList/utils/insertDates';\nimport type { Theme } from '../../../styles/themeConstants';\nimport type {\n  DefaultAttachmentType,\n  DefaultChannelType,\n  DefaultCommandType,\n  DefaultEventType,\n  DefaultMessageType,\n  DefaultReactionType,\n  DefaultUserType,\n  UnknownType,\n} from '../../../types/types';\n\nconst TextContainer = styled.View<{\n  alignment: Alignment;\n  groupStyle: string;\n  status?: string;\n  type?: string;\n}>`\n  align-self: ${({ alignment }) =>\n    alignment === 'left' ? 'flex-start' : 'flex-end'};\n  background-color: ${({ alignment, status, theme, type }) =>\n    alignment === 'left' || type === 'error' || status === 'failed'\n      ? theme.colors.transparent\n      : theme.colors.light};\n  border-bottom-left-radius: ${({ groupStyle, theme }) =>\n    groupStyle.indexOf('left') !== -1\n      ? theme.message.content.textContainer.borderRadiusS\n      : theme.message.content.textContainer.borderRadiusL}px;\n  border-bottom-right-radius: ${({ groupStyle, theme }) =>\n    groupStyle.indexOf('right') !== -1\n      ? theme.message.content.textContainer.borderRadiusS\n      : theme.message.content.textContainer.borderRadiusL}px;\n  border-color: ${({ alignment, theme }) =>\n    alignment === 'left'\n      ? theme.message.content.textContainer.leftBorderColor\n      : theme.message.content.textContainer.rightBorderColor};\n  border-top-left-radius: ${({ groupStyle, theme }) =>\n    groupStyle === 'leftBottom' || groupStyle === 'leftMiddle'\n      ? theme.message.content.textContainer.borderRadiusS\n      : theme.message.content.textContainer.borderRadiusL}px;\n  border-top-right-radius: ${({ groupStyle, theme }) =>\n    groupStyle === 'rightBottom' || groupStyle === 'rightMiddle'\n      ? theme.message.content.textContainer.borderRadiusS\n      : theme.message.content.textContainer.borderRadiusL}px;\n  border-width: ${({ alignment, theme }) =>\n    alignment === 'left'\n      ? theme.message.content.textContainer.leftBorderWidth\n      : theme.message.content.textContainer.rightBorderWidth}px;\n  margin-top: 2px;\n  padding-horizontal: 8px;\n  padding-vertical: 5px;\n  ${({ theme }) => theme.message.content.textContainer.css}\n`;\n\nexport type MessageTextProps<\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType\n> = MessageTextContainerProps<At, Ch, Co, Ev, Me, Re, Us> & {\n  renderText: (\n    params: RenderTextParams<At, Ch, Co, Ev, Me, Re, Us>,\n  ) => JSX.Element | null;\n  theme: Theme;\n};\n\nexport type MessageTextContainerProps<\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType\n> = {\n  /**\n   * Position of the message, either 'right' or 'left'\n   */\n  alignment: Alignment;\n  /**\n   * Whether or not the message has failed\n   */\n  disabled: boolean;\n  /**\n   * Position of message in group - top, bottom, middle, single.\n   *\n   * Message group is a group of consecutive messages from same user. groupStyles can be used to style message as per their position in message group\n   * e.g., user avatar (to which message belongs to) is only showed for last (bottom) message in group.\n   */\n  groupStyles: GroupType[];\n  /** Handler to process a reaction */\n  handleReaction: (reactionType: string) => Promise<void>;\n  /**\n   * Returns true if message belongs to current user, else false\n   */\n  isMyMessage: (message: MessageType<At, Ch, Co, Ev, Me, Re, Us>) => boolean;\n  /**\n   * Current [message object](https://getstream.io/chat/docs/#message_format)\n   */\n  message: MessageType<At, Ch, Co, Ev, Me, Re, Us>;\n  /**\n   * Handler to open and navigate into a message thread\n   */\n  openThread: () => void;\n  /** Object specifying rules defined within simple-markdown https://github.com/Khan/simple-markdown#adding-a-simple-extension */\n  markdownRules?: UnknownType;\n  /**\n   * Custom UI component to display a message in MessageList component\n   * Default component (accepts the same props): [MessageSimple](https://getstream.github.io/stream-chat-react-native/#messagesimple)\n   * */\n  Message?: React.ComponentType<MessageSimpleProps<At, Ch, Co, Ev, Me, Re, Us>>;\n  /**\n   * Custom UI component for message text\n   */\n  MessageText?: React.ComponentType<\n    MessageTextProps<At, Ch, Co, Ev, Me, Re, Us>\n  >;\n};\n\nexport const MessageTextContainer = <\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType\n>(\n  props: MessageTextContainerProps<At, Ch, Co, Ev, Me, Re, Us>,\n) => {\n  const {\n    alignment,\n    groupStyles = ['bottom'],\n    markdownRules = {},\n    message,\n    MessageText,\n  } = props;\n  const theme = useContext(ThemeContext);\n\n  if (!message.text) return null;\n\n  const groupStyle =\n    alignment +\n    capitalize(\n      Array.isArray(message.attachments) && message.attachments.length > 0\n        ? 'bottom'\n        : groupStyles[0],\n    );\n  const markdownStyles = theme ? theme.message.content.markdown : {};\n\n  return (\n    <TextContainer\n      alignment={alignment}\n      groupStyle={groupStyle}\n      status={message.status}\n      testID='message-text-container'\n      type={message.type}\n    >\n      {MessageText ? (\n        <MessageText {...props} renderText={renderText} theme={theme} />\n      ) : (\n        renderText<At, Ch, Co, Ev, Me, Re, Us>({\n          markdownRules,\n          markdownStyles,\n          message,\n        })\n      )}\n    </TextContainer>\n  );\n};\n"]}