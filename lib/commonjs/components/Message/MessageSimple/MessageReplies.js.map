{"version":3,"sources":["MessageReplies.tsx"],"names":["iconPath","require","Container","styled","TouchableOpacity","theme","message","replies","container","css","MessageRepliesImage","Image","alignment","image","MessageRepliesText","Text","colors","primary","messageRepliesText","MessageReplies","props","isThreadList","openThread","t","reply_count","replyCount"],"mappings":";;;;;;;;;AAAA;;AAEA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiBA,IAAMA,QAA4B,GAAGC,OAAO,uCAA5C;;AAEA,IAAMC,SAAS,GAAGC,yBAAOC,gBAAV,oBAIX;AAAA,MAAGC,KAAH,QAAGA,KAAH;AAAA,SAAeA,KAAK,CAACC,OAAN,CAAcC,OAAd,CAAsBC,SAAtB,CAAgCC,GAA/C;AAAA,CAJW,CAAf;;AAOA,IAAMC,mBAAmB,GAAGP,yBAAOQ,KAAV,qBACV;AAAA,MAAGC,SAAH,SAAGA,SAAH;AAAA,SACXA,SAAS,KAAK,MAAd,GAAuB,eAAvB,GAAyC,iBAD9B;AAAA,CADU,EAGrB;AAAA,MAAGP,KAAH,SAAGA,KAAH;AAAA,SAAeA,KAAK,CAACC,OAAN,CAAcC,OAAd,CAAsBM,KAAtB,CAA4BJ,GAA3C;AAAA,CAHqB,CAAzB;;AAMA,IAAMK,kBAAkB,GAAGX,yBAAOY,IAAV,qBACb;AAAA,MAAGV,KAAH,SAAGA,KAAH;AAAA,SAAeA,KAAK,CAACW,MAAN,CAAaC,OAA5B;AAAA,CADa,EAIpB;AAAA,MAAGZ,KAAH,SAAGA,KAAH;AAAA,SAAeA,KAAK,CAACC,OAAN,CAAcC,OAAd,CAAsBW,kBAAtB,CAAyCT,GAAxD;AAAA,CAJoB,CAAxB;;AAkCO,IAAMU,cAAc,GAAG,SAAjBA,cAAiB,CAS5BC,KAT4B,EAUzB;AAAA,MACKR,SADL,GACsDQ,KADtD,CACKR,SADL;AAAA,MACgBS,YADhB,GACsDD,KADtD,CACgBC,YADhB;AAAA,MAC8Bf,OAD9B,GACsDc,KADtD,CAC8Bd,OAD9B;AAAA,MACuCgB,UADvC,GACsDF,KADtD,CACuCE,UADvC;;AAAA,8BAEW,gDAFX;AAAA,MAEKC,CAFL,yBAEKA,CAFL;;AAGH,MAAIF,YAAY,IAAI,CAACf,OAAO,CAACkB,WAA7B,EAA0C,OAAO,IAAP;AAE1C,SACE,gCAAC,SAAD;AAAW,IAAA,OAAO,EAAEF,UAApB;AAAgC,IAAA,MAAM,EAAC,iBAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGV,SAAS,KAAK,MAAd,IACC,gCAAC,mBAAD;AACE,IAAA,SAAS,EAAEA,SADb;AAEE,IAAA,MAAM,EAAEZ,QAFV;AAGE,IAAA,MAAM,EAAC,sBAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,EAQE,gCAAC,kBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGM,OAAO,CAACkB,WAAR,KAAwB,CAAxB,GACGD,CAAC,CAAC,SAAD,CADJ,GAEGA,CAAC,CAAC,0BAAD,EAA6B;AAAEE,IAAAA,UAAU,EAAEnB,OAAO,CAACkB;AAAtB,GAA7B,CAHP,CARF,EAaGZ,SAAS,KAAK,OAAd,IACC,gCAAC,mBAAD;AACE,IAAA,SAAS,EAAEA,SADb;AAEE,IAAA,MAAM,EAAEZ,QAFV;AAGE,IAAA,MAAM,EAAC,uBAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAdJ,CADF;AAuBD,CAtCM","sourcesContent":["import React from 'react';\n\nimport { useTranslationContext } from '../../../contexts/translationContext/TranslationContext';\nimport { styled } from '../../../styles/styledComponents';\n\nimport type { ImageRequireSource } from 'react-native';\n\nimport type { Message } from '../../../components/MessageList/utils/insertDates';\nimport type { Alignment } from '../../../contexts/messagesContext/MessagesContext';\nimport type {\n  DefaultAttachmentType,\n  DefaultChannelType,\n  DefaultCommandType,\n  DefaultEventType,\n  DefaultMessageType,\n  DefaultReactionType,\n  DefaultUserType,\n  UnknownType,\n} from '../../../types/types';\n\nconst iconPath: ImageRequireSource = require('../../../images/icons/icon_path.png');\n\nconst Container = styled.TouchableOpacity`\n  align-items: center;\n  flex-direction: row;\n  padding: 5px;\n  ${({ theme }) => theme.message.replies.container.css}\n`;\n\nconst MessageRepliesImage = styled.Image<{ alignment: Alignment }>`\n  transform: ${({ alignment }) =>\n    alignment === 'left' ? 'rotateY(0deg)' : 'rotateY(180deg)'};\n  ${({ theme }) => theme.message.replies.image.css}\n`;\n\nconst MessageRepliesText = styled.Text`\n  color: ${({ theme }) => theme.colors.primary};\n  font-size: 12px;\n  font-weight: 700;\n  ${({ theme }) => theme.message.replies.messageRepliesText.css}\n`;\n\nexport type MessageRepliesProps<\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType\n> = {\n  /**\n   * Position of the message, either 'right' or 'left'\n   */\n  alignment: Alignment;\n  /**\n   * Whether or not the current message is part of a thread\n   */\n  isThreadList: boolean;\n  /**\n   * Current [message object](https://getstream.io/chat/docs/#message_format)\n   */\n  message: Message<At, Ch, Co, Ev, Me, Re, Us>;\n  /**\n   * Handler to open a thread on a message\n   */\n  openThread: () => void;\n};\n\nexport const MessageReplies = <\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType\n>(\n  props: MessageRepliesProps<At, Ch, Co, Ev, Me, Re, Us>,\n) => {\n  const { alignment, isThreadList, message, openThread } = props;\n  const { t } = useTranslationContext();\n  if (isThreadList || !message.reply_count) return null;\n\n  return (\n    <Container onPress={openThread} testID='message-replies'>\n      {alignment === 'left' && (\n        <MessageRepliesImage\n          alignment={alignment}\n          source={iconPath}\n          testID='message-replies-left'\n        />\n      )}\n      <MessageRepliesText>\n        {message.reply_count === 1\n          ? t('1 reply')\n          : t('{{ replyCount }} replies', { replyCount: message.reply_count })}\n      </MessageRepliesText>\n      {alignment === 'right' && (\n        <MessageRepliesImage\n          alignment={alignment}\n          source={iconPath}\n          testID='message-replies-right'\n        />\n      )}\n    </Container>\n  );\n};\n"]}