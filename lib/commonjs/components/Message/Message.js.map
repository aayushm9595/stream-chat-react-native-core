{"version":3,"sources":["Message.tsx"],"names":["DefaultMessageWithContext","props","channel","client","disabled","dismissKeyboard","dismissKeyboardOnMessageTouch","emojiData","message","Message","MessageSimple","DefaultMessageSimple","removeMessage","retrySendMessage","setEditingState","updateMessage","rest","actionSheetVisible","setActionSheetVisible","reactionPickerVisible","setReactionPickerVisible","actionsEnabled","type","status","isMyMessage","user","id","isAdmin","role","state","membership","isOwner","isModerator","canEditMessage","canDeleteMessage","handleEdit","handleDelete","deleteMessage","data","handleFlag","flagMessage","handleMute","muteUser","showActionSheet","openReactionPicker","dismissReactionPicker","handleReaction","reactionType","Array","isArray","own_reactions","reaction","userID","userExistingReaction","console","warn","removeReaction","deleteReaction","tmpReaction","created_at","Date","message_id","updated_at","addReaction","sendReaction","handleAction","name","value","sendAction","parent_id","handleRetry","undefined","getTotalReactionCount","supportedReactions","count","reactionCounts","reaction_counts","Object","keys","length","forEach","key","find","supportedReaction","actionProps","getConfig","reactions","reactionsEnabled","repliesEnabled","onPress","Keyboard","dismiss","areEqual","prevProps","nextProps","prevLastReceivedId","lastReceivedId","prevMessage","prevReadBy","readBy","nextLastReceivedId","nextMessage","nextReadBy","messageEqual","lastReceivedIdEqual","reactionsEqual","latest_reactions","repliesEqual","reply_count","readByEqual","MemoizedDefaultMessage","React","memo"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { Keyboard, TouchableOpacity } from 'react-native';\n\nimport {\n  MessageSimple as DefaultMessageSimple,\n  MessageSimpleProps,\n} from './MessageSimple/MessageSimple';\n\nimport {\n  ChannelContextValue,\n  useChannelContext,\n} from '../../contexts/channelContext/ChannelContext';\nimport {\n  ChatContextValue,\n  useChatContext,\n} from '../../contexts/chatContext/ChatContext';\nimport {\n  KeyboardContextValue,\n  useKeyboardContext,\n} from '../../contexts/keyboardContext/KeyboardContext';\nimport {\n  GroupType,\n  MessagesContextValue,\n  useMessagesContext,\n} from '../../contexts/messagesContext/MessagesContext';\n\nimport type {\n  MessageResponse,\n  Reaction,\n  ReactionResponse,\n  Message as StreamMessage,\n  UserResponse,\n} from 'stream-chat';\n\nimport type { ActionSheetStyles } from './MessageSimple/MessageActionSheet';\nimport type { FileIconProps } from '../Attachment/FileIcon';\nimport type { Message as InsertDatesMessage } from '../MessageList/utils/insertDates';\nimport type {\n  DefaultAttachmentType,\n  DefaultChannelType,\n  DefaultCommandType,\n  DefaultEventType,\n  DefaultMessageType,\n  DefaultReactionType,\n  DefaultUserType,\n  UnknownType,\n} from '../../types/types';\n\nexport type ActionProps = {\n  reactionsEnabled?: boolean;\n  repliesEnabled?: boolean;\n};\n\nexport type MessagePropsWithContext<\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType\n> = MessageProps<At, Ch, Co, Ev, Me, Re, Us> & {\n  channel: ChannelContextValue<At, Ch, Co, Ev, Me, Re, Us>['channel'];\n  client: ChatContextValue<At, Ch, Co, Ev, Me, Re, Us>['client'];\n  disabled: ChannelContextValue<At, Ch, Co, Ev, Me, Re, Us>['disabled'];\n  dismissKeyboard: KeyboardContextValue['dismissKeyboard'];\n  emojiData: MessagesContextValue<At, Ch, Co, Ev, Me, Re, Us>['emojiData'];\n  removeMessage: MessagesContextValue<\n    At,\n    Ch,\n    Co,\n    Ev,\n    Me,\n    Re,\n    Us\n  >['removeMessage'];\n  retrySendMessage: MessagesContextValue<\n    At,\n    Ch,\n    Co,\n    Ev,\n    Me,\n    Re,\n    Us\n  >['retrySendMessage'];\n  setEditingState: MessagesContextValue<\n    At,\n    Ch,\n    Co,\n    Ev,\n    Me,\n    Re,\n    Us\n  >['setEditingState'];\n  updateMessage: MessagesContextValue<\n    At,\n    Ch,\n    Co,\n    Ev,\n    Me,\n    Re,\n    Us\n  >['updateMessage'];\n};\n\n/**\n * Since this component doesn't consume `messages` from `MessagesContext`,\n * we memoized and broke it up to prevent new messages from re-rendering\n * each individual Message component.\n */\nconst DefaultMessageWithContext = <\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType\n>(\n  props: MessagePropsWithContext<At, Ch, Co, Ev, Me, Re, Us>,\n) => {\n  const {\n    channel,\n    client,\n    disabled,\n    dismissKeyboard,\n    dismissKeyboardOnMessageTouch,\n    emojiData,\n    message,\n    Message: MessageSimple = DefaultMessageSimple,\n    removeMessage,\n    retrySendMessage,\n    setEditingState,\n    updateMessage,\n    ...rest\n  } = props;\n\n  const [actionSheetVisible, setActionSheetVisible] = useState(false);\n  const [reactionPickerVisible, setReactionPickerVisible] = useState(false);\n\n  const actionsEnabled =\n    message.type === 'regular' && message.status === 'received';\n\n  /**\n   * TODO: Remove these functions and replace with booleans\n   */\n  const isMyMessage = () =>\n    client && message && client.user?.id === message.user?.id;\n\n  const isAdmin = () =>\n    client?.user?.role === 'admin' ||\n    channel?.state.membership.role === 'admin';\n\n  const isOwner = () => channel?.state.membership.role === 'owner';\n\n  const isModerator = () =>\n    channel?.state.membership.role === 'channel_moderator' ||\n    channel?.state.membership.role === 'moderator';\n\n  /**\n   * TODO: Consolidate these function into one\n   */\n  const canEditMessage = () =>\n    isMyMessage() || isModerator() || isOwner() || isAdmin();\n\n  const canDeleteMessage = () => canEditMessage();\n\n  const handleEdit = () => setEditingState(message);\n\n  const handleDelete = async () => {\n    if (message.id) {\n      const data = await client.deleteMessage(message.id);\n      updateMessage(data.message);\n    }\n  };\n\n  const handleFlag = async () => {\n    if (message.id) {\n      await client.flagMessage(message.id);\n    }\n  };\n\n  const handleMute = async () => {\n    if (message.user?.id) {\n      await client.muteUser(message.user.id);\n    }\n  };\n\n  const showActionSheet = async () => {\n    await dismissKeyboard();\n    setActionSheetVisible(true);\n  };\n\n  const openReactionPicker = async () => {\n    if (disabled) return;\n    /**\n     * Keyboard closes automatically whenever modal is opened (currently there is no way of avoiding this afaik)\n     * So we need to postpone the calculation for the reaction picker position until after the keyboard closes.\n     * To achieve this, we close the keyboard forcefully and then calculate position of picker in callback.\n     */\n    await dismissKeyboard();\n    setReactionPickerVisible(true);\n  };\n\n  const dismissReactionPicker = () => setReactionPickerVisible(false);\n\n  const handleReaction = async (reactionType: string) => {\n    setReactionPickerVisible(false);\n\n    let userExistingReaction;\n\n    if (Array.isArray(message.own_reactions)) {\n      for (const reaction of message.own_reactions) {\n        /**\n         * Own user should only ever contain the current user id, just in\n         * case we check to prevent bugs with message updates from breaking reactions\n         */\n        if (\n          client.userID === reaction.user?.id &&\n          reaction.type === reactionType\n        ) {\n          userExistingReaction = reaction;\n        } else if (client.userID !== reaction.user?.id) {\n          console.warn(\n            `message.own_reactions contained reactions from a different user, this indicates a bug`,\n          );\n        }\n      }\n    }\n\n    // Add reaction to local state, make API call in background, revert to old message if fails\n    try {\n      if (channel) {\n        if (userExistingReaction) {\n          channel.state.removeReaction(userExistingReaction);\n          if (message.id) {\n            await channel.deleteReaction(message.id, userExistingReaction.type);\n          }\n        } else {\n          const tmpReaction = {\n            created_at: new Date(),\n            message_id: message.id,\n            type: reactionType,\n            updated_at: new Date(),\n            user: client.user,\n          };\n\n          channel.state.addReaction(\n            (tmpReaction as unknown) as ReactionResponse<Re, Us>,\n          );\n          if (message.id) {\n            await channel.sendReaction(message.id, {\n              type: reactionType,\n            } as Reaction<Re, Us>);\n          }\n        }\n      }\n    } catch (_error) {\n      setReactionPickerVisible(true);\n      updateMessage(message as MessageResponse<At, Ch, Co, Me, Re, Us>);\n    }\n  };\n\n  const handleAction = async (name: string, value: string) => {\n    if (message.id) {\n      const data = await channel?.sendAction(message.id, { [name]: value });\n      if (data?.message) {\n        updateMessage(data.message);\n      } else {\n        removeMessage({\n          id: message.id,\n          parent_id: message.parent_id as StreamMessage<\n            At,\n            Me,\n            Us\n          >['parent_id'],\n        });\n      }\n    }\n  };\n\n  const handleRetry = async () =>\n    await retrySendMessage({\n      ...message,\n      updated_at: undefined,\n    } as MessageResponse<At, Ch, Co, Me, Re, Us>);\n\n  const getTotalReactionCount = (\n    supportedReactions: {\n      icon: string;\n      id: string;\n    }[],\n  ) => {\n    let count = 0;\n    if (!supportedReactions) {\n      supportedReactions = emojiData;\n    }\n\n    const reactionCounts = message.reaction_counts;\n\n    if (reactionCounts && Object.keys(reactionCounts).length > 0) {\n      Object.keys(reactionCounts).forEach((key) => {\n        if (\n          supportedReactions.find(\n            (supportedReaction) => supportedReaction.id === key,\n          )\n        ) {\n          count += reactionCounts[key];\n        }\n      });\n    }\n    return count;\n  };\n\n  const actionProps = {} as ActionProps;\n  if (typeof channel?.getConfig === 'function') {\n    const reactions = channel.getConfig()?.reactions;\n    actionProps.reactionsEnabled = reactions;\n    actionProps.repliesEnabled = reactions;\n  }\n\n  const onPress = () => {\n    if (dismissKeyboardOnMessageTouch) {\n      Keyboard.dismiss();\n    }\n  };\n\n  return (\n    <TouchableOpacity\n      activeOpacity={1}\n      onPress={onPress}\n      testID='message-wrapper'\n    >\n      <MessageSimple<At, Ch, Co, Ev, Me, Re, Us>\n        {...rest}\n        {...actionProps}\n        actionsEnabled={actionsEnabled}\n        actionSheetVisible={actionSheetVisible}\n        canDeleteMessage={canDeleteMessage}\n        canEditMessage={canEditMessage}\n        dismissReactionPicker={dismissReactionPicker}\n        getTotalReactionCount={getTotalReactionCount}\n        handleAction={handleAction}\n        handleDelete={handleDelete}\n        handleEdit={handleEdit}\n        handleFlag={handleFlag}\n        handleMute={handleMute}\n        handleReaction={handleReaction}\n        handleRetry={handleRetry}\n        isAdmin={isAdmin}\n        isModerator={isModerator}\n        isMyMessage={isMyMessage}\n        message={message}\n        Message={MessageSimple}\n        onPress={onPress}\n        openReactionPicker={openReactionPicker}\n        reactionPickerVisible={reactionPickerVisible}\n        setActionSheetVisible={setActionSheetVisible}\n        showActionSheet={showActionSheet}\n      />\n    </TouchableOpacity>\n  );\n};\n\nconst areEqual = <\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType\n>(\n  prevProps: MessagePropsWithContext<At, Ch, Co, Ev, Me, Re, Us>,\n  nextProps: MessagePropsWithContext<At, Ch, Co, Ev, Me, Re, Us>,\n) => {\n  const {\n    lastReceivedId: prevLastReceivedId,\n    message: prevMessage,\n    readBy: prevReadBy,\n  } = prevProps;\n  const {\n    lastReceivedId: nextLastReceivedId,\n    message: nextMessage,\n    readBy: nextReadBy,\n  } = nextProps;\n\n  const messageEqual = prevMessage.updated_at === nextMessage.updated_at;\n\n  const lastReceivedIdEqual =\n    prevLastReceivedId === nextLastReceivedId ||\n    (prevLastReceivedId !== nextMessage.id &&\n      nextLastReceivedId !== nextMessage.id &&\n      prevLastReceivedId !== prevMessage.id &&\n      nextLastReceivedId !== prevMessage.id);\n\n  const reactionsEqual =\n    prevMessage.latest_reactions?.length ===\n    nextMessage.latest_reactions?.length;\n  const repliesEqual = prevMessage.reply_count === nextMessage.reply_count;\n\n  const readByEqual = prevReadBy === nextReadBy;\n  return (\n    messageEqual &&\n    reactionsEqual &&\n    repliesEqual &&\n    lastReceivedIdEqual &&\n    readByEqual\n  );\n};\n\nconst MemoizedDefaultMessage = React.memo(\n  DefaultMessageWithContext,\n  areEqual,\n) as typeof DefaultMessageWithContext;\n\nexport type MessageProps<\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType\n> = {\n  /**\n   * Position of message in group - top, bottom, middle, single.\n   *\n   * Message group is a group of consecutive messages from same user. groupStyles can be used to style message as per their position in message group\n   * e.g., user avatar (to which message belongs to) is only showed for last (bottom) message in group.\n   */\n  groupStyles: GroupType[];\n  /**\n   * Current [message object](https://getstream.io/chat/docs/#message_format)\n   */\n  message: InsertDatesMessage<At, Ch, Co, Ev, Me, Re, Us>;\n  /**\n   * Style object for action sheet (used to message actions).\n   * Supported styles: https://github.com/beefe/react-native-actionsheet/blob/master/lib/styles.js\n   */\n  actionSheetStyles?: ActionSheetStyles;\n  /**\n   * Custom UI component for attachment icon for type 'file' attachment.\n   * Defaults to: https://github.com/GetStream/stream-chat-react-native/blob/master/src/components/Attachment/FileIcon.tsx\n   */\n  AttachmentFileIcon?: React.ComponentType<FileIconProps>;\n  /** Should keyboard be dismissed when messaged is touched */\n  dismissKeyboardOnMessageTouch?: boolean;\n  /**\n   * Latest message id on current channel\n   */\n  lastReceivedId?: string;\n  /**\n   * Custom UI component to display a message in MessageList component\n   * Default component (accepts the same props): [MessageSimple](https://getstream.github.io/stream-chat-react-native/#messagesimple)\n   * */\n  Message?: React.ComponentType<MessageSimpleProps<At, Ch, Co, Ev, Me, Re, Us>>;\n  /**\n   * Custom message actions to display on open of the action sheet\n   */\n  messageActions?: boolean | string[];\n  /**\n   * Handler to open the thread on message. This is callback for touch event for replies button.\n   *\n   * @param message A message object to open the thread upon.\n   */\n  onThreadSelect?: (\n    message: InsertDatesMessage<At, Ch, Co, Ev, Me, Re, Us>,\n  ) => void;\n  /**\n   * A list of users that have read this message\n   **/\n  readBy?: UserResponse<Us>[];\n  /**\n   * Whether or not the MessageList is part of a Thread\n   */\n  threadList?: boolean;\n};\n\n/**\n * Message - A high level component which implements all the logic required for a message.\n * The actual rendering of the message is delegated via the \"Message\" property\n *\n * @example ./Message.md\n */\nexport const Message = <\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType\n>(\n  props: MessageProps<At, Ch, Co, Ev, Me, Re, Us>,\n) => {\n  const { channel, disabled } = useChannelContext<At, Ch, Co, Ev, Me, Re, Us>();\n  const { client } = useChatContext<At, Ch, Co, Ev, Me, Re, Us>();\n  const { dismissKeyboard } = useKeyboardContext();\n  const {\n    emojiData,\n    removeMessage,\n    retrySendMessage,\n    setEditingState,\n    updateMessage,\n  } = useMessagesContext<At, Ch, Co, Ev, Me, Re, Us>();\n\n  return (\n    <MemoizedDefaultMessage<At, Ch, Co, Ev, Me, Re, Us>\n      {...props}\n      {...{\n        channel,\n        client,\n        disabled,\n        dismissKeyboard,\n        emojiData,\n        removeMessage,\n        retrySendMessage,\n        setEditingState,\n        updateMessage,\n      }}\n    />\n  );\n};\n"]}