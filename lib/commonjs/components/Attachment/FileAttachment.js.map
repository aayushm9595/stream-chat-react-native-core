{"version":3,"sources":["FileAttachment.tsx"],"names":["FileContainer","styled","View","alignment","groupStyle","theme","message","file","container","css","FileDetails","details","FileSize","Text","size","FileTitle","title","getFileSizeDisplayText","parseFloat","Math","floor","goToURL","url","Linking","canOpenURL","then","supported","openURL","console","log","FileAttachment","props","actionHandler","attachment","AttachmentActions","DefaultAttachmentActions","AttachmentFileIcon","DefaultFileIcon","additionalTouchableProps","onLongPress","asset_url","mime_type","file_size","actions","length"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Linking, TouchableOpacity } from 'react-native';\n\nimport {\n  AttachmentActionsProps,\n  AttachmentActions as DefaultAttachmentActions,\n} from './AttachmentActions';\n\nimport { useMessageContentContext } from '../../contexts/messageContentContext/MessageContentContext';\nimport { styled } from '../../styles/styledComponents';\n\nimport type { Attachment } from 'stream-chat';\n\nimport type { ActionHandler } from './Attachment';\nimport { FileIcon as DefaultFileIcon } from './FileIcon';\nimport type { FileIconProps } from './FileIcon';\n\nimport type {\n  Alignment,\n  GroupType,\n} from '../../contexts/messagesContext/MessagesContext';\nimport type { DefaultAttachmentType, UnknownType } from '../../types/types';\n\nconst FileContainer = styled.View<{\n  alignment: Alignment;\n  groupStyle?: string;\n}>`\n  align-items: center;\n  background-color: #ebebeb;\n  border-bottom-left-radius: ${({ alignment, groupStyle }) => {\n    if (groupStyle === 'top' || groupStyle === 'middle') return 0;\n    return alignment === 'right' ? 16 : 2;\n  }}px;\n  border-bottom-right-radius: ${({ alignment, groupStyle }) => {\n    if (groupStyle === 'top' || groupStyle === 'middle') return 0;\n    return alignment === 'left' ? 16 : 2;\n  }}px;\n  border-top-left-radius: ${({ groupStyle }) => {\n    if (groupStyle === 'middle' || groupStyle === 'bottom') return 0;\n    return 16;\n  }}px;\n  border-top-right-radius: ${({ groupStyle }) => {\n    if (groupStyle === 'middle' || groupStyle === 'bottom') return 0;\n    return 16;\n  }}px;\n  flex-direction: row;\n  padding: 10px;\n  ${({ theme }) => theme.message.file.container.css}\n`;\n\nconst FileDetails = styled.View`\n  padding-left: 10px;\n  ${({ theme }) => theme.message.file.details.css}\n`;\n\nconst FileSize = styled.Text`\n  ${({ theme }) => theme.message.file.size.css}\n`;\n\nconst FileTitle = styled.Text`\n  font-weight: 700;\n  ${({ theme }) => theme.message.file.title.css}\n`;\n\nconst getFileSizeDisplayText = (size?: number | string) => {\n  if (!size) return;\n  if (typeof size === 'string') {\n    size = parseFloat(size);\n  }\n\n  if (size < 1000 * 1000) {\n    return `${Math.floor(size / 10) / 100} KB`;\n  }\n\n  return `${Math.floor(size / 10000) / 100} MB`;\n};\n\nconst goToURL = (url?: string) => {\n  if (!url) return;\n  Linking.canOpenURL(url).then((supported) => {\n    if (supported) {\n      Linking.openURL(url);\n    } else {\n      console.log(`Don't know how to open URI: ${url}`);\n    }\n  });\n};\n\nexport type FileAttachmentProps<\n  At extends UnknownType = DefaultAttachmentType\n> = {\n  /** The attachment to render */\n  attachment: Attachment<At>;\n  /** Handler for actions. Actions in combination with attachments can be used to build [commands](https://getstream.io/chat/docs/#channel_commands). */\n  actionHandler?: ActionHandler;\n  /**\n   * Position of the message, either 'right' or 'left'\n   */\n  alignment?: Alignment;\n  /**\n   * Custom UI component to display attachment actions. e.g., send, shuffle, cancel in case of giphy\n   * Defaults to https://github.com/GetStream/stream-chat-react-native/blob/master/src/components/Attachment/AttachmentActions.tsx\n   */\n  AttachmentActions?: React.ComponentType<AttachmentActionsProps<At>>;\n  /**\n   * Custom UI component for attachment icon for type 'file' attachment.\n   * Defaults to: https://github.com/GetStream/stream-chat-react-native/blob/master/src/components/Attachment/FileIcon.tsx\n   */\n  AttachmentFileIcon?: React.ComponentType<FileIconProps>;\n  /**\n   * Position of message in group - top, bottom, middle, single.\n   *\n   * Message group is a group of consecutive messages from same user. groupStyles can be used to style message as per their position in message group\n   * e.g., user avatar (to which message belongs to) is only showed for last (bottom) message in group.\n   */\n  groupStyle?: GroupType;\n};\n\nexport const FileAttachment = <\n  At extends DefaultAttachmentType = DefaultAttachmentType\n>(\n  props: FileAttachmentProps<At>,\n) => {\n  const {\n    actionHandler,\n    alignment = 'right',\n    attachment,\n    AttachmentActions = DefaultAttachmentActions,\n    AttachmentFileIcon = DefaultFileIcon,\n    groupStyle,\n  } = props;\n\n  const { additionalTouchableProps, onLongPress } = useMessageContentContext();\n\n  return (\n    <TouchableOpacity\n      onLongPress={onLongPress}\n      onPress={() => goToURL(attachment.asset_url)}\n      testID='file-attachment'\n      {...additionalTouchableProps}\n    >\n      <FileContainer alignment={alignment} groupStyle={groupStyle}>\n        <AttachmentFileIcon mimeType={attachment.mime_type} />\n        <FileDetails>\n          <FileTitle numberOfLines={2}>{attachment.title}</FileTitle>\n          <FileSize>{getFileSizeDisplayText(attachment.file_size)}</FileSize>\n        </FileDetails>\n      </FileContainer>\n      {attachment.actions?.length ? (\n        <AttachmentActions<At> actionHandler={actionHandler} {...attachment} />\n      ) : null}\n    </TouchableOpacity>\n  );\n};\n"]}