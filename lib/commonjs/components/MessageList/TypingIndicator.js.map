{"version":3,"sources":["TypingIndicator.tsx"],"names":["Container","styled","View","theme","typingIndicator","container","css","TypingText","Text","text","color","fontSize","TypingIndicator","Avatar","DefaultAvatar","typing","client","typingString","typingUsers","Object","values","filter","user","id","map","idx","image","name"],"mappings":";;;;;;;;;AAAA;;AAEA;;AAEA;;AAEA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;AAeA,IAAMA,SAAS,GAAGC,yBAAOC,IAAV,oBAIX;AAAA,MAAGC,KAAH,QAAGA,KAAH;AAAA,SAAeA,KAAK,CAACC,eAAN,CAAsBC,SAAtB,CAAgCC,GAA/C;AAAA,CAJW,CAAf;;AAOA,IAAMC,UAAU,GAAGN,yBAAOO,IAAV,qBACL;AAAA,MAAGL,KAAH,SAAGA,KAAH;AAAA,SAAeA,KAAK,CAACC,eAAN,CAAsBK,IAAtB,CAA2BC,KAA1C;AAAA,CADK,EAED;AAAA,MAAGP,KAAH,SAAGA,KAAH;AAAA,SAAeA,KAAK,CAACC,eAAN,CAAsBK,IAAtB,CAA2BE,QAA1C;AAAA,CAFC,EAIZ;AAAA,MAAGR,KAAH,SAAGA,KAAH;AAAA,SAAeA,KAAK,CAACC,eAAN,CAAsBK,IAAtB,CAA2BH,GAA1C;AAAA,CAJY,CAAhB;;AAcO,IAAMM,eAAe,GAAG,SAAlBA,eAAkB,QAUH;AAAA,2BAD1BC,MAC0B;AAAA,MAD1BA,MAC0B,6BADjBC,cACiB;;AAAA,2BACP,wCADO;AAAA,MAClBC,MADkB,sBAClBA,MADkB;;AAAA,wBAEP,kCAFO;AAAA,MAElBC,MAFkB,mBAElBA,MAFkB;;AAG1B,MAAMC,YAAY,GAAG,uCAArB;AAEA,MAAMC,WAAW,GAAGC,MAAM,CAACC,MAAP,CAAcL,MAAd,CAApB;AAEA,SACE,gCAAC,SAAD;AAAW,IAAA,MAAM,EAAC,kBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACIG,WAAW,CAACG,MAAZ,CACA;AAAA;;AAAA,QAAGC,IAAH,SAAGA,IAAH;AAAA,WAAc,CAAC,CAACA,IAAF,IAAUA,IAAI,CAACC,EAAL,MAAYP,MAAZ,oCAAYA,MAAM,CAAEM,IAApB,qBAAY,aAAcC,EAA1B,CAAxB;AAAA,GADA,CAAD,CAIEC,GAJF,CAIM,iBAAWC,GAAX;AAAA,QAAGH,IAAH,SAAGA,IAAH;AAAA,WACL,gCAAC,MAAD;AACE,MAAA,KAAK,EAAEA,IAAI,CAACI,KADd;AAEE,MAAA,GAAG,OAAKJ,IAAI,CAACC,EAAV,GAAeE,GAFpB;AAGE,MAAA,IAAI,EAAEH,IAAI,CAACK,IAAL,IAAaL,IAAI,CAACC,EAH1B;AAIE,MAAA,IAAI,EAAE,EAJR;AAKE,MAAA,MAAM,qBAAmBE,GAL3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADK;AAAA,GAJN,CADH,EAcE,gCAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAaR,YAAb,CAdF,CADF;AAkBD,CAnCM","sourcesContent":["import React from 'react';\n\nimport { useTypingString } from './hooks/useTypingString';\n\nimport { AvatarProps, Avatar as DefaultAvatar } from '../Avatar/Avatar';\n\nimport { useChannelContext } from '../../contexts/channelContext/ChannelContext';\nimport { useChatContext } from '../../contexts/chatContext/ChatContext';\nimport { styled } from '../../styles/styledComponents';\n\nimport type { Event, UserResponse } from 'stream-chat';\n\nimport type {\n  DefaultAttachmentType,\n  DefaultChannelType,\n  DefaultCommandType,\n  DefaultEventType,\n  DefaultMessageType,\n  DefaultReactionType,\n  DefaultUserType,\n  UnknownType,\n} from '../../types/types';\n\nconst Container = styled.View`\n  align-items: flex-end;\n  flex-direction: row;\n  justify-content: flex-start;\n  ${({ theme }) => theme.typingIndicator.container.css};\n`;\n\nconst TypingText = styled.Text`\n  color: ${({ theme }) => theme.typingIndicator.text.color};\n  font-size: ${({ theme }) => theme.typingIndicator.text.fontSize}px;\n  margin-left: 10px;\n  ${({ theme }) => theme.typingIndicator.text.css};\n`;\n\nexport type TypingIndicatorProps = {\n  /**\n   * Defaults to and accepts same props as: [Avatar](https://getstream.github.io/stream-chat-react-native/#avatar)\n   */\n  Avatar?: React.ComponentType<AvatarProps>;\n};\n\nexport const TypingIndicator = <\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends DefaultUserType = DefaultUserType\n>({\n  Avatar = DefaultAvatar,\n}: TypingIndicatorProps) => {\n  const { typing } = useChannelContext<At, Ch, Co, Ev, Me, Re, Us>();\n  const { client } = useChatContext<At, Ch, Co, Ev, Me, Re, Us>();\n  const typingString = useTypingString<At, Ch, Co, Ev, Me, Re, Us>();\n\n  const typingUsers = Object.values(typing);\n\n  return (\n    <Container testID='typing-indicator'>\n      {(typingUsers.filter(\n        ({ user }) => !!user && user.id !== client?.user?.id,\n      ) as Array<\n        Event<At, Ch, Co, Ev, Me, Re, Us> & { user: UserResponse<Us> }\n      >).map(({ user }, idx) => (\n        <Avatar\n          image={user.image}\n          key={`${user.id}${idx}`}\n          name={user.name || user.id}\n          size={20}\n          testID={`typing-avatar-${idx}`}\n        />\n      ))}\n      <TypingText>{typingString}</TypingText>\n    </Container>\n  );\n};\n"]}