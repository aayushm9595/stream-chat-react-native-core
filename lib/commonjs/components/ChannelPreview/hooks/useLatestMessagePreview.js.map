{"version":3,"sources":["useLatestMessagePreview.ts"],"names":["getLatestMessageDisplayText","message","t","deleted_at","text","command","attachments","length","getLatestMessageDisplayDate","tDateTimeParser","parserOutput","created_at","asMutable","isSame","Date","format","getLatestMessagePreview","channel","messages","state","messageObject","undefined","useLatestMessagePreview","lastMessage","latestMessagePreview","setLatestMessagePreview"],"mappings":";;;;;;;;;AAAA;;AAEA;;AA4CA,IAAMA,2BAA2B,GAAG,SAA9BA,2BAA8B,CASlCC,OATkC,EAYlCC,CAZkC,EAa/B;AAAA;;AACH,MAAI,CAACD,OAAL,EAAc,OAAOC,CAAC,CAAC,gBAAD,CAAR;AACd,MAAID,OAAO,CAACE,UAAZ,EAAwB,OAAOD,CAAC,CAAC,iBAAD,CAAR;AACxB,MAAID,OAAO,CAACG,IAAZ,EAAkB,OAAOH,OAAO,CAACG,IAAf;AAClB,MAAIH,OAAO,CAACI,OAAZ,EAAqB,OAAO,MAAMJ,OAAO,CAACI,OAArB;AACrB,8BAAIJ,OAAO,CAACK,WAAZ,qBAAI,qBAAqBC,MAAzB,EAAiC,OAAOL,CAAC,CAAC,kBAAD,CAAR;AACjC,SAAOA,CAAC,CAAC,kBAAD,CAAR;AACD,CApBD;;AAsBA,IAAMM,2BAA2B,GAAG,SAA9BA,2BAA8B,CASlCP,OATkC,EAYlCQ,eAZkC,EAa/B;AACH,MAAMC,YAAY,GAAGD,eAAe,CAACR,OAAO,CAACU,UAAR,CAAmBC,SAAnB,EAAD,CAApC;;AACA,MAAI,uCAAcF,YAAd,CAAJ,EAAiC;AAC/B,QAAIA,YAAY,CAACG,MAAb,CAAoB,IAAIC,IAAJ,EAApB,EAAgC,KAAhC,CAAJ,EAA4C;AAC1C,aAAOJ,YAAY,CAACK,MAAb,CAAoB,IAApB,CAAP;AACD;;AACD,WAAOL,YAAY,CAACK,MAAb,CAAoB,GAApB,CAAP;AACD;;AACD,SAAOL,YAAP;AACD,CAtBD;;AAwBA,IAAMM,uBAAuB,GAAG,SAA1BA,uBAA0B,CAS9BC,OAT8B,EAU9Bf,CAV8B,EAW9BO,eAX8B,EAY3B;AAAA;;AACH,MAAMS,QAAQ,GAAGD,OAAH,sCAAGA,OAAO,CAAEE,KAAZ,qBAAG,eAAgBD,QAAjC;;AAEA,MAAI,EAACA,QAAD,oBAACA,QAAQ,CAAEX,MAAX,CAAJ,EAAuB;AACrB,WAAO;AACLI,MAAAA,UAAU,EAAE,EADP;AAELS,MAAAA,aAAa,EAAEC,SAFV;AAGLjB,MAAAA,IAAI,EAAE;AAHD,KAAP;AAKD;;AAED,MAAMH,OAAO,GAAGiB,QAAQ,CAACA,QAAQ,CAACX,MAAT,GAAkB,CAAnB,CAAxB;AACA,SAAO;AACLI,IAAAA,UAAU,EAAEH,2BAA2B,CAACP,OAAD,EAAUQ,eAAV,CADlC;AAELW,IAAAA,aAAa,EAAEnB,OAFV;AAGLG,IAAAA,IAAI,EAAEJ,2BAA2B,CAACC,OAAD,EAAUC,CAAV;AAH5B,GAAP;AAKD,CA7BD;;AAsCO,IAAMoB,uBAAuB,GAAG,SAA1BA,uBAA0B,CASrCL,OATqC,EAUrCM,WAVqC,EAalC;AAAA;;AAAA,8BAC4B,gDAD5B;AAAA,MACKrB,CADL,yBACKA,CADL;AAAA,MACQO,eADR,yBACQA,eADR;;AAGH,MAAMS,QAAQ,GAAG,CAAAD,OAAO,QAAP,+BAAAA,OAAO,CAAEE,KAAT,qCAAgBD,QAAhB,KAA4B,EAA7C;AACA,MAAMjB,OAAO,GAAGiB,QAAQ,CAACA,QAAQ,CAACX,MAAT,GAAkB,CAAnB,CAAxB;;AAJG,kBAMqD,qBACtDS,uBAAuB,CAACC,OAAD,EAAUf,CAAV,EAAaO,eAAb,CAD+B,CANrD;AAAA;AAAA,MAMIe,oBANJ;AAAA,MAM0BC,uBAN1B;;AAUH,wBAAU,YAAM;AACdA,IAAAA,uBAAuB,CACrBT,uBAAuB,CAACC,OAAD,EAAUf,CAAV,EAAaO,eAAb,CADF,CAAvB;AAGD,GAJD,EAIG,CAACc,WAAD,EAActB,OAAd,CAJH;AAMA,SAAOuB,oBAAP;AACD,CA9BM","sourcesContent":["import { useEffect, useState } from 'react';\n\nimport {\n  isDayOrMoment,\n  TDateTimeParser,\n  useTranslationContext,\n} from '../../../contexts/translationContext/TranslationContext';\n\nimport type { Immutable } from 'seamless-immutable';\nimport type { Channel, ChannelState, MessageResponse } from 'stream-chat';\n\nimport type {\n  DefaultAttachmentType,\n  DefaultChannelType,\n  DefaultCommandType,\n  DefaultEventType,\n  DefaultMessageType,\n  DefaultReactionType,\n  DefaultUserType,\n  UnknownType,\n} from '../../../types/types';\n\nexport type LatestMessagePreview<\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType\n> =\n  | {\n      created_at: string;\n      messageObject: undefined;\n      text: string;\n    }\n  | {\n      created_at: string | number | Date;\n      messageObject: Immutable<\n        ReturnType<\n          ChannelState<At, Ch, Co, Ev, Me, Re, Us>['messageToImmutable']\n        >\n      >;\n      text: string;\n    };\n\nconst getLatestMessageDisplayText = <\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType\n>(\n  message: Immutable<\n    ReturnType<ChannelState<At, Ch, Co, Ev, Me, Re, Us>['messageToImmutable']>\n  >,\n  t: (key: string) => string,\n) => {\n  if (!message) return t('Nothing yet...');\n  if (message.deleted_at) return t('Message deleted');\n  if (message.text) return message.text;\n  if (message.command) return '/' + message.command;\n  if (message.attachments?.length) return t('üèô Attachment...');\n  return t('Empty message...');\n};\n\nconst getLatestMessageDisplayDate = <\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType\n>(\n  message: Immutable<\n    ReturnType<ChannelState<At, Ch, Co, Ev, Me, Re, Us>['messageToImmutable']>\n  >,\n  tDateTimeParser: TDateTimeParser,\n) => {\n  const parserOutput = tDateTimeParser(message.created_at.asMutable());\n  if (isDayOrMoment(parserOutput)) {\n    if (parserOutput.isSame(new Date(), 'day')) {\n      return parserOutput.format('LT');\n    }\n    return parserOutput.format('L');\n  }\n  return parserOutput;\n};\n\nconst getLatestMessagePreview = <\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType\n>(\n  channel: Channel<At, Ch, Co, Ev, Me, Re, Us>,\n  t: (key: string) => string,\n  tDateTimeParser: TDateTimeParser,\n) => {\n  const messages = channel?.state?.messages;\n\n  if (!messages?.length) {\n    return {\n      created_at: '',\n      messageObject: undefined,\n      text: '',\n    };\n  }\n\n  const message = messages[messages.length - 1];\n  return {\n    created_at: getLatestMessageDisplayDate(message, tDateTimeParser),\n    messageObject: message,\n    text: getLatestMessageDisplayText(message, t),\n  };\n};\n\n/**\n * Hook to set the display preview for latest message on channel.\n *\n * @param {*} channel Channel object\n *\n * @returns {object} latest message preview e.g.. { text: 'this was last message ...', created_at: '11/12/2020', messageObject: { originalMessageObject } }\n */\nexport const useLatestMessagePreview = <\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType\n>(\n  channel: Channel<At, Ch, Co, Ev, Me, Re, Us>,\n  lastMessage?:\n    | ReturnType<ChannelState<At, Ch, Co, Ev, Me, Re, Us>['messageToImmutable']>\n    | MessageResponse<At, Ch, Co, Me, Re, Us>,\n) => {\n  const { t, tDateTimeParser } = useTranslationContext();\n\n  const messages = channel?.state?.messages || [];\n  const message = messages[messages.length - 1];\n\n  const [latestMessagePreview, setLatestMessagePreview] = useState(\n    getLatestMessagePreview(channel, t, tDateTimeParser),\n  );\n\n  useEffect(() => {\n    setLatestMessagePreview(\n      getLatestMessagePreview(channel, t, tDateTimeParser),\n    );\n  }, [lastMessage, message]);\n\n  return latestMessagePreview;\n};\n"]}