{"version":3,"sources":["ReactionPicker.tsx"],"names":["Container","styled","TouchableOpacity","leftAlign","theme","message","reactionPicker","container","css","ContainerView","View","containerView","Column","column","Emoji","Text","emoji","ReactionCount","text","getLatestUser","type","reactions","filtered","filter","item","user","ReactionPicker","props","handleDismiss","handleReaction","hideReactionCount","hideReactionOwners","latestReactions","reactionCounts","reactionPickerVisible","rpLeft","rpRight","rpTop","supportedReactions","emojiData","Boolean","marginLeft","marginRight","marginTop","map","icon","id","count","latestUser","image","name","height","width"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Modal, View } from 'react-native';\n\nimport { Avatar } from '../Avatar/Avatar';\nimport { styled } from '../../styles/styledComponents';\nimport { emojiData } from '../../utils/utils';\n\nimport type { LatestReactions, Reaction } from './ReactionList';\n\nimport type { MessageWithDates } from '../../contexts/messagesContext/MessagesContext';\nimport type {\n  DefaultAttachmentType,\n  DefaultChannelType,\n  DefaultCommandType,\n  DefaultMessageType,\n  DefaultReactionType,\n  DefaultUserType,\n  UnknownType,\n} from '../../types/types';\n\nconst Container = styled.TouchableOpacity<{ leftAlign: boolean }>`\n  align-items: ${({ leftAlign }) => (leftAlign ? 'flex-start' : 'flex-end')};\n  flex: 1;\n  ${({ theme }) => theme.message.reactionPicker.container.css}\n`;\n\nconst ContainerView = styled.View`\n  background-color: black;\n  border-radius: 30px;\n  flex-direction: row;\n  height: 60px;\n  padding-horizontal: 20px;\n  ${({ theme }) => theme.message.reactionPicker.containerView.css}\n`;\n\nconst Column = styled.View`\n  align-items: center;\n  margin-top: -5px;\n  ${({ theme }) => theme.message.reactionPicker.column.css}\n`;\n\nconst Emoji = styled.Text`\n  font-size: 20px;\n  margin-vertical: 5px;\n  ${({ theme }) => theme.message.reactionPicker.emoji.css}\n`;\n\nconst ReactionCount = styled.Text`\n  color: white;\n  font-size: 10px;\n  font-weight: bold;\n  ${({ theme }) => theme.message.reactionPicker.text.css}\n`;\n\nconst getLatestUser = <\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType\n>(\n  type: string,\n  reactions?: LatestReactions<At, Ch, Co, Me, Re, Us>,\n) => {\n  const filtered = reactions?.filter((item) => item.type === type);\n  if (filtered?.[0]?.user) {\n    return filtered[0].user;\n  }\n  return;\n};\n\nexport type ReactionPickerProps<\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType\n> = {\n  handleDismiss: () => void;\n  handleReaction: (arg: string) => void;\n  hideReactionCount: boolean;\n  hideReactionOwners: boolean;\n  latestReactions?: LatestReactions<At, Ch, Co, Me, Re, Us>;\n  reactionCounts?:\n    | MessageWithDates<At, Ch, Co, Me, Re, Us>['reaction_counts']\n    | null;\n  reactionPickerVisible?: boolean;\n  rpLeft?: number;\n  rpRight?: number;\n  rpTop?: number;\n  supportedReactions?: Reaction[];\n};\n\n// TODO: change from using Modal to reanimated view to save on rendering and performance\nexport const ReactionPicker = <\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends DefaultUserType = DefaultUserType\n>(\n  props: ReactionPickerProps<At, Ch, Co, Me, Re, Us>,\n) => {\n  const {\n    handleDismiss,\n    handleReaction,\n    hideReactionCount = false,\n    hideReactionOwners = false,\n    latestReactions,\n    reactionCounts,\n    reactionPickerVisible,\n    rpLeft,\n    rpRight,\n    rpTop = 40,\n    supportedReactions = emojiData,\n  } = props;\n\n  if (!reactionPickerVisible) return null;\n\n  return (\n    <Modal\n      animationType='fade'\n      onRequestClose={handleDismiss}\n      testID='reaction-picker'\n      transparent\n      visible\n    >\n      <Container\n        activeOpacity={1}\n        leftAlign={Boolean(rpLeft)}\n        onPress={handleDismiss}\n      >\n        <ContainerView\n          style={{\n            marginLeft: rpLeft,\n            marginRight: rpRight,\n            marginTop: rpTop,\n          }}\n        >\n          {supportedReactions.map(({ icon, id }) => {\n            const count = reactionCounts?.[id] || 0;\n            const latestUser = getLatestUser(id, latestReactions);\n\n            return (\n              <Column key={id} testID={id}>\n                {latestUser && !hideReactionOwners ? (\n                  <Avatar\n                    image={latestUser.image}\n                    name={latestUser.name || latestUser.id}\n                    size={18}\n                  />\n                ) : (\n                  !hideReactionOwners && (\n                    <View style={{ height: 18, width: 18 }} />\n                  )\n                )}\n                <Emoji\n                  onPress={() => handleReaction(id)}\n                  testID={`${id}-reaction`}\n                >\n                  {icon}\n                </Emoji>\n                {!hideReactionCount && (\n                  <ReactionCount testID={`${id}-${count || 'count'}`}>\n                    {count > 0 ? count : ''}\n                  </ReactionCount>\n                )}\n              </Column>\n            );\n          })}\n        </ContainerView>\n      </Container>\n    </Modal>\n  );\n};\n"]}