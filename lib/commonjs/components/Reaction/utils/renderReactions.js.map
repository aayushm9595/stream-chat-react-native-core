{"version":3,"sources":["renderReactions.tsx"],"names":["renderReactions","reactions","supportedReactions","reactionsByType","map","reaction","type","emojiDataByType","reactionTypes","supportedReaction","id","Object","keys","indexOf","icon"],"mappings":";;;;;;;;;AAAA;;AACA;;;;AAeO,IAAMA,eAAe,GAAG,SAAlBA,eAAkB,CAQ7BC,SAR6B,EAS7BC,kBAT6B,EAU1B;AACH,MAAMC,eAEL,GAAG,EAFJ;AAGAF,EAAAA,SAAS,QAAT,YAAAA,SAAS,CAAEG,GAAX,CAAe,UAACC,QAAD,EAAc;AAC3B,QAAI,CAACF,eAAe,CAACE,QAAQ,CAACC,IAAV,CAApB,EAAqC;AACnC,aAAQH,eAAe,CAACE,QAAQ,CAACC,IAAV,CAAf,GAAiC,CAACD,QAAD,CAAzC;AACD;;AACD,WAAQF,eAAe,CAACE,QAAQ,CAACC,IAAV,CAAf,iDACHH,eAAe,CAACE,QAAQ,CAACC,IAAV,CADZ,IAEND,QAFM,EAAR;AAID,GARD;AAUA,MAAME,eAA4C,GAAG,EAArD;AACA,MAAMC,aAAa,GAAGN,kBAAkB,CAACE,GAAnB,CAAuB,UAACK,iBAAD,EAAuB;AAClEF,IAAAA,eAAe,CAACE,iBAAiB,CAACC,EAAnB,CAAf,GAAwCD,iBAAxC;AACA,WAAOA,iBAAiB,CAACC,EAAzB;AACD,GAHqB,CAAtB;AAKA,SAAOC,MAAM,CAACC,IAAP,CAAYT,eAAZ,EAA6BC,GAA7B,CAAiC,UAACE,IAAD;AAAA,WACtCE,aAAa,CAACK,OAAd,CAAsBP,IAAtB,IAA8B,CAAC,CAA/B,GACE,gCAAC,iBAAD;AAAM,MAAA,GAAG,EAAEA,IAAX;AAAiB,MAAA,MAAM,EAAEA,IAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGC,eAAe,CAACD,IAAD,CAAf,CAAsBQ,IADzB,CADF,GAII,IALkC;AAAA,GAAjC,CAAP;AAOD,CArCM","sourcesContent":["import React from 'react';\nimport { Text } from 'react-native';\n\nimport type { ReactionResponse } from 'stream-chat';\n\nimport type { LatestReactions, Reaction } from '../ReactionList';\nimport type {\n  DefaultAttachmentType,\n  DefaultChannelType,\n  DefaultCommandType,\n  DefaultMessageType,\n  DefaultReactionType,\n  DefaultUserType,\n  UnknownType,\n} from '../../../types/types';\n\nexport const renderReactions = <\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType\n>(\n  reactions: LatestReactions<At, Ch, Co, Me, Re, Us>,\n  supportedReactions: Reaction[],\n) => {\n  const reactionsByType: {\n    [key: string]: ReactionResponse<Re, Us>[];\n  } = {};\n  reactions?.map((reaction) => {\n    if (!reactionsByType[reaction.type]) {\n      return (reactionsByType[reaction.type] = [reaction]);\n    }\n    return (reactionsByType[reaction.type] = [\n      ...reactionsByType[reaction.type],\n      reaction,\n    ]);\n  });\n\n  const emojiDataByType: { [key: string]: Reaction } = {};\n  const reactionTypes = supportedReactions.map((supportedReaction) => {\n    emojiDataByType[supportedReaction.id] = supportedReaction;\n    return supportedReaction.id;\n  });\n\n  return Object.keys(reactionsByType).map((type) =>\n    reactionTypes.indexOf(type) > -1 ? (\n      <Text key={type} testID={type}>\n        {emojiDataByType[type].icon}\n      </Text>\n    ) : null,\n  );\n};\n"]}