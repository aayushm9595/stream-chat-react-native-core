{"version":3,"sources":["useChannelTruncated.ts"],"names":["useChannelTruncated","onChannelTruncated","setChannels","setForceUpdate","client","handleEvent","event","count","on","off"],"mappings":";;;;;AAAA;;AAEA;;AAoCO,IAAMA,mBAAmB,GAAG,SAAtBA,mBAAsB,OAYW;AAAA,MAH5CC,kBAG4C,QAH5CA,kBAG4C;AAAA,MAF5CC,WAE4C,QAF5CA,WAE4C;AAAA,MAD5CC,cAC4C,QAD5CA,cAC4C;;AAAA,wBACzB,kCADyB;AAAA,MACpCC,MADoC,mBACpCA,MADoC;;AAG5C,wBAAU,YAAM;AACd,QAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD,EAA8C;AAChE,UAAI,OAAOL,kBAAP,KAA8B,UAAlC,EAA8C;AAC5CA,QAAAA,kBAAkB,CAACC,WAAD,EAAcI,KAAd,CAAlB;AACD;;AACDH,MAAAA,cAAc,CAAC,UAACI,KAAD;AAAA,eAAWA,KAAK,GAAG,CAAnB;AAAA,OAAD,CAAd;AACD,KALD;;AAOAH,IAAAA,MAAM,CAACI,EAAP,CAAU,mBAAV,EAA+BH,WAA/B;AACA,WAAO;AAAA,aAAMD,MAAM,CAACK,GAAP,CAAW,mBAAX,EAAgCJ,WAAhC,CAAN;AAAA,KAAP;AACD,GAVD,EAUG,EAVH;AAWD,CA1BM","sourcesContent":["import { useEffect } from 'react';\n\nimport { useChatContext } from '../../../../contexts/chatContext/ChatContext';\n\nimport type { Channel, Event } from 'stream-chat';\n\nimport type {\n  DefaultAttachmentType,\n  DefaultChannelType,\n  DefaultCommandType,\n  DefaultEventType,\n  DefaultMessageType,\n  DefaultReactionType,\n  DefaultUserType,\n  UnknownType,\n} from '../../../../types/types';\n\ntype Parameters<\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType\n> = {\n  setChannels: React.Dispatch<\n    React.SetStateAction<Channel<At, Ch, Co, Ev, Me, Re, Us>[]>\n  >;\n  setForceUpdate: React.Dispatch<React.SetStateAction<number>>;\n  onChannelTruncated?: (\n    setChannels: React.Dispatch<\n      React.SetStateAction<Channel<At, Ch, Co, Ev, Me, Re, Us>[]>\n    >,\n    event: Event<At, Ch, Co, Ev, Me, Re, Us>,\n  ) => void;\n};\n\nexport const useChannelTruncated = <\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType\n>({\n  onChannelTruncated,\n  setChannels,\n  setForceUpdate,\n}: Parameters<At, Ch, Co, Ev, Me, Re, Us>) => {\n  const { client } = useChatContext<At, Ch, Co, Ev, Me, Re, Us>();\n\n  useEffect(() => {\n    const handleEvent = (event: Event<At, Ch, Co, Ev, Me, Re, Us>) => {\n      if (typeof onChannelTruncated === 'function') {\n        onChannelTruncated(setChannels, event);\n      }\n      setForceUpdate((count) => count + 1);\n    };\n\n    client.on('channel.truncated', handleEvent);\n    return () => client.off('channel.truncated', handleEvent);\n  }, []);\n};\n"]}