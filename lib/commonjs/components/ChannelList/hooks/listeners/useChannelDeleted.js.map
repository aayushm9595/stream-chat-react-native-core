{"version":3,"sources":["useChannelDeleted.ts"],"names":["useChannelDeleted","onChannelDeleted","setChannels","client","handleEvent","event","channels","index","findIndex","channel","cid","splice","on","off"],"mappings":";;;;;;;;;AAAA;;AAEA;;AAmCO,IAAMA,iBAAiB,GAAG,SAApBA,iBAAoB,OAWa;AAAA,MAF5CC,gBAE4C,QAF5CA,gBAE4C;AAAA,MAD5CC,WAC4C,QAD5CA,WAC4C;;AAAA,wBACzB,kCADyB;AAAA,MACpCC,MADoC,mBACpCA,MADoC;;AAG5C,wBAAU,YAAM;AACd,QAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD,EAA8C;AAChE,UAAI,OAAOJ,gBAAP,KAA4B,UAAhC,EAA4C;AAC1CA,QAAAA,gBAAgB,CAACC,WAAD,EAAcG,KAAd,CAAhB;AACD,OAFD,MAEO;AACLH,QAAAA,WAAW,CAAC,UAACI,QAAD,EAAc;AACxB,cAAMC,KAAK,GAAGD,QAAQ,CAACE,SAAT,CACZ,UAACC,OAAD;AAAA;;AAAA,mBAAaA,OAAO,CAACC,GAAR,MAAiBL,KAAK,CAACK,GAAN,uBAAaL,KAAK,CAACI,OAAnB,qBAAa,eAAeC,GAA5B,CAAjB,CAAb;AAAA,WADY,CAAd;;AAGA,cAAIH,KAAK,IAAI,CAAb,EAAgB;AACdD,YAAAA,QAAQ,CAACK,MAAT,CAAgBJ,KAAhB,EAAuB,CAAvB;AACD;;AACD,qDAAWD,QAAX;AACD,SARU,CAAX;AASD;AACF,KAdD;;AAgBAH,IAAAA,MAAM,CAACS,EAAP,CAAU,iBAAV,EAA6BR,WAA7B;AACA,WAAO;AAAA,aAAMD,MAAM,CAACU,GAAP,CAAW,iBAAX,EAA8BT,WAA9B,CAAN;AAAA,KAAP;AACD,GAnBD,EAmBG,EAnBH;AAoBD,CAlCM","sourcesContent":["import { useEffect } from 'react';\n\nimport { useChatContext } from '../../../../contexts/chatContext/ChatContext';\n\nimport type { Channel, Event } from 'stream-chat';\n\nimport type {\n  DefaultAttachmentType,\n  DefaultChannelType,\n  DefaultCommandType,\n  DefaultEventType,\n  DefaultMessageType,\n  DefaultReactionType,\n  DefaultUserType,\n  UnknownType,\n} from '../../../../types/types';\n\ntype Parameters<\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType\n> = {\n  setChannels: React.Dispatch<\n    React.SetStateAction<Channel<At, Ch, Co, Ev, Me, Re, Us>[]>\n  >;\n  onChannelDeleted?: (\n    setChannels: React.Dispatch<\n      React.SetStateAction<Channel<At, Ch, Co, Ev, Me, Re, Us>[]>\n    >,\n    event: Event<At, Ch, Co, Ev, Me, Re, Us>,\n  ) => void;\n};\n\nexport const useChannelDeleted = <\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType\n>({\n  onChannelDeleted,\n  setChannels,\n}: Parameters<At, Ch, Co, Ev, Me, Re, Us>) => {\n  const { client } = useChatContext<At, Ch, Co, Ev, Me, Re, Us>();\n\n  useEffect(() => {\n    const handleEvent = (event: Event<At, Ch, Co, Ev, Me, Re, Us>) => {\n      if (typeof onChannelDeleted === 'function') {\n        onChannelDeleted(setChannels, event);\n      } else {\n        setChannels((channels) => {\n          const index = channels.findIndex(\n            (channel) => channel.cid === (event.cid || event.channel?.cid),\n          );\n          if (index >= 0) {\n            channels.splice(index, 1);\n          }\n          return [...channels];\n        });\n      }\n    };\n\n    client.on('channel.deleted', handleEvent);\n    return () => client.off('channel.deleted', handleEvent);\n  }, []);\n};\n"]}