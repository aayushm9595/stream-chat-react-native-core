{"version":3,"sources":["ChannelListMessenger.tsx"],"names":["ChannelListMessenger","props","additionalFlatListProps","channels","EmptyStateIndicator","EmptyStateIndicatorDefault","error","FooterLoadingIndicator","ChannelListFooterLoadingIndicator","forceUpdate","HeaderErrorIndicator","ChannelListHeaderErrorIndicator","HeaderNetworkDownIndicator","ChannelListHeaderNetworkDownIndicator","loadingChannels","LoadingErrorIndicator","LoadingErrorIndicatorDefault","LoadingIndicator","LoadingIndicatorDefault","loadingNextPage","loadMoreThreshold","loadNextPage","refreshing","refreshList","reloadList","setFlatListRef","isOnline","loading","setLoading","HeaderIndicator","renderItem","channel","length","flexGrow","item","cid","undefined","flex"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;;;;AAiGO,IAAMA,oBAAoB,GAAG,SAAvBA,oBAAuB,CASlCC,KATkC,EAU/B;AAAA,8BAqBCA,KArBD,CAEDC,uBAFC;AAAA,MAEDA,uBAFC,sCAEyB,EAFzB;AAAA,MAGDC,QAHC,GAqBCF,KArBD,CAGDE,QAHC;AAAA,8BAqBCF,KArBD,CAIDG,mBAJC;AAAA,MAIDA,mBAJC,sCAIqBC,wCAJrB;AAAA,MAKDC,KALC,GAqBCL,KArBD,CAKDK,KALC;AAAA,8BAqBCL,KArBD,CAMDM,sBANC;AAAA,MAMDA,sBANC,sCAMwBC,oEANxB;AAAA,MAODC,WAPC,GAqBCR,KArBD,CAODQ,WAPC;AAAA,8BAqBCR,KArBD,CAQDS,oBARC;AAAA,MAQDA,oBARC,sCAQsBC,gEARtB;AAAA,8BAqBCV,KArBD,CASDW,0BATC;AAAA,MASDA,0BATC,sCAS4BC,4EAT5B;AAAA,MAUDC,eAVC,GAqBCb,KArBD,CAUDa,eAVC;AAAA,8BAqBCb,KArBD,CAWDc,qBAXC;AAAA,MAWDA,qBAXC,sCAWuBC,4CAXvB;AAAA,8BAqBCf,KArBD,CAYDgB,gBAZC;AAAA,MAYDA,gBAZC,sCAYkBC,kCAZlB;AAAA,MAaDC,eAbC,GAqBClB,KArBD,CAaDkB,eAbC;AAAA,8BAqBClB,KArBD,CAeDmB,iBAfC;AAAA,MAeDA,iBAfC,sCAemB,CAfnB;AAAA,MAgBDC,YAhBC,GAqBCpB,KArBD,CAgBDoB,YAhBC;AAAA,MAiBDC,UAjBC,GAqBCrB,KArBD,CAiBDqB,UAjBC;AAAA,MAkBDC,WAlBC,GAqBCtB,KArBD,CAkBDsB,WAlBC;AAAA,MAmBDC,UAnBC,GAqBCvB,KArBD,CAmBDuB,UAnBC;AAAA,MAoBDC,cApBC,GAqBCxB,KArBD,CAoBDwB,cApBC;;AAAA,wBAuBkB,kCAvBlB;AAAA,MAuBKC,QAvBL,mBAuBKA,QAvBL;;AAAA,kBA8B2B,qBAAS,IAAT,CA9B3B;AAAA;AAAA,MA8BIC,OA9BJ;AAAA,MA8BaC,UA9Bb;;AA+BH,wBAAU,YAAM;AACdA,IAAAA,UAAU,CAAC,CAAC,CAACd,eAAH,CAAV;AACD,GAFD,EAEG,CAACA,eAAD,CAFH;;AAIA,MAAMe,eAAyB,GAAG,SAA5BA,eAA4B,GAAM;AACtC,QAAIf,eAAJ,EAAqB,OAAO,IAAP;;AAErB,QAAI,CAACY,QAAL,EAAe;AACb,aAAO,gCAAC,0BAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACD,KAFD,MAEO,IAAIpB,KAAJ,EAAW;AAChB,aAAO,gCAAC,oBAAD;AAAsB,QAAA,OAAO,EAAEiB,WAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACD;;AAED,WAAO,IAAP;AACD,GAVD;;AAYA,MAAMO,WAAU,GAAG,SAAbA,UAAa,CAACC,OAAD;AAAA,WACjB,gCAAC,8BAAD,gCAAgD9B,KAAhD;AAAuD,MAAA,OAAO,EAAE8B,OAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADiB;AAAA,GAAnB;;AAIA,MAAIzB,KAAK,IAAI,CAACgB,UAAV,IAAwB,CAACR,eAAzB,IAA4C,EAACX,QAAD,oBAACA,QAAQ,CAAE6B,MAAX,CAAhD,EAAmE;AACjE,WACE,gCAAC,qBAAD;AACE,MAAA,KAAK,EAAE1B,KADT;AAEE,MAAA,QAAQ,EAAC,SAFX;AAGE,MAAA,YAAY,EAAEe,YAHhB;AAIE,MAAA,KAAK,EAAEG,UAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAQD;;AAED,SACE,kEACE,gCAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,gCAAC,qBAAD;AACE,IAAA,qBAAqB,EAAE;AAAES,MAAAA,QAAQ,EAAE;AAAZ,KADzB;AAEE,IAAA,IAAI,EAAE9B,QAFR;AAGE,IAAA,SAAS,EAAEM,WAHb;AAIE,IAAA,YAAY,EAAE,sBAACyB,IAAD;AAAA,aAAUA,IAAI,CAACC,GAAf;AAAA,KAJhB;AAKE,IAAA,kBAAkB,EAChBR,OAAO,GACL,gCAAC,gBAAD;AAAkB,MAAA,QAAQ,EAAC,SAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADK,GAGL,gCAAC,mBAAD;AAAqB,MAAA,QAAQ,EAAC,SAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MATN;AAYE,IAAA,mBAAmB,EACjBR,eAAe,GAAG,gCAAC,sBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAH,GAAgCiB,SAbnD;AAeE,IAAA,YAAY,EAAEf,YAfhB;AAgBE,IAAA,qBAAqB,EAAED,iBAhBzB;AAiBE,IAAA,SAAS,EAAEG,WAjBb;AAkBE,IAAA,GAAG,EAAEE,cAlBP;AAmBE,IAAA,UAAU,EAAEH,UAnBd;AAoBE,IAAA,UAAU,EAAE;AAAA,UAAGY,IAAH,QAAGA,IAAH;AAAA,aAAcJ,WAAU,CAACI,IAAD,CAAxB;AAAA,KApBd;AAqBE,IAAA,KAAK,EAAE;AAAEG,MAAAA,IAAI,EAAE;AAAR,KArBT;AAsBE,IAAA,MAAM,EAAC;AAtBT,KAuBMnC,uBAvBN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAFF,CADF;AA8BD,CAtGM","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { FlatList } from 'react-native';\n\nimport { ChannelListFooterLoadingIndicator } from './ChannelListFooterLoadingIndicator';\nimport { ChannelListHeaderErrorIndicator } from './ChannelListHeaderErrorIndicator';\nimport { ChannelListHeaderNetworkDownIndicator } from './ChannelListHeaderNetworkDownIndicator';\nimport { ChannelPreview } from '../ChannelPreview/ChannelPreview';\nimport { EmptyStateIndicator as EmptyStateIndicatorDefault } from '../Indicators/EmptyStateIndicator';\nimport { LoadingErrorIndicator as LoadingErrorIndicatorDefault } from '../Indicators/LoadingErrorIndicator';\nimport { LoadingIndicator as LoadingIndicatorDefault } from '../Indicators/LoadingIndicator';\n\nimport { useChatContext } from '../../contexts/chatContext/ChatContext';\n\nimport type { Channel } from 'stream-chat';\n\nimport type { ChannelListProps } from './ChannelList';\n\nimport type {\n  DefaultAttachmentType,\n  DefaultChannelType,\n  DefaultCommandType,\n  DefaultEventType,\n  DefaultMessageType,\n  DefaultReactionType,\n  DefaultUserType,\n  UnknownType,\n} from '../../types/types';\n\nexport type ChannelListMessengerProps<\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType\n> = ChannelListProps<At, Ch, Co, Ev, Me, Re, Us> & {\n  /**\n   * Channels can be either an array of channels or a promise which resolves to an array of channels\n   */\n  channels: Channel<At, Ch, Co, Ev, Me, Re, Us>[];\n  /**\n   * Error in channels query, if any\n   * */\n  error?: boolean;\n  /**\n   * Incremental number change to force update the FlatList\n   */\n  forceUpdate?: number;\n  /**\n   * Whether or not the FlatList has another page to render\n   */\n  hasNextPage?: boolean;\n  /**\n   * Initial channels query loading state, triggers the LoadingIndicator\n   */\n  loadingChannels?: boolean;\n  /**\n   * Whether or not additional channels are being loaded, triggers the FooterLoadingIndicator\n   * */\n  loadingNextPage?: boolean;\n  /**\n   * Loads the next page of `channels`, which is present as a required prop\n   * */\n  loadNextPage?: () => Promise<void>;\n  /**\n   * Triggered when the channel list is refreshing, displays a loading spinner at the top of the list\n   * */\n  refreshing?: boolean;\n  /**\n   * Function to refresh the channel list that is similar to `reloadList`, but it doesn't wipe out existing channels\n   * from UI before loading the new ones\n   */\n  refreshList?: () => void | Promise<void>;\n\n  /**\n   * Removes all the existing channels from UI and loads fresh channels\n   * */\n  reloadList?: () => Promise<void>;\n  /**\n   * Function to set the currently active channel, acts as a bridge between ChannelList and Channel components\n   *\n   * @param channel A channel object\n   * */\n  setActiveChannel?: (channel: Channel<At, Ch, Co, Ev, Me, Re, Us>) => void;\n  /**\n   * Function to gain access to the inner FlatList ref\n   *\n   * **Example:**\n   *\n   * ```\n   * <ChannelListMessenger\n   *  setFlatListRef={(ref) => {\n   *    // Use ref for your own good\n   *  }}\n   * ```\n   */\n  setFlatListRef?: (\n    ref: FlatList<Channel<At, Ch, Co, Ev, Me, Re, Us>> | null,\n  ) => void;\n};\n\n/**\n * This UI component displays the preview list of channels and handles Channel navigation. It\n * receives all props from the ChannelList component.\n *\n * @example ./ChannelListMessenger.md\n */\nexport const ChannelListMessenger = <\n  At extends UnknownType = DefaultAttachmentType,\n  Ch extends UnknownType = DefaultChannelType,\n  Co extends string = DefaultCommandType,\n  Ev extends UnknownType = DefaultEventType,\n  Me extends UnknownType = DefaultMessageType,\n  Re extends UnknownType = DefaultReactionType,\n  Us extends UnknownType = DefaultUserType\n>(\n  props: ChannelListMessengerProps<At, Ch, Co, Ev, Me, Re, Us>,\n) => {\n  const {\n    additionalFlatListProps = {},\n    channels,\n    EmptyStateIndicator = EmptyStateIndicatorDefault,\n    error,\n    FooterLoadingIndicator = ChannelListFooterLoadingIndicator,\n    forceUpdate,\n    HeaderErrorIndicator = ChannelListHeaderErrorIndicator,\n    HeaderNetworkDownIndicator = ChannelListHeaderNetworkDownIndicator,\n    loadingChannels,\n    LoadingErrorIndicator = LoadingErrorIndicatorDefault,\n    LoadingIndicator = LoadingIndicatorDefault,\n    loadingNextPage,\n    // https://github.com/facebook/react-native/blob/a7a7970e543959e9db5281914d5f132beb01db8d/Libraries/Lists/VirtualizedList.js#L466\n    loadMoreThreshold = 2,\n    loadNextPage,\n    refreshing,\n    refreshList,\n    reloadList,\n    setFlatListRef,\n  } = props;\n\n  const { isOnline } = useChatContext<At, Ch, Co, Ev, Me, Re, Us>();\n\n  /**\n   * In order to prevent the EmptyStateIndicator component from showing up briefly on mount,\n   * we set the loading state one cycle behind to ensure the channels are set before the\n   * change to loadingChannels is registered.\n   */\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    setLoading(!!loadingChannels);\n  }, [loadingChannels]);\n\n  const HeaderIndicator: React.FC = () => {\n    if (loadingChannels) return null;\n\n    if (!isOnline) {\n      return <HeaderNetworkDownIndicator />;\n    } else if (error) {\n      return <HeaderErrorIndicator onPress={refreshList} />;\n    }\n\n    return null;\n  };\n\n  const renderItem = (channel: Channel<At, Ch, Co, Ev, Me, Re, Us>) => (\n    <ChannelPreview<At, Ch, Co, Ev, Me, Re, Us> {...props} channel={channel} />\n  );\n\n  if (error && !refreshing && !loadingChannels && !channels?.length) {\n    return (\n      <LoadingErrorIndicator\n        error={error}\n        listType='channel'\n        loadNextPage={loadNextPage}\n        retry={reloadList}\n      />\n    );\n  }\n\n  return (\n    <>\n      <HeaderIndicator />\n      <FlatList\n        contentContainerStyle={{ flexGrow: 1 }}\n        data={channels}\n        extraData={forceUpdate}\n        keyExtractor={(item) => item.cid}\n        ListEmptyComponent={\n          loading ? (\n            <LoadingIndicator listType='channel' />\n          ) : (\n            <EmptyStateIndicator listType='channel' />\n          )\n        }\n        ListFooterComponent={\n          loadingNextPage ? <FooterLoadingIndicator /> : undefined\n        }\n        onEndReached={loadNextPage}\n        onEndReachedThreshold={loadMoreThreshold}\n        onRefresh={refreshList}\n        ref={setFlatListRef}\n        refreshing={refreshing}\n        renderItem={({ item }) => renderItem(item)}\n        style={{ flex: 1 }}\n        testID='channel-list-messenger'\n        {...additionalFlatListProps}\n      />\n    </>\n  );\n};\n"]}