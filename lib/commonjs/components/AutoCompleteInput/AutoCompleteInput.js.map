{"version":3,"sources":["AutoCompleteInput.tsx"],"names":["InputBox","TextInput","theme","messageInput","inputBox","css","computeCaretPosition","token","startOfTokenPosition","length","isCommand","text","split","AutoCompleteInput","props","additionalTextInputProps","onChange","setInputBoxRef","triggerSettings","value","closeSuggestions","openSuggestions","updateSuggestionsContext","updateSuggestions","t","isTrackingStarted","selectionEnd","handleChange","fromUpdate","handleSuggestions","startTracking","trigger","current","Component","component","title","stopTracking","query","dataProvider","data","queryCallback","onSelect","item","onSelectSuggestion","handleSelectionChange","end","nativeEvent","selection","newTokenString","output","textToModify","slice","search","RegExp","newCaretPosition","modifiedText","substring","replace","callback","handleCommand","actualToken","trim","handleMentions","selectionEndProp","tokenMatch","match","lastToken","handleMentionsTrigger","Object","keys","find","setTimeout"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { TextInput } from 'react-native';\n\nimport {\n  isSuggestionUser,\n  Suggestion,\n  SuggestionCommand,\n  SuggestionUser,\n  useSuggestionsContext,\n} from '../../contexts/suggestionsContext/SuggestionsContext';\nimport { useTranslationContext } from '../../contexts/translationContext/TranslationContext';\nimport { styled } from '../../styles/styledComponents';\nimport { isMentionTrigger } from '../../utils/utils';\n\nimport type { TextInputProps, TextInput as TextInputType } from 'react-native';\n\nimport type {\n  DefaultCommandType,\n  DefaultUserType,\n  UnknownType,\n} from '../../types/types';\nimport type { Trigger, TriggerSettings } from '../../utils/utils';\n\nconst InputBox = styled(TextInput)`\n  flex: 1;\n  margin: -5px;\n  max-height: 60px;\n  ${({ theme }) => theme.messageInput.inputBox.css}\n`;\n\nconst computeCaretPosition = (token: string, startOfTokenPosition: number) =>\n  startOfTokenPosition + token.length;\n\nconst isCommand = (text: string) =>\n  text[0] === '/' && text.split(' ').length <= 1;\n\nexport type AutoCompleteInputProps<\n  Co extends string = DefaultCommandType,\n  Us extends UnknownType = DefaultUserType\n> = {\n  /**\n   * Additional props for underlying TextInput component. These props will be forwarded as is to the TextInput component.\n   *\n   * @see See https://reactnative.dev/docs/textinput#reference\n   */\n  additionalTextInputProps: TextInputProps;\n  /**\n   * Handling text change events in the parent\n   *\n   * @param {string} text\n   */\n  onChange: (text: string) => void;\n  /**\n   * Ref callback to set reference on input box\n   */\n  setInputBoxRef: (ref: TextInputType | null) => void;\n  /**\n   * Mapping of input triggers to the outputs to be displayed by the AutoCompleteInput\n   */\n  triggerSettings: TriggerSettings<Co, Us>;\n  /**\n   * Text value of the TextInput\n   */\n  value: string;\n};\n\nexport const AutoCompleteInput = <\n  Co extends string = DefaultCommandType,\n  Us extends UnknownType = DefaultUserType\n>(\n  props: AutoCompleteInputProps<Co, Us>,\n) => {\n  const {\n    additionalTextInputProps,\n    onChange,\n    setInputBoxRef,\n    triggerSettings,\n    value,\n  } = props;\n\n  const {\n    closeSuggestions,\n    openSuggestions,\n    updateSuggestions: updateSuggestionsContext,\n  } = useSuggestionsContext<Co, Us>();\n  const { t } = useTranslationContext();\n\n  const isTrackingStarted = useRef(false);\n  const selectionEnd = useRef(0);\n\n  const handleChange = (text: string, fromUpdate = false) => {\n    if (!fromUpdate) {\n      onChange(text);\n    } else {\n      handleSuggestions(text);\n    }\n  };\n\n  useEffect(() => {\n    handleChange(value, true);\n  }, [value]);\n\n  const startTracking = (trigger: Trigger) => {\n    isTrackingStarted.current = true;\n    const { component: Component, title } = triggerSettings[trigger];\n    openSuggestions(\n      title,\n      typeof Component === 'string' ? Component : <Component />,\n    );\n  };\n\n  const stopTracking = () => {\n    isTrackingStarted.current = false;\n    closeSuggestions();\n  };\n\n  const updateSuggestions = async ({\n    query,\n    trigger,\n  }: {\n    query: Suggestion['name'];\n    trigger: Trigger;\n  }) => {\n    if (isMentionTrigger(trigger)) {\n      await triggerSettings[trigger].dataProvider(\n        query as SuggestionUser<Us>['name'],\n        value,\n        (data, queryCallback) => {\n          if (query === queryCallback) {\n            updateSuggestionsContext({\n              data,\n              onSelect: (item) => onSelectSuggestion({ item, trigger }),\n            });\n          }\n        },\n      );\n    } else {\n      await triggerSettings[trigger].dataProvider(\n        query as SuggestionCommand<Co>['name'],\n        value,\n        (data, queryCallback) => {\n          if (query !== queryCallback) {\n            return;\n          }\n\n          updateSuggestionsContext({\n            data,\n            onSelect: (item) => onSelectSuggestion({ item, trigger }),\n          });\n        },\n      );\n    }\n  };\n\n  const handleSelectionChange: TextInputProps['onSelectionChange'] = ({\n    nativeEvent: {\n      selection: { end },\n    },\n  }) => {\n    selectionEnd.current = end;\n  };\n\n  const onSelectSuggestion = ({\n    item,\n    trigger,\n  }: {\n    item: Suggestion<Co, Us>;\n    trigger: Trigger;\n  }) => {\n    if (!trigger) {\n      return;\n    }\n\n    let newTokenString = '';\n    if (isMentionTrigger(trigger)) {\n      if (isSuggestionUser(item)) {\n        newTokenString = `${triggerSettings[trigger].output(item).text} `;\n      }\n    } else {\n      if (!isSuggestionUser(item)) {\n        newTokenString = `${triggerSettings[trigger].output(item).text} `;\n      }\n    }\n\n    const textToModify = value.slice(0, selectionEnd.current);\n\n    const startOfTokenPosition = textToModify.search(\n      /**\n       * It's important to escape the trigger char for chars like [, (,...\n       */\n      new RegExp(`\\\\${trigger}${`[^\\\\${trigger}${'\\\\s'}]`}*$`),\n    );\n\n    const newCaretPosition = computeCaretPosition(\n      newTokenString,\n      startOfTokenPosition,\n    );\n\n    const modifiedText = `${textToModify.substring(\n      0,\n      startOfTokenPosition,\n    )}${newTokenString}`;\n\n    stopTracking();\n    onChange(value.replace(textToModify, modifiedText));\n\n    selectionEnd.current = newCaretPosition || 0;\n\n    if (isMentionTrigger(trigger) && isSuggestionUser(item)) {\n      triggerSettings[trigger].callback(item);\n    }\n  };\n\n  const handleCommand = async (text: string) => {\n    if (!isCommand(text)) {\n      return false;\n    }\n\n    if (!isTrackingStarted.current) {\n      startTracking('/');\n    }\n    const actualToken = text.trim().slice(1);\n    await updateSuggestions({ query: actualToken, trigger: '/' });\n\n    return true;\n  };\n\n  const handleMentions = ({\n    selectionEnd: selectionEndProp,\n    text,\n  }: {\n    selectionEnd: number;\n    text: string;\n  }) => {\n    const tokenMatch = text\n      .slice(0, selectionEndProp)\n      .match(/(?!^|\\W)?[:@][^\\s]*\\s?[^\\s]*$/g);\n\n    const lastToken = tokenMatch && tokenMatch[tokenMatch.length - 1].trim();\n    const handleMentionsTrigger =\n      (lastToken &&\n        Object.keys(triggerSettings).find(\n          (trigger) => trigger === lastToken[0],\n        )) ||\n      null;\n\n    /*\n      if we lost the trigger token or there is no following character we want to close\n      the autocomplete\n    */\n    if (!lastToken || lastToken.length <= 0) {\n      stopTracking();\n      return;\n    }\n\n    const actualToken = lastToken.slice(1);\n\n    // if trigger is not configured step out from the function, otherwise proceed\n    if (!handleMentionsTrigger) {\n      return;\n    }\n\n    if (!isTrackingStarted.current) {\n      startTracking('@');\n    }\n\n    updateSuggestions({ query: actualToken, trigger: '@' });\n  };\n\n  const handleSuggestions = (text: string) => {\n    setTimeout(async () => {\n      if (\n        text.slice(selectionEnd.current - 1, selectionEnd.current) === ' ' &&\n        !isTrackingStarted.current\n      ) {\n        stopTracking();\n      } else if (!(await handleCommand(text))) {\n        handleMentions({ selectionEnd: selectionEnd.current, text });\n      }\n    }, 100);\n  };\n\n  return (\n    <InputBox\n      multiline\n      onChangeText={(text) => {\n        handleChange(text);\n      }}\n      onSelectionChange={handleSelectionChange}\n      placeholder={t('Write your message')}\n      ref={setInputBoxRef}\n      testID='auto-complete-text-input'\n      value={value}\n      {...additionalTextInputProps}\n    />\n  );\n};\n"]}