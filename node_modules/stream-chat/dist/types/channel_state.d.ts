import Immutable from 'seamless-immutable';
import { Channel } from './channel';
import { ChannelMemberResponse, ChannelMembership, Event, LiteralStringForUnion, MessageResponse, ReactionResponse, UnknownType, UserResponse } from './types';
/**
 * ChannelState - A container class for the channel state.
 */
export declare class ChannelState<AttachmentType extends UnknownType = UnknownType, ChannelType extends UnknownType = UnknownType, CommandType extends string = LiteralStringForUnion, EventType extends UnknownType = UnknownType, MessageType extends UnknownType = UnknownType, ReactionType extends UnknownType = UnknownType, UserType extends UnknownType = UnknownType> {
    _channel: Channel<AttachmentType, ChannelType, CommandType, EventType, MessageType, ReactionType, UserType>;
    watcher_count: number;
    typing: Immutable.ImmutableObject<{
        [key: string]: Immutable.Immutable<Event<AttachmentType, ChannelType, CommandType, EventType, MessageType, ReactionType, UserType>>;
    }>;
    read: Immutable.ImmutableObject<{
        [key: string]: Immutable.Immutable<{
            last_read: Date;
            user: UserResponse<UserType>;
        }>;
    }>;
    messages: Immutable.ImmutableArray<ReturnType<ChannelState<AttachmentType, ChannelType, CommandType, EventType, MessageType, ReactionType, UserType>['messageToImmutable']>>;
    threads: Immutable.ImmutableObject<{
        [key: string]: Immutable.ImmutableArray<ReturnType<ChannelState<AttachmentType, ChannelType, CommandType, EventType, MessageType, ReactionType, UserType>['messageToImmutable']>>;
    }>;
    mutedUsers: Immutable.ImmutableArray<UserResponse<UserType>>;
    watchers: Immutable.ImmutableObject<{
        [key: string]: Immutable.Immutable<UserResponse<UserType>>;
    }>;
    members: Immutable.ImmutableObject<{
        [key: string]: Immutable.Immutable<ChannelMemberResponse<UserType>>;
    }>;
    unreadCount: number;
    membership: Immutable.ImmutableObject<ChannelMembership<UserType>>;
    last_message_at: Date | null;
    constructor(channel: Channel<AttachmentType, ChannelType, CommandType, EventType, MessageType, ReactionType, UserType>);
    /**
     * addMessageSorted - Add a message to the state
     *
     * @param {MessageResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>} newMessage A new message
     * @param {boolean} timestampChanged Whether updating a message with changed created_at value.
     *
     */
    addMessageSorted(newMessage: MessageResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>, timestampChanged?: boolean): void;
    /**
     * messageToImmutable - Takes the message object. Parses the dates, sets __html
     * and sets the status to received if missing. Returns an immutable message object
     *
     * @param {MessageResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>} message an Immutable message object
     *
     */
    messageToImmutable(message: MessageResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>): Immutable.Immutable<MessageType & {
        id: string;
        attachments?: import("./types").Attachment<AttachmentType>[] | undefined;
        html?: string | undefined;
        mml?: string | undefined;
        parent_id?: string | undefined;
        show_in_channel?: boolean | undefined;
        text?: string | undefined;
        user?: UserResponse<UserType> | null | undefined;
        user_id?: string | undefined;
    } & {
        __html: string | undefined;
        created_at: Date;
        updated_at: Date;
        status: string;
        args?: string | undefined;
        channel?: import("./types").ChannelResponse<ChannelType, CommandType, UserType> | undefined;
        command?: string | undefined;
        command_info?: {
            name?: string | undefined;
        } | undefined;
        deleted_at?: string | undefined;
        latest_reactions?: ReactionResponse<ReactionType, UserType>[] | undefined;
        mentioned_users?: UserResponse<UserType>[] | undefined;
        own_reactions?: ReactionResponse<ReactionType, UserType>[] | null | undefined;
        reaction_counts?: {
            [key: string]: number;
        } | null | undefined;
        reaction_scores?: {
            [key: string]: number;
        } | null | undefined;
        reply_count?: number | undefined;
        shadowed?: boolean | undefined;
        silent?: boolean | undefined;
        type?: string | undefined;
        webhook_failed?: boolean | undefined;
        webhook_id?: string | undefined;
    }, {}>;
    /**
     * addMessagesSorted - Add the list of messages to state and resorts the messages
     *
     * @param {Array<MessageResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>>} newMessages A list of messages
     * @param {boolean} timestampChanged Whether updating messages with changed created_at value.
     * @param {boolean} initializing Whether channel is being initialized.
     *
     */
    addMessagesSorted(newMessages: MessageResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>[], timestampChanged?: boolean, initializing?: boolean): void;
    addReaction(reaction: ReactionResponse<ReactionType, UserType>, message?: MessageResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>): void;
    _addReactionToMessage(message: Immutable.Immutable<ReturnType<ChannelState<AttachmentType, ChannelType, CommandType, EventType, MessageType, ReactionType, UserType>['messageToImmutable']>>, reaction: ReactionResponse<ReactionType, UserType>): false | Immutable.ImmutableObject<Record<string, unknown> & {
        id: string;
        attachments?: import("./types").Attachment<AttachmentType>[] | undefined;
        html?: string | undefined;
        mml?: string | undefined;
        parent_id?: string | undefined;
        show_in_channel?: boolean | undefined;
        text?: string | undefined;
        user?: UserResponse<UserType> | null | undefined;
        user_id?: string | undefined;
    } & {
        __html: string | undefined;
        created_at: Date;
        updated_at: Date;
        status: string;
        args?: string | undefined;
        channel?: import("./types").ChannelResponse<ChannelType, CommandType, UserType> | undefined;
        command?: string | undefined;
        command_info?: {
            name?: string | undefined;
        } | undefined;
        deleted_at?: string | undefined;
        latest_reactions?: ReactionResponse<ReactionType, UserType>[] | undefined;
        mentioned_users?: UserResponse<UserType>[] | undefined;
        own_reactions?: ReactionResponse<ReactionType, UserType>[] | null | undefined;
        reaction_counts?: {
            [key: string]: number;
        } | null | undefined;
        reaction_scores?: {
            [key: string]: number;
        } | null | undefined;
        reply_count?: number | undefined;
        shadowed?: boolean | undefined;
        silent?: boolean | undefined;
        type?: string | undefined;
        webhook_failed?: boolean | undefined;
        webhook_id?: string | undefined;
    }>;
    _removeReactionFromMessage(message: Immutable.Immutable<ReturnType<ChannelState<AttachmentType, ChannelType, CommandType, EventType, MessageType, ReactionType, UserType>['messageToImmutable']>>, reaction: ReactionResponse<ReactionType, UserType>): Immutable.ImmutableObject<Record<string, unknown> & {
        id: string;
        attachments?: import("./types").Attachment<AttachmentType>[] | undefined;
        html?: string | undefined;
        mml?: string | undefined;
        parent_id?: string | undefined;
        show_in_channel?: boolean | undefined;
        text?: string | undefined;
        user?: UserResponse<UserType> | null | undefined;
        user_id?: string | undefined;
    } & {
        __html: string | undefined;
        created_at: Date;
        updated_at: Date;
        status: string;
        args?: string | undefined;
        channel?: import("./types").ChannelResponse<ChannelType, CommandType, UserType> | undefined;
        command?: string | undefined;
        command_info?: {
            name?: string | undefined;
        } | undefined;
        deleted_at?: string | undefined;
        latest_reactions?: ReactionResponse<ReactionType, UserType>[] | undefined;
        mentioned_users?: UserResponse<UserType>[] | undefined;
        own_reactions?: ReactionResponse<ReactionType, UserType>[] | null | undefined;
        reaction_counts?: {
            [key: string]: number;
        } | null | undefined;
        reaction_scores?: {
            [key: string]: number;
        } | null | undefined;
        reply_count?: number | undefined;
        shadowed?: boolean | undefined;
        silent?: boolean | undefined;
        type?: string | undefined;
        webhook_failed?: boolean | undefined;
        webhook_id?: string | undefined;
    }>;
    removeReaction(reaction: ReactionResponse<ReactionType, UserType>, message?: MessageResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>): void;
    /**
     * _addToMessageList - Adds a message to a list of messages, tries to update first, appends if message isn't found
     *
     * @param {Immutable.ImmutableArray<ReturnType<ChannelState<AttachmentType, ChannelType, CommandType, EventType, MessageType, ReactionType, UserType>['messageToImmutable']>>} messages A list of messages
     * @param {ReturnType<ChannelState<AttachmentType, ChannelType, CommandType, EventType, MessageType, ReactionType, UserType>['messageToImmutable']>} newMessage The new message
     * @param {boolean} timestampChanged Whether updating a message with changed created_at value.
     *
     */
    _addToMessageList(messages: Immutable.ImmutableArray<ReturnType<ChannelState<AttachmentType, ChannelType, CommandType, EventType, MessageType, ReactionType, UserType>['messageToImmutable']>>, message: ReturnType<ChannelState<AttachmentType, ChannelType, CommandType, EventType, MessageType, ReactionType, UserType>['messageToImmutable']>, timestampChanged?: boolean): any;
    /**
     * removeMessage - Description
     *
     * @param {{ id: string; parent_id?: string }} messageToRemove Object of the message to remove. Needs to have at id specified.
     *
     * @return {boolean} Returns if the message was removed
     */
    removeMessage(messageToRemove: {
        id: string;
        parent_id?: string;
    }): boolean;
    removeMessageFromArray: (msgArray: Immutable.ImmutableArray<ReturnType<ChannelState<AttachmentType, ChannelType, CommandType, EventType, MessageType, ReactionType, UserType>['messageToImmutable']>>, msg: {
        id: string;
        parent_id?: string;
    }) => {
        removed: boolean;
        result: Immutable.ImmutableArray<Immutable.Immutable<MessageType & {
            id: string;
            attachments?: import("./types").Attachment<AttachmentType>[] | undefined;
            html?: string | undefined;
            mml?: string | undefined;
            parent_id?: string | undefined;
            show_in_channel?: boolean | undefined;
            text?: string | undefined;
            user?: UserResponse<UserType> | null | undefined;
            user_id?: string | undefined;
        } & {
            __html: string | undefined;
            created_at: Date;
            updated_at: Date;
            status: string;
            args?: string | undefined;
            channel?: import("./types").ChannelResponse<ChannelType, CommandType, UserType> | undefined;
            command?: string | undefined;
            command_info?: {
                name?: string | undefined;
            } | undefined;
            deleted_at?: string | undefined;
            latest_reactions?: ReactionResponse<ReactionType, UserType>[] | undefined;
            mentioned_users?: UserResponse<UserType>[] | undefined;
            own_reactions?: ReactionResponse<ReactionType, UserType>[] | null | undefined;
            reaction_counts?: {
                [key: string]: number;
            } | null | undefined;
            reaction_scores?: {
                [key: string]: number;
            } | null | undefined;
            reply_count?: number | undefined;
            shadowed?: boolean | undefined;
            silent?: boolean | undefined;
            type?: string | undefined;
            webhook_failed?: boolean | undefined;
            webhook_id?: string | undefined;
        }, {}>>;
    };
    /**
     * filterErrorMessages - Removes error messages from the channel state.
     *
     */
    filterErrorMessages(): void;
    /**
     * clean - Remove stale data such as users that stayed in typing state for more than 5 seconds
     */
    clean(): void;
    clearMessages(): void;
}
//# sourceMappingURL=channel_state.d.ts.map