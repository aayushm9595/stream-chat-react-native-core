{"version":3,"file":"browser.full-bundle.min.js","sources":["../node_modules/base64-js/index.js","../src/base64.ts","../node_modules/@babel/runtime/helpers/extends.js","../node_modules/@babel/runtime/helpers/typeof.js","../node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js","../node_modules/@babel/runtime/helpers/objectWithoutProperties.js","../node_modules/@babel/runtime/helpers/arrayLikeToArray.js","../node_modules/@babel/runtime/helpers/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/iterableToArray.js","../node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js","../node_modules/@babel/runtime/helpers/nonIterableSpread.js","../node_modules/@babel/runtime/helpers/toConsumableArray.js","../node_modules/regenerator-runtime/runtime.js","../node_modules/@babel/runtime/helpers/asyncToGenerator.js","../node_modules/@babel/runtime/helpers/classCallCheck.js","../node_modules/@babel/runtime/helpers/createClass.js","../node_modules/@babel/runtime/helpers/defineProperty.js","../node_modules/axios/lib/helpers/bind.js","../node_modules/axios/lib/utils.js","../node_modules/axios/lib/helpers/buildURL.js","../node_modules/axios/lib/core/InterceptorManager.js","../node_modules/axios/lib/core/transformData.js","../node_modules/axios/lib/cancel/isCancel.js","../node_modules/axios/lib/helpers/normalizeHeaderName.js","../node_modules/axios/lib/core/createError.js","../node_modules/axios/lib/core/enhanceError.js","../node_modules/axios/lib/helpers/cookies.js","../node_modules/axios/lib/helpers/parseHeaders.js","../node_modules/axios/lib/helpers/isURLSameOrigin.js","../node_modules/axios/lib/adapters/xhr.js","../node_modules/axios/lib/core/buildFullPath.js","../node_modules/axios/lib/helpers/isAbsoluteURL.js","../node_modules/axios/lib/helpers/combineURLs.js","../node_modules/axios/lib/core/settle.js","../node_modules/axios/lib/defaults.js","../node_modules/axios/lib/core/dispatchRequest.js","../node_modules/axios/lib/core/mergeConfig.js","../node_modules/axios/lib/core/Axios.js","../node_modules/axios/lib/cancel/Cancel.js","../node_modules/axios/lib/cancel/CancelToken.js","../node_modules/axios/lib/axios.js","../node_modules/axios/lib/helpers/spread.js","../node_modules/axios/index.js","../node_modules/seamless-immutable/seamless-immutable.development.js","../node_modules/@babel/runtime/helpers/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/iterableToArrayLimit.js","../node_modules/@babel/runtime/helpers/nonIterableRest.js","../node_modules/@babel/runtime/helpers/slicedToArray.js","../src/channel_state.ts","../src/events.ts","../node_modules/form-data/lib/browser.js","../src/utils.ts","../src/channel.ts","../src/client_state.ts","../node_modules/isomorphic-ws/browser.js","../src/connection.ts","../src/signing.ts","../jsonwebtoken","../crypto","../src/token_manager.ts","../src/client.ts","../https","../src/permissions.ts"],"sourcesContent":["'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","import { fromByteArray } from 'base64-js';\n\nfunction isString<T>(arrayOrString: string | T[]): arrayOrString is string {\n  return typeof (arrayOrString as string) === 'string';\n}\n\ntype MapGenericCallback<T, U> = (value: T, index: number, array: T[]) => U;\ntype MapStringCallback<U> = (value: string, index: number, string: string) => U;\n\nfunction isMapStringCallback<T, U>(\n  arrayOrString: string | T[],\n  callback: MapGenericCallback<T, U> | MapStringCallback<U>,\n): callback is MapStringCallback<U> {\n  return callback && isString(arrayOrString);\n}\n\n// source - https://github.com/beatgammit/base64-js/blob/master/test/convert.js#L72\nfunction map<T, U>(array: T[], callback: MapGenericCallback<T, U>): U[];\nfunction map<U>(string: string, callback: MapStringCallback<U>): U[];\nfunction map<T, U>(\n  arrayOrString: string | T[],\n  callback: MapGenericCallback<T, U> | MapStringCallback<U>,\n): U[] {\n  const res = [];\n\n  if (isString(arrayOrString) && isMapStringCallback(arrayOrString, callback)) {\n    for (let k = 0, len = arrayOrString.length; k < len; k++) {\n      if (arrayOrString.charAt(k)) {\n        const kValue = arrayOrString.charAt(k);\n        const mappedValue = callback(kValue, k, arrayOrString);\n        res[k] = mappedValue;\n      }\n    }\n  } else if (!isString(arrayOrString) && !isMapStringCallback(arrayOrString, callback)) {\n    for (let k = 0, len = arrayOrString.length; k < len; k++) {\n      if (k in arrayOrString) {\n        const kValue = arrayOrString[k];\n        const mappedValue = callback(kValue, k, arrayOrString);\n        res[k] = mappedValue;\n      }\n    }\n  }\n\n  return res;\n}\n\nexport const encodeBase64 = (data: string): string =>\n  fromByteArray(new Uint8Array(map(data, (char) => char.charCodeAt(0))));\n\n// base-64 decoder throws exception if encoded string is not padded by '=' to make string length\n// in multiples of 4. So gonna use our own method for this purpose to keep backwards compatibility\n// https://github.com/beatgammit/base64-js/blob/master/index.js#L26\nexport const decodeBase64 = (s: string): string => {\n  const e = {} as { [key: string]: number },\n    w = String.fromCharCode,\n    L = s.length;\n  let i,\n    b = 0,\n    c,\n    x,\n    l = 0,\n    a,\n    r = '';\n  const A = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n  for (i = 0; i < 64; i++) {\n    e[A.charAt(i)] = i;\n  }\n  for (x = 0; x < L; x++) {\n    c = e[s.charAt(x)];\n    b = (b << 6) + c;\n    l += 6;\n    while (l >= 8) {\n      ((a = (b >>> (l -= 8)) & 0xff) || x < L - 2) && (r += w(a));\n    }\n  }\n  return r;\n};\n","function _extends() {\n  module.exports = _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nmodule.exports = _extends;","function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    module.exports = _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    module.exports = _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nmodule.exports = _typeof;","function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nmodule.exports = _objectWithoutPropertiesLoose;","var objectWithoutPropertiesLoose = require(\"./objectWithoutPropertiesLoose\");\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nmodule.exports = _objectWithoutProperties;","function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nmodule.exports = _arrayLikeToArray;","var arrayLikeToArray = require(\"./arrayLikeToArray\");\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}\n\nmodule.exports = _arrayWithoutHoles;","function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\n\nmodule.exports = _iterableToArray;","var arrayLikeToArray = require(\"./arrayLikeToArray\");\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}\n\nmodule.exports = _unsupportedIterableToArray;","function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nmodule.exports = _nonIterableSpread;","var arrayWithoutHoles = require(\"./arrayWithoutHoles\");\n\nvar iterableToArray = require(\"./iterableToArray\");\n\nvar unsupportedIterableToArray = require(\"./unsupportedIterableToArray\");\n\nvar nonIterableSpread = require(\"./nonIterableSpread\");\n\nfunction _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}\n\nmodule.exports = _toConsumableArray;","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nmodule.exports = _asyncToGenerator;","function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nmodule.exports = _classCallCheck;","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nmodule.exports = _createClass;","function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nmodule.exports = _defineProperty;","'use strict';\n\nmodule.exports = function bind(fn, thisArg) {\n  return function wrap() {\n    var args = new Array(arguments.length);\n    for (var i = 0; i < args.length; i++) {\n      args[i] = arguments[i];\n    }\n    return fn.apply(thisArg, args);\n  };\n};\n","'use strict';\n\nvar bind = require('./helpers/bind');\n\n/*global toString:true*/\n\n// utils is a library of generic helper functions non-specific to axios\n\nvar toString = Object.prototype.toString;\n\n/**\n * Determine if a value is an Array\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an Array, otherwise false\n */\nfunction isArray(val) {\n  return toString.call(val) === '[object Array]';\n}\n\n/**\n * Determine if a value is undefined\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if the value is undefined, otherwise false\n */\nfunction isUndefined(val) {\n  return typeof val === 'undefined';\n}\n\n/**\n * Determine if a value is a Buffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Buffer, otherwise false\n */\nfunction isBuffer(val) {\n  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)\n    && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);\n}\n\n/**\n * Determine if a value is an ArrayBuffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an ArrayBuffer, otherwise false\n */\nfunction isArrayBuffer(val) {\n  return toString.call(val) === '[object ArrayBuffer]';\n}\n\n/**\n * Determine if a value is a FormData\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an FormData, otherwise false\n */\nfunction isFormData(val) {\n  return (typeof FormData !== 'undefined') && (val instanceof FormData);\n}\n\n/**\n * Determine if a value is a view on an ArrayBuffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false\n */\nfunction isArrayBufferView(val) {\n  var result;\n  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {\n    result = ArrayBuffer.isView(val);\n  } else {\n    result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);\n  }\n  return result;\n}\n\n/**\n * Determine if a value is a String\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a String, otherwise false\n */\nfunction isString(val) {\n  return typeof val === 'string';\n}\n\n/**\n * Determine if a value is a Number\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Number, otherwise false\n */\nfunction isNumber(val) {\n  return typeof val === 'number';\n}\n\n/**\n * Determine if a value is an Object\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an Object, otherwise false\n */\nfunction isObject(val) {\n  return val !== null && typeof val === 'object';\n}\n\n/**\n * Determine if a value is a plain Object\n *\n * @param {Object} val The value to test\n * @return {boolean} True if value is a plain Object, otherwise false\n */\nfunction isPlainObject(val) {\n  if (toString.call(val) !== '[object Object]') {\n    return false;\n  }\n\n  var prototype = Object.getPrototypeOf(val);\n  return prototype === null || prototype === Object.prototype;\n}\n\n/**\n * Determine if a value is a Date\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Date, otherwise false\n */\nfunction isDate(val) {\n  return toString.call(val) === '[object Date]';\n}\n\n/**\n * Determine if a value is a File\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a File, otherwise false\n */\nfunction isFile(val) {\n  return toString.call(val) === '[object File]';\n}\n\n/**\n * Determine if a value is a Blob\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Blob, otherwise false\n */\nfunction isBlob(val) {\n  return toString.call(val) === '[object Blob]';\n}\n\n/**\n * Determine if a value is a Function\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Function, otherwise false\n */\nfunction isFunction(val) {\n  return toString.call(val) === '[object Function]';\n}\n\n/**\n * Determine if a value is a Stream\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Stream, otherwise false\n */\nfunction isStream(val) {\n  return isObject(val) && isFunction(val.pipe);\n}\n\n/**\n * Determine if a value is a URLSearchParams object\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a URLSearchParams object, otherwise false\n */\nfunction isURLSearchParams(val) {\n  return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;\n}\n\n/**\n * Trim excess whitespace off the beginning and end of a string\n *\n * @param {String} str The String to trim\n * @returns {String} The String freed of excess whitespace\n */\nfunction trim(str) {\n  return str.replace(/^\\s*/, '').replace(/\\s*$/, '');\n}\n\n/**\n * Determine if we're running in a standard browser environment\n *\n * This allows axios to run in a web worker, and react-native.\n * Both environments support XMLHttpRequest, but not fully standard globals.\n *\n * web workers:\n *  typeof window -> undefined\n *  typeof document -> undefined\n *\n * react-native:\n *  navigator.product -> 'ReactNative'\n * nativescript\n *  navigator.product -> 'NativeScript' or 'NS'\n */\nfunction isStandardBrowserEnv() {\n  if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' ||\n                                           navigator.product === 'NativeScript' ||\n                                           navigator.product === 'NS')) {\n    return false;\n  }\n  return (\n    typeof window !== 'undefined' &&\n    typeof document !== 'undefined'\n  );\n}\n\n/**\n * Iterate over an Array or an Object invoking a function for each item.\n *\n * If `obj` is an Array callback will be called passing\n * the value, index, and complete array for each item.\n *\n * If 'obj' is an Object callback will be called passing\n * the value, key, and complete object for each property.\n *\n * @param {Object|Array} obj The object to iterate\n * @param {Function} fn The callback to invoke for each item\n */\nfunction forEach(obj, fn) {\n  // Don't bother if no value provided\n  if (obj === null || typeof obj === 'undefined') {\n    return;\n  }\n\n  // Force an array if not already something iterable\n  if (typeof obj !== 'object') {\n    /*eslint no-param-reassign:0*/\n    obj = [obj];\n  }\n\n  if (isArray(obj)) {\n    // Iterate over array values\n    for (var i = 0, l = obj.length; i < l; i++) {\n      fn.call(null, obj[i], i, obj);\n    }\n  } else {\n    // Iterate over object keys\n    for (var key in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n        fn.call(null, obj[key], key, obj);\n      }\n    }\n  }\n}\n\n/**\n * Accepts varargs expecting each argument to be an object, then\n * immutably merges the properties of each object and returns result.\n *\n * When multiple objects contain the same key the later object in\n * the arguments list will take precedence.\n *\n * Example:\n *\n * ```js\n * var result = merge({foo: 123}, {foo: 456});\n * console.log(result.foo); // outputs 456\n * ```\n *\n * @param {Object} obj1 Object to merge\n * @returns {Object} Result of all merge properties\n */\nfunction merge(/* obj1, obj2, obj3, ... */) {\n  var result = {};\n  function assignValue(val, key) {\n    if (isPlainObject(result[key]) && isPlainObject(val)) {\n      result[key] = merge(result[key], val);\n    } else if (isPlainObject(val)) {\n      result[key] = merge({}, val);\n    } else if (isArray(val)) {\n      result[key] = val.slice();\n    } else {\n      result[key] = val;\n    }\n  }\n\n  for (var i = 0, l = arguments.length; i < l; i++) {\n    forEach(arguments[i], assignValue);\n  }\n  return result;\n}\n\n/**\n * Extends object a by mutably adding to it the properties of object b.\n *\n * @param {Object} a The object to be extended\n * @param {Object} b The object to copy properties from\n * @param {Object} thisArg The object to bind function to\n * @return {Object} The resulting value of object a\n */\nfunction extend(a, b, thisArg) {\n  forEach(b, function assignValue(val, key) {\n    if (thisArg && typeof val === 'function') {\n      a[key] = bind(val, thisArg);\n    } else {\n      a[key] = val;\n    }\n  });\n  return a;\n}\n\n/**\n * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)\n *\n * @param {string} content with BOM\n * @return {string} content value without BOM\n */\nfunction stripBOM(content) {\n  if (content.charCodeAt(0) === 0xFEFF) {\n    content = content.slice(1);\n  }\n  return content;\n}\n\nmodule.exports = {\n  isArray: isArray,\n  isArrayBuffer: isArrayBuffer,\n  isBuffer: isBuffer,\n  isFormData: isFormData,\n  isArrayBufferView: isArrayBufferView,\n  isString: isString,\n  isNumber: isNumber,\n  isObject: isObject,\n  isPlainObject: isPlainObject,\n  isUndefined: isUndefined,\n  isDate: isDate,\n  isFile: isFile,\n  isBlob: isBlob,\n  isFunction: isFunction,\n  isStream: isStream,\n  isURLSearchParams: isURLSearchParams,\n  isStandardBrowserEnv: isStandardBrowserEnv,\n  forEach: forEach,\n  merge: merge,\n  extend: extend,\n  trim: trim,\n  stripBOM: stripBOM\n};\n","'use strict';\n\nvar utils = require('./../utils');\n\nfunction encode(val) {\n  return encodeURIComponent(val).\n    replace(/%3A/gi, ':').\n    replace(/%24/g, '$').\n    replace(/%2C/gi, ',').\n    replace(/%20/g, '+').\n    replace(/%5B/gi, '[').\n    replace(/%5D/gi, ']');\n}\n\n/**\n * Build a URL by appending params to the end\n *\n * @param {string} url The base of the url (e.g., http://www.google.com)\n * @param {object} [params] The params to be appended\n * @returns {string} The formatted url\n */\nmodule.exports = function buildURL(url, params, paramsSerializer) {\n  /*eslint no-param-reassign:0*/\n  if (!params) {\n    return url;\n  }\n\n  var serializedParams;\n  if (paramsSerializer) {\n    serializedParams = paramsSerializer(params);\n  } else if (utils.isURLSearchParams(params)) {\n    serializedParams = params.toString();\n  } else {\n    var parts = [];\n\n    utils.forEach(params, function serialize(val, key) {\n      if (val === null || typeof val === 'undefined') {\n        return;\n      }\n\n      if (utils.isArray(val)) {\n        key = key + '[]';\n      } else {\n        val = [val];\n      }\n\n      utils.forEach(val, function parseValue(v) {\n        if (utils.isDate(v)) {\n          v = v.toISOString();\n        } else if (utils.isObject(v)) {\n          v = JSON.stringify(v);\n        }\n        parts.push(encode(key) + '=' + encode(v));\n      });\n    });\n\n    serializedParams = parts.join('&');\n  }\n\n  if (serializedParams) {\n    var hashmarkIndex = url.indexOf('#');\n    if (hashmarkIndex !== -1) {\n      url = url.slice(0, hashmarkIndex);\n    }\n\n    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;\n  }\n\n  return url;\n};\n","'use strict';\n\nvar utils = require('./../utils');\n\nfunction InterceptorManager() {\n  this.handlers = [];\n}\n\n/**\n * Add a new interceptor to the stack\n *\n * @param {Function} fulfilled The function to handle `then` for a `Promise`\n * @param {Function} rejected The function to handle `reject` for a `Promise`\n *\n * @return {Number} An ID used to remove interceptor later\n */\nInterceptorManager.prototype.use = function use(fulfilled, rejected) {\n  this.handlers.push({\n    fulfilled: fulfilled,\n    rejected: rejected\n  });\n  return this.handlers.length - 1;\n};\n\n/**\n * Remove an interceptor from the stack\n *\n * @param {Number} id The ID that was returned by `use`\n */\nInterceptorManager.prototype.eject = function eject(id) {\n  if (this.handlers[id]) {\n    this.handlers[id] = null;\n  }\n};\n\n/**\n * Iterate over all the registered interceptors\n *\n * This method is particularly useful for skipping over any\n * interceptors that may have become `null` calling `eject`.\n *\n * @param {Function} fn The function to call for each interceptor\n */\nInterceptorManager.prototype.forEach = function forEach(fn) {\n  utils.forEach(this.handlers, function forEachHandler(h) {\n    if (h !== null) {\n      fn(h);\n    }\n  });\n};\n\nmodule.exports = InterceptorManager;\n","'use strict';\n\nvar utils = require('./../utils');\n\n/**\n * Transform the data for a request or a response\n *\n * @param {Object|String} data The data to be transformed\n * @param {Array} headers The headers for the request or response\n * @param {Array|Function} fns A single function or Array of functions\n * @returns {*} The resulting transformed data\n */\nmodule.exports = function transformData(data, headers, fns) {\n  /*eslint no-param-reassign:0*/\n  utils.forEach(fns, function transform(fn) {\n    data = fn(data, headers);\n  });\n\n  return data;\n};\n","'use strict';\n\nmodule.exports = function isCancel(value) {\n  return !!(value && value.__CANCEL__);\n};\n","'use strict';\n\nvar utils = require('../utils');\n\nmodule.exports = function normalizeHeaderName(headers, normalizedName) {\n  utils.forEach(headers, function processHeader(value, name) {\n    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {\n      headers[normalizedName] = value;\n      delete headers[name];\n    }\n  });\n};\n","'use strict';\n\nvar enhanceError = require('./enhanceError');\n\n/**\n * Create an Error with the specified message, config, error code, request and response.\n *\n * @param {string} message The error message.\n * @param {Object} config The config.\n * @param {string} [code] The error code (for example, 'ECONNABORTED').\n * @param {Object} [request] The request.\n * @param {Object} [response] The response.\n * @returns {Error} The created error.\n */\nmodule.exports = function createError(message, config, code, request, response) {\n  var error = new Error(message);\n  return enhanceError(error, config, code, request, response);\n};\n","'use strict';\n\n/**\n * Update an Error with the specified config, error code, and response.\n *\n * @param {Error} error The error to update.\n * @param {Object} config The config.\n * @param {string} [code] The error code (for example, 'ECONNABORTED').\n * @param {Object} [request] The request.\n * @param {Object} [response] The response.\n * @returns {Error} The error.\n */\nmodule.exports = function enhanceError(error, config, code, request, response) {\n  error.config = config;\n  if (code) {\n    error.code = code;\n  }\n\n  error.request = request;\n  error.response = response;\n  error.isAxiosError = true;\n\n  error.toJSON = function toJSON() {\n    return {\n      // Standard\n      message: this.message,\n      name: this.name,\n      // Microsoft\n      description: this.description,\n      number: this.number,\n      // Mozilla\n      fileName: this.fileName,\n      lineNumber: this.lineNumber,\n      columnNumber: this.columnNumber,\n      stack: this.stack,\n      // Axios\n      config: this.config,\n      code: this.code\n    };\n  };\n  return error;\n};\n","'use strict';\n\nvar utils = require('./../utils');\n\nmodule.exports = (\n  utils.isStandardBrowserEnv() ?\n\n  // Standard browser envs support document.cookie\n    (function standardBrowserEnv() {\n      return {\n        write: function write(name, value, expires, path, domain, secure) {\n          var cookie = [];\n          cookie.push(name + '=' + encodeURIComponent(value));\n\n          if (utils.isNumber(expires)) {\n            cookie.push('expires=' + new Date(expires).toGMTString());\n          }\n\n          if (utils.isString(path)) {\n            cookie.push('path=' + path);\n          }\n\n          if (utils.isString(domain)) {\n            cookie.push('domain=' + domain);\n          }\n\n          if (secure === true) {\n            cookie.push('secure');\n          }\n\n          document.cookie = cookie.join('; ');\n        },\n\n        read: function read(name) {\n          var match = document.cookie.match(new RegExp('(^|;\\\\s*)(' + name + ')=([^;]*)'));\n          return (match ? decodeURIComponent(match[3]) : null);\n        },\n\n        remove: function remove(name) {\n          this.write(name, '', Date.now() - 86400000);\n        }\n      };\n    })() :\n\n  // Non standard browser env (web workers, react-native) lack needed support.\n    (function nonStandardBrowserEnv() {\n      return {\n        write: function write() {},\n        read: function read() { return null; },\n        remove: function remove() {}\n      };\n    })()\n);\n","'use strict';\n\nvar utils = require('./../utils');\n\n// Headers whose duplicates are ignored by node\n// c.f. https://nodejs.org/api/http.html#http_message_headers\nvar ignoreDuplicateOf = [\n  'age', 'authorization', 'content-length', 'content-type', 'etag',\n  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',\n  'last-modified', 'location', 'max-forwards', 'proxy-authorization',\n  'referer', 'retry-after', 'user-agent'\n];\n\n/**\n * Parse headers into an object\n *\n * ```\n * Date: Wed, 27 Aug 2014 08:58:49 GMT\n * Content-Type: application/json\n * Connection: keep-alive\n * Transfer-Encoding: chunked\n * ```\n *\n * @param {String} headers Headers needing to be parsed\n * @returns {Object} Headers parsed into an object\n */\nmodule.exports = function parseHeaders(headers) {\n  var parsed = {};\n  var key;\n  var val;\n  var i;\n\n  if (!headers) { return parsed; }\n\n  utils.forEach(headers.split('\\n'), function parser(line) {\n    i = line.indexOf(':');\n    key = utils.trim(line.substr(0, i)).toLowerCase();\n    val = utils.trim(line.substr(i + 1));\n\n    if (key) {\n      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {\n        return;\n      }\n      if (key === 'set-cookie') {\n        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);\n      } else {\n        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;\n      }\n    }\n  });\n\n  return parsed;\n};\n","'use strict';\n\nvar utils = require('./../utils');\n\nmodule.exports = (\n  utils.isStandardBrowserEnv() ?\n\n  // Standard browser envs have full support of the APIs needed to test\n  // whether the request URL is of the same origin as current location.\n    (function standardBrowserEnv() {\n      var msie = /(msie|trident)/i.test(navigator.userAgent);\n      var urlParsingNode = document.createElement('a');\n      var originURL;\n\n      /**\n    * Parse a URL to discover it's components\n    *\n    * @param {String} url The URL to be parsed\n    * @returns {Object}\n    */\n      function resolveURL(url) {\n        var href = url;\n\n        if (msie) {\n        // IE needs attribute set twice to normalize properties\n          urlParsingNode.setAttribute('href', href);\n          href = urlParsingNode.href;\n        }\n\n        urlParsingNode.setAttribute('href', href);\n\n        // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils\n        return {\n          href: urlParsingNode.href,\n          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',\n          host: urlParsingNode.host,\n          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\\?/, '') : '',\n          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',\n          hostname: urlParsingNode.hostname,\n          port: urlParsingNode.port,\n          pathname: (urlParsingNode.pathname.charAt(0) === '/') ?\n            urlParsingNode.pathname :\n            '/' + urlParsingNode.pathname\n        };\n      }\n\n      originURL = resolveURL(window.location.href);\n\n      /**\n    * Determine if a URL shares the same origin as the current location\n    *\n    * @param {String} requestURL The URL to test\n    * @returns {boolean} True if URL shares the same origin, otherwise false\n    */\n      return function isURLSameOrigin(requestURL) {\n        var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;\n        return (parsed.protocol === originURL.protocol &&\n            parsed.host === originURL.host);\n      };\n    })() :\n\n  // Non standard browser envs (web workers, react-native) lack needed support.\n    (function nonStandardBrowserEnv() {\n      return function isURLSameOrigin() {\n        return true;\n      };\n    })()\n);\n","'use strict';\n\nvar utils = require('./../utils');\nvar settle = require('./../core/settle');\nvar cookies = require('./../helpers/cookies');\nvar buildURL = require('./../helpers/buildURL');\nvar buildFullPath = require('../core/buildFullPath');\nvar parseHeaders = require('./../helpers/parseHeaders');\nvar isURLSameOrigin = require('./../helpers/isURLSameOrigin');\nvar createError = require('../core/createError');\n\nmodule.exports = function xhrAdapter(config) {\n  return new Promise(function dispatchXhrRequest(resolve, reject) {\n    var requestData = config.data;\n    var requestHeaders = config.headers;\n\n    if (utils.isFormData(requestData)) {\n      delete requestHeaders['Content-Type']; // Let the browser set it\n    }\n\n    var request = new XMLHttpRequest();\n\n    // HTTP basic authentication\n    if (config.auth) {\n      var username = config.auth.username || '';\n      var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';\n      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);\n    }\n\n    var fullPath = buildFullPath(config.baseURL, config.url);\n    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);\n\n    // Set the request timeout in MS\n    request.timeout = config.timeout;\n\n    // Listen for ready state\n    request.onreadystatechange = function handleLoad() {\n      if (!request || request.readyState !== 4) {\n        return;\n      }\n\n      // The request errored out and we didn't get a response, this will be\n      // handled by onerror instead\n      // With one exception: request that using file: protocol, most browsers\n      // will return status as 0 even though it's a successful request\n      if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {\n        return;\n      }\n\n      // Prepare the response\n      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;\n      var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;\n      var response = {\n        data: responseData,\n        status: request.status,\n        statusText: request.statusText,\n        headers: responseHeaders,\n        config: config,\n        request: request\n      };\n\n      settle(resolve, reject, response);\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle browser request cancellation (as opposed to a manual cancellation)\n    request.onabort = function handleAbort() {\n      if (!request) {\n        return;\n      }\n\n      reject(createError('Request aborted', config, 'ECONNABORTED', request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle low level network errors\n    request.onerror = function handleError() {\n      // Real errors are hidden from us by the browser\n      // onerror should only fire if it's a network error\n      reject(createError('Network Error', config, null, request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle timeout\n    request.ontimeout = function handleTimeout() {\n      var timeoutErrorMessage = 'timeout of ' + config.timeout + 'ms exceeded';\n      if (config.timeoutErrorMessage) {\n        timeoutErrorMessage = config.timeoutErrorMessage;\n      }\n      reject(createError(timeoutErrorMessage, config, 'ECONNABORTED',\n        request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Add xsrf header\n    // This is only done if running in a standard browser environment.\n    // Specifically not if we're in a web worker, or react-native.\n    if (utils.isStandardBrowserEnv()) {\n      // Add xsrf header\n      var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ?\n        cookies.read(config.xsrfCookieName) :\n        undefined;\n\n      if (xsrfValue) {\n        requestHeaders[config.xsrfHeaderName] = xsrfValue;\n      }\n    }\n\n    // Add headers to the request\n    if ('setRequestHeader' in request) {\n      utils.forEach(requestHeaders, function setRequestHeader(val, key) {\n        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {\n          // Remove Content-Type if data is undefined\n          delete requestHeaders[key];\n        } else {\n          // Otherwise add header to the request\n          request.setRequestHeader(key, val);\n        }\n      });\n    }\n\n    // Add withCredentials to request if needed\n    if (!utils.isUndefined(config.withCredentials)) {\n      request.withCredentials = !!config.withCredentials;\n    }\n\n    // Add responseType to request if needed\n    if (config.responseType) {\n      try {\n        request.responseType = config.responseType;\n      } catch (e) {\n        // Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.\n        // But, this can be suppressed for 'json' type as it can be parsed by default 'transformResponse' function.\n        if (config.responseType !== 'json') {\n          throw e;\n        }\n      }\n    }\n\n    // Handle progress if needed\n    if (typeof config.onDownloadProgress === 'function') {\n      request.addEventListener('progress', config.onDownloadProgress);\n    }\n\n    // Not all browsers support upload events\n    if (typeof config.onUploadProgress === 'function' && request.upload) {\n      request.upload.addEventListener('progress', config.onUploadProgress);\n    }\n\n    if (config.cancelToken) {\n      // Handle cancellation\n      config.cancelToken.promise.then(function onCanceled(cancel) {\n        if (!request) {\n          return;\n        }\n\n        request.abort();\n        reject(cancel);\n        // Clean up request\n        request = null;\n      });\n    }\n\n    if (!requestData) {\n      requestData = null;\n    }\n\n    // Send the request\n    request.send(requestData);\n  });\n};\n","'use strict';\n\nvar isAbsoluteURL = require('../helpers/isAbsoluteURL');\nvar combineURLs = require('../helpers/combineURLs');\n\n/**\n * Creates a new URL by combining the baseURL with the requestedURL,\n * only when the requestedURL is not already an absolute URL.\n * If the requestURL is absolute, this function returns the requestedURL untouched.\n *\n * @param {string} baseURL The base URL\n * @param {string} requestedURL Absolute or relative URL to combine\n * @returns {string} The combined full path\n */\nmodule.exports = function buildFullPath(baseURL, requestedURL) {\n  if (baseURL && !isAbsoluteURL(requestedURL)) {\n    return combineURLs(baseURL, requestedURL);\n  }\n  return requestedURL;\n};\n","'use strict';\n\n/**\n * Determines whether the specified URL is absolute\n *\n * @param {string} url The URL to test\n * @returns {boolean} True if the specified URL is absolute, otherwise false\n */\nmodule.exports = function isAbsoluteURL(url) {\n  // A URL is considered absolute if it begins with \"<scheme>://\" or \"//\" (protocol-relative URL).\n  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed\n  // by any combination of letters, digits, plus, period, or hyphen.\n  return /^([a-z][a-z\\d\\+\\-\\.]*:)?\\/\\//i.test(url);\n};\n","'use strict';\n\n/**\n * Creates a new URL by combining the specified URLs\n *\n * @param {string} baseURL The base URL\n * @param {string} relativeURL The relative URL\n * @returns {string} The combined URL\n */\nmodule.exports = function combineURLs(baseURL, relativeURL) {\n  return relativeURL\n    ? baseURL.replace(/\\/+$/, '') + '/' + relativeURL.replace(/^\\/+/, '')\n    : baseURL;\n};\n","'use strict';\n\nvar createError = require('./createError');\n\n/**\n * Resolve or reject a Promise based on response status.\n *\n * @param {Function} resolve A function that resolves the promise.\n * @param {Function} reject A function that rejects the promise.\n * @param {object} response The response.\n */\nmodule.exports = function settle(resolve, reject, response) {\n  var validateStatus = response.config.validateStatus;\n  if (!response.status || !validateStatus || validateStatus(response.status)) {\n    resolve(response);\n  } else {\n    reject(createError(\n      'Request failed with status code ' + response.status,\n      response.config,\n      null,\n      response.request,\n      response\n    ));\n  }\n};\n","'use strict';\n\nvar utils = require('./utils');\nvar normalizeHeaderName = require('./helpers/normalizeHeaderName');\n\nvar DEFAULT_CONTENT_TYPE = {\n  'Content-Type': 'application/x-www-form-urlencoded'\n};\n\nfunction setContentTypeIfUnset(headers, value) {\n  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {\n    headers['Content-Type'] = value;\n  }\n}\n\nfunction getDefaultAdapter() {\n  var adapter;\n  if (typeof XMLHttpRequest !== 'undefined') {\n    // For browsers use XHR adapter\n    adapter = require('./adapters/xhr');\n  } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {\n    // For node use HTTP adapter\n    adapter = require('./adapters/http');\n  }\n  return adapter;\n}\n\nvar defaults = {\n  adapter: getDefaultAdapter(),\n\n  transformRequest: [function transformRequest(data, headers) {\n    normalizeHeaderName(headers, 'Accept');\n    normalizeHeaderName(headers, 'Content-Type');\n    if (utils.isFormData(data) ||\n      utils.isArrayBuffer(data) ||\n      utils.isBuffer(data) ||\n      utils.isStream(data) ||\n      utils.isFile(data) ||\n      utils.isBlob(data)\n    ) {\n      return data;\n    }\n    if (utils.isArrayBufferView(data)) {\n      return data.buffer;\n    }\n    if (utils.isURLSearchParams(data)) {\n      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');\n      return data.toString();\n    }\n    if (utils.isObject(data)) {\n      setContentTypeIfUnset(headers, 'application/json;charset=utf-8');\n      return JSON.stringify(data);\n    }\n    return data;\n  }],\n\n  transformResponse: [function transformResponse(data) {\n    /*eslint no-param-reassign:0*/\n    if (typeof data === 'string') {\n      try {\n        data = JSON.parse(data);\n      } catch (e) { /* Ignore */ }\n    }\n    return data;\n  }],\n\n  /**\n   * A timeout in milliseconds to abort a request. If set to 0 (default) a\n   * timeout is not created.\n   */\n  timeout: 0,\n\n  xsrfCookieName: 'XSRF-TOKEN',\n  xsrfHeaderName: 'X-XSRF-TOKEN',\n\n  maxContentLength: -1,\n  maxBodyLength: -1,\n\n  validateStatus: function validateStatus(status) {\n    return status >= 200 && status < 300;\n  }\n};\n\ndefaults.headers = {\n  common: {\n    'Accept': 'application/json, text/plain, */*'\n  }\n};\n\nutils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {\n  defaults.headers[method] = {};\n});\n\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);\n});\n\nmodule.exports = defaults;\n","'use strict';\n\nvar utils = require('./../utils');\nvar transformData = require('./transformData');\nvar isCancel = require('../cancel/isCancel');\nvar defaults = require('../defaults');\n\n/**\n * Throws a `Cancel` if cancellation has been requested.\n */\nfunction throwIfCancellationRequested(config) {\n  if (config.cancelToken) {\n    config.cancelToken.throwIfRequested();\n  }\n}\n\n/**\n * Dispatch a request to the server using the configured adapter.\n *\n * @param {object} config The config that is to be used for the request\n * @returns {Promise} The Promise to be fulfilled\n */\nmodule.exports = function dispatchRequest(config) {\n  throwIfCancellationRequested(config);\n\n  // Ensure headers exist\n  config.headers = config.headers || {};\n\n  // Transform request data\n  config.data = transformData(\n    config.data,\n    config.headers,\n    config.transformRequest\n  );\n\n  // Flatten headers\n  config.headers = utils.merge(\n    config.headers.common || {},\n    config.headers[config.method] || {},\n    config.headers\n  );\n\n  utils.forEach(\n    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],\n    function cleanHeaderConfig(method) {\n      delete config.headers[method];\n    }\n  );\n\n  var adapter = config.adapter || defaults.adapter;\n\n  return adapter(config).then(function onAdapterResolution(response) {\n    throwIfCancellationRequested(config);\n\n    // Transform response data\n    response.data = transformData(\n      response.data,\n      response.headers,\n      config.transformResponse\n    );\n\n    return response;\n  }, function onAdapterRejection(reason) {\n    if (!isCancel(reason)) {\n      throwIfCancellationRequested(config);\n\n      // Transform response data\n      if (reason && reason.response) {\n        reason.response.data = transformData(\n          reason.response.data,\n          reason.response.headers,\n          config.transformResponse\n        );\n      }\n    }\n\n    return Promise.reject(reason);\n  });\n};\n","'use strict';\n\nvar utils = require('../utils');\n\n/**\n * Config-specific merge-function which creates a new config-object\n * by merging two configuration objects together.\n *\n * @param {Object} config1\n * @param {Object} config2\n * @returns {Object} New object resulting from merging config2 to config1\n */\nmodule.exports = function mergeConfig(config1, config2) {\n  // eslint-disable-next-line no-param-reassign\n  config2 = config2 || {};\n  var config = {};\n\n  var valueFromConfig2Keys = ['url', 'method', 'data'];\n  var mergeDeepPropertiesKeys = ['headers', 'auth', 'proxy', 'params'];\n  var defaultToConfig2Keys = [\n    'baseURL', 'transformRequest', 'transformResponse', 'paramsSerializer',\n    'timeout', 'timeoutMessage', 'withCredentials', 'adapter', 'responseType', 'xsrfCookieName',\n    'xsrfHeaderName', 'onUploadProgress', 'onDownloadProgress', 'decompress',\n    'maxContentLength', 'maxBodyLength', 'maxRedirects', 'transport', 'httpAgent',\n    'httpsAgent', 'cancelToken', 'socketPath', 'responseEncoding'\n  ];\n  var directMergeKeys = ['validateStatus'];\n\n  function getMergedValue(target, source) {\n    if (utils.isPlainObject(target) && utils.isPlainObject(source)) {\n      return utils.merge(target, source);\n    } else if (utils.isPlainObject(source)) {\n      return utils.merge({}, source);\n    } else if (utils.isArray(source)) {\n      return source.slice();\n    }\n    return source;\n  }\n\n  function mergeDeepProperties(prop) {\n    if (!utils.isUndefined(config2[prop])) {\n      config[prop] = getMergedValue(config1[prop], config2[prop]);\n    } else if (!utils.isUndefined(config1[prop])) {\n      config[prop] = getMergedValue(undefined, config1[prop]);\n    }\n  }\n\n  utils.forEach(valueFromConfig2Keys, function valueFromConfig2(prop) {\n    if (!utils.isUndefined(config2[prop])) {\n      config[prop] = getMergedValue(undefined, config2[prop]);\n    }\n  });\n\n  utils.forEach(mergeDeepPropertiesKeys, mergeDeepProperties);\n\n  utils.forEach(defaultToConfig2Keys, function defaultToConfig2(prop) {\n    if (!utils.isUndefined(config2[prop])) {\n      config[prop] = getMergedValue(undefined, config2[prop]);\n    } else if (!utils.isUndefined(config1[prop])) {\n      config[prop] = getMergedValue(undefined, config1[prop]);\n    }\n  });\n\n  utils.forEach(directMergeKeys, function merge(prop) {\n    if (prop in config2) {\n      config[prop] = getMergedValue(config1[prop], config2[prop]);\n    } else if (prop in config1) {\n      config[prop] = getMergedValue(undefined, config1[prop]);\n    }\n  });\n\n  var axiosKeys = valueFromConfig2Keys\n    .concat(mergeDeepPropertiesKeys)\n    .concat(defaultToConfig2Keys)\n    .concat(directMergeKeys);\n\n  var otherKeys = Object\n    .keys(config1)\n    .concat(Object.keys(config2))\n    .filter(function filterAxiosKeys(key) {\n      return axiosKeys.indexOf(key) === -1;\n    });\n\n  utils.forEach(otherKeys, mergeDeepProperties);\n\n  return config;\n};\n","'use strict';\n\nvar utils = require('./../utils');\nvar buildURL = require('../helpers/buildURL');\nvar InterceptorManager = require('./InterceptorManager');\nvar dispatchRequest = require('./dispatchRequest');\nvar mergeConfig = require('./mergeConfig');\n\n/**\n * Create a new instance of Axios\n *\n * @param {Object} instanceConfig The default config for the instance\n */\nfunction Axios(instanceConfig) {\n  this.defaults = instanceConfig;\n  this.interceptors = {\n    request: new InterceptorManager(),\n    response: new InterceptorManager()\n  };\n}\n\n/**\n * Dispatch a request\n *\n * @param {Object} config The config specific for this request (merged with this.defaults)\n */\nAxios.prototype.request = function request(config) {\n  /*eslint no-param-reassign:0*/\n  // Allow for axios('example/url'[, config]) a la fetch API\n  if (typeof config === 'string') {\n    config = arguments[1] || {};\n    config.url = arguments[0];\n  } else {\n    config = config || {};\n  }\n\n  config = mergeConfig(this.defaults, config);\n\n  // Set config.method\n  if (config.method) {\n    config.method = config.method.toLowerCase();\n  } else if (this.defaults.method) {\n    config.method = this.defaults.method.toLowerCase();\n  } else {\n    config.method = 'get';\n  }\n\n  // Hook up interceptors middleware\n  var chain = [dispatchRequest, undefined];\n  var promise = Promise.resolve(config);\n\n  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {\n    chain.unshift(interceptor.fulfilled, interceptor.rejected);\n  });\n\n  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {\n    chain.push(interceptor.fulfilled, interceptor.rejected);\n  });\n\n  while (chain.length) {\n    promise = promise.then(chain.shift(), chain.shift());\n  }\n\n  return promise;\n};\n\nAxios.prototype.getUri = function getUri(config) {\n  config = mergeConfig(this.defaults, config);\n  return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\\?/, '');\n};\n\n// Provide aliases for supported request methods\nutils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function(url, config) {\n    return this.request(mergeConfig(config || {}, {\n      method: method,\n      url: url,\n      data: (config || {}).data\n    }));\n  };\n});\n\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function(url, data, config) {\n    return this.request(mergeConfig(config || {}, {\n      method: method,\n      url: url,\n      data: data\n    }));\n  };\n});\n\nmodule.exports = Axios;\n","'use strict';\n\n/**\n * A `Cancel` is an object that is thrown when an operation is canceled.\n *\n * @class\n * @param {string=} message The message.\n */\nfunction Cancel(message) {\n  this.message = message;\n}\n\nCancel.prototype.toString = function toString() {\n  return 'Cancel' + (this.message ? ': ' + this.message : '');\n};\n\nCancel.prototype.__CANCEL__ = true;\n\nmodule.exports = Cancel;\n","'use strict';\n\nvar Cancel = require('./Cancel');\n\n/**\n * A `CancelToken` is an object that can be used to request cancellation of an operation.\n *\n * @class\n * @param {Function} executor The executor function.\n */\nfunction CancelToken(executor) {\n  if (typeof executor !== 'function') {\n    throw new TypeError('executor must be a function.');\n  }\n\n  var resolvePromise;\n  this.promise = new Promise(function promiseExecutor(resolve) {\n    resolvePromise = resolve;\n  });\n\n  var token = this;\n  executor(function cancel(message) {\n    if (token.reason) {\n      // Cancellation has already been requested\n      return;\n    }\n\n    token.reason = new Cancel(message);\n    resolvePromise(token.reason);\n  });\n}\n\n/**\n * Throws a `Cancel` if cancellation has been requested.\n */\nCancelToken.prototype.throwIfRequested = function throwIfRequested() {\n  if (this.reason) {\n    throw this.reason;\n  }\n};\n\n/**\n * Returns an object that contains a new `CancelToken` and a function that, when called,\n * cancels the `CancelToken`.\n */\nCancelToken.source = function source() {\n  var cancel;\n  var token = new CancelToken(function executor(c) {\n    cancel = c;\n  });\n  return {\n    token: token,\n    cancel: cancel\n  };\n};\n\nmodule.exports = CancelToken;\n","'use strict';\n\nvar utils = require('./utils');\nvar bind = require('./helpers/bind');\nvar Axios = require('./core/Axios');\nvar mergeConfig = require('./core/mergeConfig');\nvar defaults = require('./defaults');\n\n/**\n * Create an instance of Axios\n *\n * @param {Object} defaultConfig The default config for the instance\n * @return {Axios} A new instance of Axios\n */\nfunction createInstance(defaultConfig) {\n  var context = new Axios(defaultConfig);\n  var instance = bind(Axios.prototype.request, context);\n\n  // Copy axios.prototype to instance\n  utils.extend(instance, Axios.prototype, context);\n\n  // Copy context to instance\n  utils.extend(instance, context);\n\n  return instance;\n}\n\n// Create the default instance to be exported\nvar axios = createInstance(defaults);\n\n// Expose Axios class to allow class inheritance\naxios.Axios = Axios;\n\n// Factory for creating new instances\naxios.create = function create(instanceConfig) {\n  return createInstance(mergeConfig(axios.defaults, instanceConfig));\n};\n\n// Expose Cancel & CancelToken\naxios.Cancel = require('./cancel/Cancel');\naxios.CancelToken = require('./cancel/CancelToken');\naxios.isCancel = require('./cancel/isCancel');\n\n// Expose all/spread\naxios.all = function all(promises) {\n  return Promise.all(promises);\n};\naxios.spread = require('./helpers/spread');\n\nmodule.exports = axios;\n\n// Allow use of default import syntax in TypeScript\nmodule.exports.default = axios;\n","'use strict';\n\n/**\n * Syntactic sugar for invoking a function and expanding an array for arguments.\n *\n * Common use case would be to use `Function.prototype.apply`.\n *\n *  ```js\n *  function f(x, y, z) {}\n *  var args = [1, 2, 3];\n *  f.apply(null, args);\n *  ```\n *\n * With `spread` this example can be re-written.\n *\n *  ```js\n *  spread(function(x, y, z) {})([1, 2, 3]);\n *  ```\n *\n * @param {Function} callback\n * @returns {Function}\n */\nmodule.exports = function spread(callback) {\n  return function wrap(arr) {\n    return callback.apply(null, arr);\n  };\n};\n","module.exports = require('./lib/axios');","(function() {\n  \"use strict\";\n\nfunction immutableInit(config) {\n\n  // https://github.com/facebook/react/blob/v15.0.1/src/isomorphic/classic/element/ReactElement.js#L21\n  var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol.for && Symbol.for('react.element');\n  var REACT_ELEMENT_TYPE_FALLBACK = 0xeac7;\n\n  var globalConfig = {\n    use_static: false\n  };\n  if (isObject(config)) {\n      if (config.use_static !== undefined) {\n          globalConfig.use_static = Boolean(config.use_static);\n      }\n  }\n\n  function isObject(data) {\n    return (\n      typeof data === 'object' &&\n      !Array.isArray(data) &&\n      data !== null\n    );\n  }\n\n  function instantiateEmptyObject(obj) {\n      var prototype = Object.getPrototypeOf(obj);\n      if (!prototype) {\n          return {};\n      } else {\n          return Object.create(prototype);\n      }\n  }\n\n  function addPropertyTo(target, methodName, value) {\n    Object.defineProperty(target, methodName, {\n      enumerable: false,\n      configurable: false,\n      writable: false,\n      value: value\n    });\n  }\n\n  function banProperty(target, methodName) {\n    addPropertyTo(target, methodName, function() {\n      throw new ImmutableError(\"The \" + methodName +\n        \" method cannot be invoked on an Immutable data structure.\");\n    });\n  }\n\n  var immutabilityTag = \"__immutable_invariants_hold\";\n\n  function addImmutabilityTag(target) {\n    addPropertyTo(target, immutabilityTag, true);\n  }\n\n  function isImmutable(target) {\n    if (typeof target === \"object\") {\n      return target === null || Boolean(\n        Object.getOwnPropertyDescriptor(target, immutabilityTag)\n      );\n    } else {\n      // In JavaScript, only objects are even potentially mutable.\n      // strings, numbers, null, and undefined are all naturally immutable.\n      return true;\n    }\n  }\n\n  function isEqual(a, b) {\n    // Avoid false positives due to (NaN !== NaN) evaluating to true\n    return (a === b || (a !== a && b !== b));\n  }\n\n  function isMergableObject(target) {\n    return target !== null && typeof target === \"object\" && !(Array.isArray(target)) && !(target instanceof Date);\n  }\n\n  var mutatingObjectMethods = [\n    \"setPrototypeOf\"\n  ];\n\n  var nonMutatingObjectMethods = [\n    \"keys\"\n  ];\n\n  var mutatingArrayMethods = mutatingObjectMethods.concat([\n    \"push\", \"pop\", \"sort\", \"splice\", \"shift\", \"unshift\", \"reverse\"\n  ]);\n\n  var nonMutatingArrayMethods = nonMutatingObjectMethods.concat([\n    \"map\", \"filter\", \"slice\", \"concat\", \"reduce\", \"reduceRight\"\n  ]);\n\n  var mutatingDateMethods = mutatingObjectMethods.concat([\n    \"setDate\", \"setFullYear\", \"setHours\", \"setMilliseconds\", \"setMinutes\", \"setMonth\", \"setSeconds\",\n    \"setTime\", \"setUTCDate\", \"setUTCFullYear\", \"setUTCHours\", \"setUTCMilliseconds\", \"setUTCMinutes\",\n    \"setUTCMonth\", \"setUTCSeconds\", \"setYear\"\n  ]);\n\n  function ImmutableError(message) {\n    this.name = 'MyError';\n    this.message = message;\n    this.stack = (new Error()).stack;\n  }\n  ImmutableError.prototype = new Error();\n  ImmutableError.prototype.constructor = Error;\n\n  function makeImmutable(obj, bannedMethods) {\n    // Tag it so we can quickly tell it's immutable later.\n    addImmutabilityTag(obj);\n\n    if (\"development\" !== \"production\") {\n      // Make all mutating methods throw exceptions.\n      for (var index in bannedMethods) {\n        if (bannedMethods.hasOwnProperty(index)) {\n          banProperty(obj, bannedMethods[index]);\n        }\n      }\n\n      // Freeze it and return it.\n      Object.freeze(obj);\n    }\n\n    return obj;\n  }\n\n  function makeMethodReturnImmutable(obj, methodName) {\n    var currentMethod = obj[methodName];\n\n    addPropertyTo(obj, methodName, function() {\n      return Immutable(currentMethod.apply(obj, arguments));\n    });\n  }\n\n  function arraySet(idx, value, config) {\n    var deep          = config && config.deep;\n\n    if (idx in this) {\n      if (deep && this[idx] !== value && isMergableObject(value) && isMergableObject(this[idx])) {\n        value = Immutable.merge(this[idx], value, {deep: true, mode: 'replace'});\n      }\n      if (isEqual(this[idx], value)) {\n        return this;\n      }\n    }\n\n    var mutable = asMutableArray.call(this);\n    mutable[idx] = Immutable(value);\n    return makeImmutableArray(mutable);\n  }\n\n  var immutableEmptyArray = Immutable([]);\n\n  function arraySetIn(pth, value, config) {\n    var head = pth[0];\n\n    if (pth.length === 1) {\n      return arraySet.call(this, head, value, config);\n    } else {\n      var tail = pth.slice(1);\n      var thisHead = this[head];\n      var newValue;\n\n      if (typeof(thisHead) === \"object\" && thisHead !== null) {\n        // Might (validly) be object or array\n        newValue = Immutable.setIn(thisHead, tail, value);\n      } else {\n        var nextHead = tail[0];\n        // If the next path part is a number, then we are setting into an array, else an object.\n        if (nextHead !== '' && isFinite(nextHead)) {\n          newValue = arraySetIn.call(immutableEmptyArray, tail, value);\n        } else {\n          newValue = objectSetIn.call(immutableEmptyObject, tail, value);\n        }\n      }\n\n      if (head in this && thisHead === newValue) {\n        return this;\n      }\n\n      var mutable = asMutableArray.call(this);\n      mutable[head] = newValue;\n      return makeImmutableArray(mutable);\n    }\n  }\n\n  function makeImmutableArray(array) {\n    // Don't change their implementations, but wrap these functions to make sure\n    // they always return an immutable value.\n    for (var index in nonMutatingArrayMethods) {\n      if (nonMutatingArrayMethods.hasOwnProperty(index)) {\n        var methodName = nonMutatingArrayMethods[index];\n        makeMethodReturnImmutable(array, methodName);\n      }\n    }\n\n    if (!globalConfig.use_static) {\n      addPropertyTo(array, \"flatMap\",  flatMap);\n      addPropertyTo(array, \"asObject\", asObject);\n      addPropertyTo(array, \"asMutable\", asMutableArray);\n      addPropertyTo(array, \"set\", arraySet);\n      addPropertyTo(array, \"setIn\", arraySetIn);\n      addPropertyTo(array, \"update\", update);\n      addPropertyTo(array, \"updateIn\", updateIn);\n      addPropertyTo(array, \"getIn\", getIn);\n    }\n\n    for(var i = 0, length = array.length; i < length; i++) {\n      array[i] = Immutable(array[i]);\n    }\n\n    return makeImmutable(array, mutatingArrayMethods);\n  }\n\n  function makeImmutableDate(date) {\n    if (!globalConfig.use_static) {\n      addPropertyTo(date, \"asMutable\", asMutableDate);\n    }\n\n    return makeImmutable(date, mutatingDateMethods);\n  }\n\n  function asMutableDate() {\n    return new Date(this.getTime());\n  }\n\n  /**\n   * Effectively performs a map() over the elements in the array, using the\n   * provided iterator, except that whenever the iterator returns an array, that\n   * array's elements are added to the final result instead of the array itself.\n   *\n   * @param {function} iterator - The iterator function that will be invoked on each element in the array. It will receive three arguments: the current value, the current index, and the current object.\n   */\n  function flatMap(iterator) {\n    // Calling .flatMap() with no arguments is a no-op. Don't bother cloning.\n    if (arguments.length === 0) {\n      return this;\n    }\n\n    var result = [],\n        length = this.length,\n        index;\n\n    for (index = 0; index < length; index++) {\n      var iteratorResult = iterator(this[index], index, this);\n\n      if (Array.isArray(iteratorResult)) {\n        // Concatenate Array results into the return value we're building up.\n        result.push.apply(result, iteratorResult);\n      } else {\n        // Handle non-Array results the same way map() does.\n        result.push(iteratorResult);\n      }\n    }\n\n    return makeImmutableArray(result);\n  }\n\n  /**\n   * Returns an Immutable copy of the object without the given keys included.\n   *\n   * @param {array} keysToRemove - A list of strings representing the keys to exclude in the return value. Instead of providing a single array, this method can also be called by passing multiple strings as separate arguments.\n   */\n  function without(remove) {\n    // Calling .without() with no arguments is a no-op. Don't bother cloning.\n    if (typeof remove === \"undefined\" && arguments.length === 0) {\n      return this;\n    }\n\n    if (typeof remove !== \"function\") {\n      // If we weren't given an array, use the arguments list.\n      var keysToRemoveArray = (Array.isArray(remove)) ?\n         remove.slice() : Array.prototype.slice.call(arguments);\n\n      // Convert numeric keys to strings since that's how they'll\n      // come from the enumeration of the object.\n      keysToRemoveArray.forEach(function(el, idx, arr) {\n        if(typeof(el) === \"number\") {\n          arr[idx] = el.toString();\n        }\n      });\n\n      remove = function(val, key) {\n        return keysToRemoveArray.indexOf(key) !== -1;\n      };\n    }\n\n    var result = instantiateEmptyObject(this);\n\n    for (var key in this) {\n      if (this.hasOwnProperty(key) && remove(this[key], key) === false) {\n        result[key] = this[key];\n      }\n    }\n\n    return makeImmutableObject(result);\n  }\n\n  function asMutableArray(opts) {\n    var result = [], i, length;\n\n    if(opts && opts.deep) {\n      for(i = 0, length = this.length; i < length; i++) {\n        result.push(asDeepMutable(this[i]));\n      }\n    } else {\n      for(i = 0, length = this.length; i < length; i++) {\n        result.push(this[i]);\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Effectively performs a [map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map) over the elements in the array, expecting that the iterator function\n   * will return an array of two elements - the first representing a key, the other\n   * a value. Then returns an Immutable Object constructed of those keys and values.\n   *\n   * @param {function} iterator - A function which should return an array of two elements - the first representing the desired key, the other the desired value.\n   */\n  function asObject(iterator) {\n    // If no iterator was provided, assume the identity function\n    // (suggesting this array is already a list of key/value pairs.)\n    if (typeof iterator !== \"function\") {\n      iterator = function(value) { return value; };\n    }\n\n    var result = {},\n        length = this.length,\n        index;\n\n    for (index = 0; index < length; index++) {\n      var pair  = iterator(this[index], index, this),\n          key   = pair[0],\n          value = pair[1];\n\n      result[key] = value;\n    }\n\n    return makeImmutableObject(result);\n  }\n\n  function asDeepMutable(obj) {\n    if (\n      (!obj) ||\n      (typeof obj !== 'object') ||\n      (!Object.getOwnPropertyDescriptor(obj, immutabilityTag)) ||\n      (obj instanceof Date)\n    ) { return obj; }\n    return Immutable.asMutable(obj, {deep: true});\n  }\n\n  function quickCopy(src, dest) {\n    for (var key in src) {\n      if (Object.getOwnPropertyDescriptor(src, key)) {\n        dest[key] = src[key];\n      }\n    }\n\n    return dest;\n  }\n\n  /**\n   * Returns an Immutable Object containing the properties and values of both\n   * this object and the provided object, prioritizing the provided object's\n   * values whenever the same key is present in both objects.\n   *\n   * @param {object} other - The other object to merge. Multiple objects can be passed as an array. In such a case, the later an object appears in that list, the higher its priority.\n   * @param {object} config - Optional config object that contains settings. Supported settings are: {deep: true} for deep merge and {merger: mergerFunc} where mergerFunc is a function\n   *                          that takes a property from both objects. If anything is returned it overrides the normal merge behaviour.\n   */\n  function merge(other, config) {\n    // Calling .merge() with no arguments is a no-op. Don't bother cloning.\n    if (arguments.length === 0) {\n      return this;\n    }\n\n    if (other === null || (typeof other !== \"object\")) {\n      throw new TypeError(\"Immutable#merge can only be invoked with objects or arrays, not \" + JSON.stringify(other));\n    }\n\n    var receivedArray = (Array.isArray(other)),\n        deep          = config && config.deep,\n        mode          = config && config.mode || 'merge',\n        merger        = config && config.merger,\n        result;\n\n    // Use the given key to extract a value from the given object, then place\n    // that value in the result object under the same key. If that resulted\n    // in a change from this object's value at that key, set anyChanges = true.\n    function addToResult(currentObj, otherObj, key) {\n      var immutableValue = Immutable(otherObj[key]);\n      var mergerResult = merger && merger(currentObj[key], immutableValue, config);\n      var currentValue = currentObj[key];\n\n      if ((result !== undefined) ||\n        (mergerResult !== undefined) ||\n        (!currentObj.hasOwnProperty(key)) ||\n        !isEqual(immutableValue, currentValue)) {\n\n        var newValue;\n\n        if (mergerResult !== undefined) {\n          newValue = mergerResult;\n        } else if (deep && isMergableObject(currentValue) && isMergableObject(immutableValue)) {\n          newValue = Immutable.merge(currentValue, immutableValue, config);\n        } else {\n          newValue = immutableValue;\n        }\n\n        if (!isEqual(currentValue, newValue) || !currentObj.hasOwnProperty(key)) {\n          if (result === undefined) {\n            // Make a shallow clone of the current object.\n            result = quickCopy(currentObj, instantiateEmptyObject(currentObj));\n          }\n\n          result[key] = newValue;\n        }\n      }\n    }\n\n    function clearDroppedKeys(currentObj, otherObj) {\n      for (var key in currentObj) {\n        if (!otherObj.hasOwnProperty(key)) {\n          if (result === undefined) {\n            // Make a shallow clone of the current object.\n            result = quickCopy(currentObj, instantiateEmptyObject(currentObj));\n          }\n          delete result[key];\n        }\n      }\n    }\n\n    var key;\n\n    // Achieve prioritization by overriding previous values that get in the way.\n    if (!receivedArray) {\n      // The most common use case: just merge one object into the existing one.\n      for (key in other) {\n        if (Object.getOwnPropertyDescriptor(other, key)) {\n          addToResult(this, other, key);\n        }\n      }\n      if (mode === 'replace') {\n        clearDroppedKeys(this, other);\n      }\n    } else {\n      // We also accept an Array\n      for (var index = 0, length = other.length; index < length; index++) {\n        var otherFromArray = other[index];\n\n        for (key in otherFromArray) {\n          if (otherFromArray.hasOwnProperty(key)) {\n            addToResult(result !== undefined ? result : this, otherFromArray, key);\n          }\n        }\n      }\n    }\n\n    if (result === undefined) {\n      return this;\n    } else {\n      return makeImmutableObject(result);\n    }\n  }\n\n  function objectReplace(value, config) {\n    var deep          = config && config.deep;\n\n    // Calling .replace() with no arguments is a no-op. Don't bother cloning.\n    if (arguments.length === 0) {\n      return this;\n    }\n\n    if (value === null || typeof value !== \"object\") {\n      throw new TypeError(\"Immutable#replace can only be invoked with objects or arrays, not \" + JSON.stringify(value));\n    }\n\n    return Immutable.merge(this, value, {deep: deep, mode: 'replace'});\n  }\n\n  var immutableEmptyObject = Immutable({});\n\n  function objectSetIn(path, value, config) {\n    if (!(Array.isArray(path)) || path.length === 0) {\n      throw new TypeError(\"The first argument to Immutable#setIn must be an array containing at least one \\\"key\\\" string.\");\n    }\n\n    var head = path[0];\n    if (path.length === 1) {\n      return objectSet.call(this, head, value, config);\n    }\n\n    var tail = path.slice(1);\n    var newValue;\n    var thisHead = this[head];\n\n    if (this.hasOwnProperty(head) && typeof(thisHead) === \"object\" && thisHead !== null) {\n      // Might (validly) be object or array\n      newValue = Immutable.setIn(thisHead, tail, value);\n    } else {\n      newValue = objectSetIn.call(immutableEmptyObject, tail, value);\n    }\n\n    if (this.hasOwnProperty(head) && thisHead === newValue) {\n      return this;\n    }\n\n    var mutable = quickCopy(this, instantiateEmptyObject(this));\n    mutable[head] = newValue;\n    return makeImmutableObject(mutable);\n  }\n\n  function objectSet(property, value, config) {\n    var deep          = config && config.deep;\n\n    if (this.hasOwnProperty(property)) {\n      if (deep && this[property] !== value && isMergableObject(value) && isMergableObject(this[property])) {\n        value = Immutable.merge(this[property], value, {deep: true, mode: 'replace'});\n      }\n      if (isEqual(this[property], value)) {\n        return this;\n      }\n    }\n\n    var mutable = quickCopy(this, instantiateEmptyObject(this));\n    mutable[property] = Immutable(value);\n    return makeImmutableObject(mutable);\n  }\n\n  function update(property, updater) {\n    var restArgs = Array.prototype.slice.call(arguments, 2);\n    var initialVal = this[property];\n    return Immutable.set(this, property, updater.apply(initialVal, [initialVal].concat(restArgs)));\n  }\n\n  function getInPath(obj, path) {\n    /*jshint eqnull:true */\n    for (var i = 0, l = path.length; obj != null && i < l; i++) {\n      obj = obj[path[i]];\n    }\n\n    return (i && i == l) ? obj : undefined;\n  }\n\n  function updateIn(path, updater) {\n    var restArgs = Array.prototype.slice.call(arguments, 2);\n    var initialVal = getInPath(this, path);\n\n    return Immutable.setIn(this, path, updater.apply(initialVal, [initialVal].concat(restArgs)));\n  }\n\n  function getIn(path, defaultValue) {\n    var value = getInPath(this, path);\n    return value === undefined ? defaultValue : value;\n  }\n\n  function asMutableObject(opts) {\n    var result = instantiateEmptyObject(this), key;\n\n    if(opts && opts.deep) {\n      for (key in this) {\n        if (this.hasOwnProperty(key)) {\n          result[key] = asDeepMutable(this[key]);\n        }\n      }\n    } else {\n      for (key in this) {\n        if (this.hasOwnProperty(key)) {\n          result[key] = this[key];\n        }\n      }\n    }\n\n    return result;\n  }\n\n  // Creates plain object to be used for cloning\n  function instantiatePlainObject() {\n    return {};\n  }\n\n  // Finalizes an object with immutable methods, freezes it, and returns it.\n  function makeImmutableObject(obj) {\n    if (!globalConfig.use_static) {\n      addPropertyTo(obj, \"merge\", merge);\n      addPropertyTo(obj, \"replace\", objectReplace);\n      addPropertyTo(obj, \"without\", without);\n      addPropertyTo(obj, \"asMutable\", asMutableObject);\n      addPropertyTo(obj, \"set\", objectSet);\n      addPropertyTo(obj, \"setIn\", objectSetIn);\n      addPropertyTo(obj, \"update\", update);\n      addPropertyTo(obj, \"updateIn\", updateIn);\n      addPropertyTo(obj, \"getIn\", getIn);\n    }\n\n    return makeImmutable(obj, mutatingObjectMethods);\n  }\n\n  // Returns true if object is a valid react element\n  // https://github.com/facebook/react/blob/v15.0.1/src/isomorphic/classic/element/ReactElement.js#L326\n  function isReactElement(obj) {\n    return typeof obj === 'object' &&\n           obj !== null &&\n           (obj.$$typeof === REACT_ELEMENT_TYPE_FALLBACK || obj.$$typeof === REACT_ELEMENT_TYPE);\n  }\n\n  function isFileObject(obj) {\n    return typeof File !== 'undefined' &&\n           obj instanceof File;\n  }\n\n  function isBlobObject(obj) {\n    return typeof Blob !== 'undefined' &&\n           obj instanceof Blob;\n  }\n\n  function isPromise(obj) {\n    return typeof obj === 'object' &&\n           typeof obj.then === 'function';\n  }\n\n  function isError(obj) {\n    return obj instanceof Error;\n  }\n\n  function Immutable(obj, options, stackRemaining) {\n    if (isImmutable(obj) || isReactElement(obj) || isFileObject(obj) || isBlobObject(obj) || isError(obj)) {\n      return obj;\n    } else if (isPromise(obj)) {\n      return obj.then(Immutable);\n    } else if (Array.isArray(obj)) {\n      return makeImmutableArray(obj.slice());\n    } else if (obj instanceof Date) {\n      return makeImmutableDate(new Date(obj.getTime()));\n    } else {\n      // Don't freeze the object we were given; make a clone and use that.\n      var prototype = options && options.prototype;\n      var instantiateEmptyObject =\n        (!prototype || prototype === Object.prototype) ?\n          instantiatePlainObject : (function() { return Object.create(prototype); });\n      var clone = instantiateEmptyObject();\n\n      if (\"development\" !== \"production\") {\n        /*jshint eqnull:true */\n        if (stackRemaining == null) {\n          stackRemaining = 64;\n        }\n        if (stackRemaining <= 0) {\n          throw new ImmutableError(\"Attempt to construct Immutable from a deeply nested object was detected.\" +\n            \" Have you tried to wrap an object with circular references (e.g. React element)?\" +\n            \" See https://github.com/rtfeldman/seamless-immutable/wiki/Deeply-nested-object-was-detected for details.\");\n        }\n        stackRemaining -= 1;\n      }\n\n      for (var key in obj) {\n        if (Object.getOwnPropertyDescriptor(obj, key)) {\n          clone[key] = Immutable(obj[key], undefined, stackRemaining);\n        }\n      }\n\n      return makeImmutableObject(clone);\n    }\n  }\n\n  // Wrapper to allow the use of object methods as static methods of Immutable.\n  function toStatic(fn) {\n    function staticWrapper() {\n      var args = [].slice.call(arguments);\n      var self = args.shift();\n      return fn.apply(self, args);\n    }\n\n    return staticWrapper;\n  }\n\n  // Wrapper to allow the use of object methods as static methods of Immutable.\n  // with the additional condition of choosing which function to call depending\n  // if argument is an array or an object.\n  function toStaticObjectOrArray(fnObject, fnArray) {\n    function staticWrapper() {\n      var args = [].slice.call(arguments);\n      var self = args.shift();\n      if (Array.isArray(self)) {\n          return fnArray.apply(self, args);\n      } else {\n          return fnObject.apply(self, args);\n      }\n    }\n\n    return staticWrapper;\n  }\n\n  // Wrapper to allow the use of object methods as static methods of Immutable.\n  // with the additional condition of choosing which function to call depending\n  // if argument is an array or an object or a date.\n  function toStaticObjectOrDateOrArray(fnObject, fnArray, fnDate) {\n    function staticWrapper() {\n      var args = [].slice.call(arguments);\n      var self = args.shift();\n      if (Array.isArray(self)) {\n          return fnArray.apply(self, args);\n      } else if (self instanceof Date) {\n          return fnDate.apply(self, args);\n      } else {\n          return fnObject.apply(self, args);\n      }\n    }\n\n    return staticWrapper;\n  }\n\n  // Export the library\n  Immutable.from           = Immutable;\n  Immutable.isImmutable    = isImmutable;\n  Immutable.ImmutableError = ImmutableError;\n  Immutable.merge          = toStatic(merge);\n  Immutable.replace        = toStatic(objectReplace);\n  Immutable.without        = toStatic(without);\n  Immutable.asMutable      = toStaticObjectOrDateOrArray(asMutableObject, asMutableArray, asMutableDate);\n  Immutable.set            = toStaticObjectOrArray(objectSet, arraySet);\n  Immutable.setIn          = toStaticObjectOrArray(objectSetIn, arraySetIn);\n  Immutable.update         = toStatic(update);\n  Immutable.updateIn       = toStatic(updateIn);\n  Immutable.getIn          = toStatic(getIn);\n  Immutable.flatMap        = toStatic(flatMap);\n  Immutable.asObject       = toStatic(asObject);\n  if (!globalConfig.use_static) {\n      Immutable.static = immutableInit({\n          use_static: true\n      });\n  }\n\n  Object.freeze(Immutable);\n\n  return Immutable;\n}\n\n  var Immutable = immutableInit();\n  /* istanbul ignore if */\n  if (typeof define === 'function' && define.amd) {\n    define(function() {\n      return Immutable;\n    });\n  } else if (typeof module === \"object\") {\n    module.exports = Immutable;\n  } else if (typeof exports === \"object\") {\n    exports.Immutable = Immutable;\n  } else if (typeof window === \"object\") {\n    window.Immutable = Immutable;\n  } else if (typeof global === \"object\") {\n    global.Immutable = Immutable;\n  }\n})();\n","function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nmodule.exports = _arrayWithHoles;","function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nmodule.exports = _iterableToArrayLimit;","function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nmodule.exports = _nonIterableRest;","var arrayWithHoles = require(\"./arrayWithHoles\");\n\nvar iterableToArrayLimit = require(\"./iterableToArrayLimit\");\n\nvar unsupportedIterableToArray = require(\"./unsupportedIterableToArray\");\n\nvar nonIterableRest = require(\"./nonIterableRest\");\n\nfunction _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}\n\nmodule.exports = _slicedToArray;","import Immutable from 'seamless-immutable';\nimport { Channel } from './channel';\nimport {\n  ChannelMemberResponse,\n  ChannelMembership,\n  Event,\n  LiteralStringForUnion,\n  MessageResponse,\n  ReactionResponse,\n  UnknownType,\n  UserResponse,\n} from './types';\n\n/**\n * ChannelState - A container class for the channel state.\n */\nexport class ChannelState<\n  AttachmentType extends UnknownType = UnknownType,\n  ChannelType extends UnknownType = UnknownType,\n  CommandType extends string = LiteralStringForUnion,\n  EventType extends UnknownType = UnknownType,\n  MessageType extends UnknownType = UnknownType,\n  ReactionType extends UnknownType = UnknownType,\n  UserType extends UnknownType = UnknownType\n> {\n  _channel: Channel<\n    AttachmentType,\n    ChannelType,\n    CommandType,\n    EventType,\n    MessageType,\n    ReactionType,\n    UserType\n  >;\n  watcher_count: number;\n  typing: Immutable.ImmutableObject<{\n    [key: string]: Immutable.Immutable<\n      Event<\n        AttachmentType,\n        ChannelType,\n        CommandType,\n        EventType,\n        MessageType,\n        ReactionType,\n        UserType\n      >\n    >;\n  }>;\n  read: Immutable.ImmutableObject<{\n    [key: string]: Immutable.Immutable<{ last_read: Date; user: UserResponse<UserType> }>;\n  }>;\n  messages: Immutable.ImmutableArray<\n    ReturnType<\n      ChannelState<\n        AttachmentType,\n        ChannelType,\n        CommandType,\n        EventType,\n        MessageType,\n        ReactionType,\n        UserType\n      >['messageToImmutable']\n    >\n  >;\n  threads: Immutable.ImmutableObject<{\n    [key: string]: Immutable.ImmutableArray<\n      ReturnType<\n        ChannelState<\n          AttachmentType,\n          ChannelType,\n          CommandType,\n          EventType,\n          MessageType,\n          ReactionType,\n          UserType\n        >['messageToImmutable']\n      >\n    >;\n  }>;\n  mutedUsers: Immutable.ImmutableArray<UserResponse<UserType>>;\n  watchers: Immutable.ImmutableObject<{\n    [key: string]: Immutable.Immutable<UserResponse<UserType>>;\n  }>;\n  members: Immutable.ImmutableObject<{\n    [key: string]: Immutable.Immutable<ChannelMemberResponse<UserType>>;\n  }>;\n  unreadCount: number;\n  membership: Immutable.ImmutableObject<ChannelMembership<UserType>>;\n  last_message_at: Date | null;\n\n  constructor(\n    channel: Channel<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      EventType,\n      MessageType,\n      ReactionType,\n      UserType\n    >,\n  ) {\n    this._channel = channel;\n    this.watcher_count = 0;\n    this.typing = Immutable<{\n      [key: string]: Immutable.Immutable<\n        Event<\n          AttachmentType,\n          ChannelType,\n          CommandType,\n          EventType,\n          MessageType,\n          ReactionType,\n          UserType\n        >\n      >;\n    }>({});\n    this.read = Immutable<{\n      [key: string]: Immutable.Immutable<{\n        last_read: Date;\n        user: UserResponse<UserType>;\n      }>;\n    }>({});\n    this.messages = Immutable([]);\n    this.threads = Immutable<{\n      [key: string]: Immutable.ImmutableArray<\n        ReturnType<\n          ChannelState<\n            AttachmentType,\n            ChannelType,\n            CommandType,\n            EventType,\n            MessageType,\n            ReactionType,\n            UserType\n          >['messageToImmutable']\n        >\n      >;\n    }>({});\n    // a list of users to hide messages from\n    this.mutedUsers = Immutable([]);\n    this.watchers = Immutable<{\n      [key: string]: Immutable.Immutable<UserResponse<UserType>>;\n    }>({});\n    this.members = Immutable<{\n      [key: string]: Immutable.Immutable<ChannelMemberResponse<UserType>>;\n    }>({});\n    this.membership = Immutable<ChannelMembership<UserType>>({});\n    this.unreadCount = 0;\n    this.last_message_at =\n      channel?.state?.last_message_at != null\n        ? new Date(channel.state.last_message_at)\n        : null;\n  }\n\n  /**\n   * addMessageSorted - Add a message to the state\n   *\n   * @param {MessageResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>} newMessage A new message\n   * @param {boolean} timestampChanged Whether updating a message with changed created_at value.\n   *\n   */\n  addMessageSorted(\n    newMessage: MessageResponse<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      MessageType,\n      ReactionType,\n      UserType\n    >,\n    timestampChanged = false,\n  ) {\n    return this.addMessagesSorted([newMessage], timestampChanged);\n  }\n\n  /**\n   * messageToImmutable - Takes the message object. Parses the dates, sets __html\n   * and sets the status to received if missing. Returns an immutable message object\n   *\n   * @param {MessageResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>} message an Immutable message object\n   *\n   */\n  messageToImmutable(\n    message: MessageResponse<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      MessageType,\n      ReactionType,\n      UserType\n    >,\n  ) {\n    return Immutable({\n      ...message,\n      __html: message.html,\n      // parse the date..\n      created_at: message.created_at ? new Date(message.created_at) : new Date(),\n      updated_at: message.updated_at ? new Date(message.updated_at) : new Date(),\n      status: message.status || 'received',\n    });\n  }\n\n  /**\n   * addMessagesSorted - Add the list of messages to state and resorts the messages\n   *\n   * @param {Array<MessageResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>>} newMessages A list of messages\n   * @param {boolean} timestampChanged Whether updating messages with changed created_at value.\n   * @param {boolean} initializing Whether channel is being initialized.\n   *\n   */\n  addMessagesSorted(\n    newMessages: MessageResponse<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      MessageType,\n      ReactionType,\n      UserType\n    >[],\n    timestampChanged = false,\n    initializing = false,\n  ) {\n    for (let i = 0; i < newMessages.length; i += 1) {\n      const message = this.messageToImmutable(newMessages[i]);\n\n      if (initializing && message.id && this.threads[message.id]) {\n        // If we are initializing the state of channel (e.g., in case of connection recovery),\n        // then in that case we remove thread related to this message from threads object.\n        // This way we can ensure that we don't have any stale data in thread object\n        // and consumer can refetch the replies.\n        this.threads = this.threads.without(message.id);\n      }\n\n      if (!this.last_message_at) {\n        this.last_message_at = new Date(message.created_at.getTime());\n      }\n\n      if (message.created_at.getTime() > this.last_message_at.getTime()) {\n        this.last_message_at = new Date(message.created_at.getTime());\n      }\n\n      // update or append the messages...\n      const parentID = message.parent_id;\n\n      // add to the main message list\n      if (!parentID || message.show_in_channel) {\n        this.messages = this._addToMessageList(this.messages, message, timestampChanged);\n      }\n\n      // add to the thread if applicable..\n      if (parentID) {\n        const thread = this.threads[parentID] || Immutable([]);\n        const threadMessages = this._addToMessageList(thread, message, timestampChanged);\n        this.threads = this.threads.set(parentID, threadMessages);\n      }\n    }\n  }\n\n  addReaction(\n    reaction: ReactionResponse<ReactionType, UserType>,\n    message?: MessageResponse<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      MessageType,\n      ReactionType,\n      UserType\n    >,\n  ) {\n    const { messages } = this;\n    if (!message) return;\n    const { parent_id, show_in_channel } = message;\n\n    if (parent_id && this.threads[parent_id]) {\n      const thread = this.threads[parent_id];\n\n      for (let i = 0; i < thread.length; i++) {\n        const msg = thread[i];\n        const messageWithReaction = this._addReactionToMessage(msg, reaction);\n        if (!messageWithReaction) {\n          continue;\n        }\n\n        // @ts-expect-error - ImmutableArray.set exists in the documentation but not in the DefinitelyTyped types\n        this.threads = this.threads.set(parent_id, thread.set(i, messageWithReaction));\n        break;\n      }\n    }\n\n    if ((!show_in_channel && !parent_id) || show_in_channel) {\n      for (let i = 0; i < messages.length; i++) {\n        const msg = messages[i];\n        const messageWithReaction = this._addReactionToMessage(msg, reaction);\n        if (!messageWithReaction) {\n          continue;\n        }\n\n        // @ts-expect-error - ImmutableArray.set exists in the documentation but not in the DefinitelyTyped types\n        this.messages = messages.set(i, messageWithReaction);\n        break;\n      }\n    }\n  }\n\n  _addReactionToMessage(\n    message: Immutable.Immutable<\n      ReturnType<\n        ChannelState<\n          AttachmentType,\n          ChannelType,\n          CommandType,\n          EventType,\n          MessageType,\n          ReactionType,\n          UserType\n        >['messageToImmutable']\n      >\n    >,\n    reaction: ReactionResponse<ReactionType, UserType>,\n  ) {\n    const idMatch = !!message.id && message.id === reaction.message_id;\n\n    if (!idMatch) {\n      return false;\n    }\n\n    let newMessage = this._removeReactionFromMessage(message, reaction);\n    if (this._channel.getClient().userID === reaction.user?.id) {\n      newMessage = newMessage.update(\n        'own_reactions',\n        (old: ReactionResponse<ReactionType, UserType>[]) => old.concat([reaction]),\n      );\n    }\n    newMessage = newMessage.update(\n      'latest_reactions',\n      (old: ReactionResponse<ReactionType, UserType>[]) => old.concat([reaction]),\n    );\n\n    newMessage = newMessage.updateIn(['reaction_counts', reaction.type], (old: number) =>\n      old ? old + 1 : 1,\n    );\n\n    return newMessage;\n  }\n\n  _removeReactionFromMessage(\n    message: Immutable.Immutable<\n      ReturnType<\n        ChannelState<\n          AttachmentType,\n          ChannelType,\n          CommandType,\n          EventType,\n          MessageType,\n          ReactionType,\n          UserType\n        >['messageToImmutable']\n      >\n    >,\n    reaction: ReactionResponse<ReactionType, UserType>,\n  ) {\n    const filterReaction = (old: ReactionResponse<ReactionType, UserType>[]) =>\n      old.filter(\n        (item) => item.type !== reaction.type || item.user?.id !== reaction.user?.id,\n      );\n    let newMessage = message.update('own_reactions', filterReaction);\n    newMessage = newMessage.update('latest_reactions', filterReaction);\n    return newMessage;\n  }\n\n  removeReaction(\n    reaction: ReactionResponse<ReactionType, UserType>,\n    message?: MessageResponse<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      MessageType,\n      ReactionType,\n      UserType\n    >,\n  ) {\n    const { messages } = this;\n    if (!message) return;\n    const { parent_id, show_in_channel } = message;\n\n    if (parent_id && this.threads[parent_id]) {\n      const thread = this.threads[parent_id];\n      for (let i = 0; i < thread.length; i++) {\n        const msg = thread[i];\n        const idMatch = !!msg.id && msg.id === reaction.message_id;\n\n        if (!idMatch) {\n          continue;\n        }\n        let messageWithReaction = this._removeReactionFromMessage(msg, reaction);\n        messageWithReaction = messageWithReaction.updateIn(\n          ['reaction_counts', reaction.type],\n          (old: number) => (old ? old - 1 : 0),\n        );\n\n        // @ts-expect-error - ImmutableArray.set exists in the documentation but not in the DefinitelyTyped types\n        this.threads = this.threads.set(parent_id, thread.set(i, messageWithReaction));\n        break;\n      }\n    }\n    if ((!show_in_channel && !parent_id) || show_in_channel) {\n      for (let i = 0; i < messages.length; i++) {\n        const msg = messages[i];\n        const idMatch = !!msg.id && msg.id === reaction.message_id;\n\n        if (!idMatch) {\n          continue;\n        }\n        let messageWithReaction = this._removeReactionFromMessage(msg, reaction);\n        messageWithReaction = messageWithReaction.updateIn(\n          ['reaction_counts', reaction.type],\n          (old: number) => (old ? old - 1 : 0),\n        );\n\n        // @ts-expect-error - ImmutableArray.set exists in the documentation but not in the DefinitelyTyped types\n        this.messages = messages.set(i, messageWithReaction);\n        break;\n      }\n    }\n  }\n\n  /**\n   * _addToMessageList - Adds a message to a list of messages, tries to update first, appends if message isn't found\n   *\n   * @param {Immutable.ImmutableArray<ReturnType<ChannelState<AttachmentType, ChannelType, CommandType, EventType, MessageType, ReactionType, UserType>['messageToImmutable']>>} messages A list of messages\n   * @param {ReturnType<ChannelState<AttachmentType, ChannelType, CommandType, EventType, MessageType, ReactionType, UserType>['messageToImmutable']>} newMessage The new message\n   * @param {boolean} timestampChanged Whether updating a message with changed created_at value.\n   *\n   */\n  _addToMessageList(\n    messages: Immutable.ImmutableArray<\n      ReturnType<\n        ChannelState<\n          AttachmentType,\n          ChannelType,\n          CommandType,\n          EventType,\n          MessageType,\n          ReactionType,\n          UserType\n        >['messageToImmutable']\n      >\n    >,\n    message: ReturnType<\n      ChannelState<\n        AttachmentType,\n        ChannelType,\n        CommandType,\n        EventType,\n        MessageType,\n        ReactionType,\n        UserType\n      >['messageToImmutable']\n    >,\n    timestampChanged = false,\n  ) {\n    let messageArr = messages;\n\n    // if created_at has changed, message should be filtered and re-inserted in correct order\n    // slow op but usually this only happens for a message inserted to state before actual response with correct timestamp\n    if (timestampChanged) {\n      messageArr = messageArr.filter((msg) => !(msg.id && message.id === msg.id));\n    }\n\n    // for empty list just concat and return\n    if (messageArr.length === 0) return messageArr.concat(message);\n\n    const messageTime = message.created_at.getTime();\n\n    // if message is newer than last item in the list concat and return\n    if (messageArr[messageArr.length - 1].created_at.getTime() < messageTime)\n      return messageArr.concat(message);\n\n    // find the closest index to push the new message\n    let left = 0;\n    let middle = 0;\n    let right = messageArr.length - 1;\n    while (left <= right) {\n      middle = Math.floor((right + left) / 2);\n      if (messageArr[middle].created_at.getTime() <= messageTime) left = middle + 1;\n      else right = middle - 1;\n    }\n\n    // message already exists and not filtered due to timestampChanged, update and return\n    if (!timestampChanged && message.id) {\n      if (messageArr[left] && message.id === messageArr[left].id)\n        // @ts-expect-error - ImmutableArray.set exists in the documentation but not in the DefinitelyTyped types\n        return messageArr.set(left, message);\n\n      if (messageArr[left - 1] && message.id === messageArr[left - 1].id)\n        // @ts-expect-error - ImmutableArray.set exists in the documentation but not in the DefinitelyTyped types\n        return messageArr.set(left - 1, message);\n    }\n\n    const mutable = messageArr.asMutable() as Array<\n      ReturnType<\n        ChannelState<\n          AttachmentType,\n          ChannelType,\n          CommandType,\n          EventType,\n          MessageType,\n          ReactionType,\n          UserType\n        >['messageToImmutable']\n      >\n    >;\n    mutable.splice(left, 0, message);\n    return Immutable(mutable);\n  }\n\n  /**\n   * removeMessage - Description\n   *\n   * @param {{ id: string; parent_id?: string }} messageToRemove Object of the message to remove. Needs to have at id specified.\n   *\n   * @return {boolean} Returns if the message was removed\n   */\n  removeMessage(messageToRemove: { id: string; parent_id?: string }) {\n    let isRemoved = false;\n    if (messageToRemove.parent_id && this.threads[messageToRemove.parent_id]) {\n      const { removed, result: threadMessages } = this.removeMessageFromArray(\n        this.threads[messageToRemove.parent_id],\n        messageToRemove,\n      );\n\n      // @ts-expect-error - ImmutableArray.set exists in the documentation but not in the DefinitelyTyped types\n      this.threads = this.threads[messageToRemove.parent_id].set(\n        messageToRemove.parent_id,\n        threadMessages,\n      );\n      isRemoved = removed;\n    } else {\n      const { removed, result: messages } = this.removeMessageFromArray(\n        this.messages,\n        messageToRemove,\n      );\n      this.messages = messages;\n      isRemoved = removed;\n    }\n\n    return isRemoved;\n  }\n\n  removeMessageFromArray = (\n    msgArray: Immutable.ImmutableArray<\n      ReturnType<\n        ChannelState<\n          AttachmentType,\n          ChannelType,\n          CommandType,\n          EventType,\n          MessageType,\n          ReactionType,\n          UserType\n        >['messageToImmutable']\n      >\n    >,\n    msg: { id: string; parent_id?: string },\n  ) => {\n    const result = msgArray.filter(\n      (message) => !(!!message.id && !!msg.id && message.id === msg.id),\n    );\n\n    return { removed: result.length < msgArray.length, result };\n  };\n  /**\n   * filterErrorMessages - Removes error messages from the channel state.\n   *\n   */\n  filterErrorMessages() {\n    const filteredMessages = this.messages.filter((message) => message.type !== 'error');\n\n    this.messages = filteredMessages;\n  }\n\n  /**\n   * clean - Remove stale data such as users that stayed in typing state for more than 5 seconds\n   */\n  clean() {\n    const now = new Date();\n    // prevent old users from showing up as typing\n    for (const [userID, lastEvent] of Object.entries(this.typing)) {\n      const since =\n        typeof lastEvent.received_at === 'string' &&\n        now.getTime() - new Date(lastEvent.received_at).getTime();\n      if (since > 7000) {\n        this.typing = this.typing.without(userID);\n        this._channel.getClient().dispatchEvent({\n          type: 'typing.stop',\n          user: { id: userID },\n          cid: this._channel.cid,\n        } as Event<AttachmentType, ChannelType, CommandType, EventType, MessageType, ReactionType, UserType>);\n      }\n    }\n  }\n\n  clearMessages() {\n    this.messages = Immutable([]);\n  }\n}\n","export const EVENT_MAP = {\n  'channel.created': true,\n  'channel.deleted': true,\n  'channel.hidden': true,\n  'channel.muted': true,\n  'channel.truncated': true,\n  'channel.unmuted': true,\n  'channel.updated': true,\n  'channel.visible': true,\n  'health.check': true,\n  'member.added': true,\n  'member.removed': true,\n  'member.updated': true,\n  'message.deleted': true,\n  'message.new': true,\n  'message.read': true,\n  'message.updated': true,\n  'notification.added_to_channel': true,\n  'notification.channel_deleted': true,\n  'notification.channel_mutes_updated': true,\n  'notification.channel_truncated': true,\n  'notification.invite_accepted': true,\n  'notification.invite_rejected': true,\n  'notification.invited': true,\n  'notification.mark_read': true,\n  'notification.message_new': true,\n  'notification.mutes_updated': true,\n  'notification.removed_from_channel': true,\n  'reaction.deleted': true,\n  'reaction.new': true,\n  'reaction.updated': true,\n  'typing.start': true,\n  'typing.stop': true,\n  'user.banned': true,\n  'user.deleted': true,\n  'user.presence.changed': true,\n  'user.unbanned': true,\n  'user.updated': true,\n  'user.watching.start': true,\n  'user.watching.stop': true,\n\n  // local events\n  'connection.changed': true,\n  'connection.recovered': true,\n};\n\nconst IS_VALID_EVENT_MAP_TYPE = { ...EVENT_MAP, all: true };\n\nexport const isValidEventType = (eventType: string): boolean =>\n  IS_VALID_EVENT_MAP_TYPE[eventType as keyof typeof IS_VALID_EVENT_MAP_TYPE] || false;\n","/* eslint-env browser */\nmodule.exports = typeof self == 'object' ? self.FormData : window.FormData;\n","import FormData from 'form-data';\nimport { AscDesc, QuerySort } from './types';\n\n/**\n * logChatPromiseExecution - utility function for logging the execution of a promise..\n *  use this when you want to run the promise and handle errors by logging a warning\n *\n * @param {Promise<T>} promise The promise you want to run and log\n * @param {string} name    A descriptive name of what the promise does for log output\n *\n */\nexport function logChatPromiseExecution<T>(promise: Promise<T>, name: string) {\n  promise.then().catch((error) => {\n    console.warn(`failed to do ${name}, ran into error: `, error);\n  });\n}\n\nexport const sleep = (m: number): Promise<void> => new Promise((r) => setTimeout(r, m));\n\nexport function isFunction<T>(value: Function | T): value is Function {\n  return (\n    value &&\n    (Object.prototype.toString.call(value) === '[object Function]' ||\n      'function' === typeof value ||\n      value instanceof Function)\n  );\n}\n\nexport const chatCodes = {\n  TOKEN_EXPIRED: 40,\n  WS_CLOSED_SUCCESS: 1000,\n};\n\nfunction isReadableStream(obj: unknown): obj is NodeJS.ReadStream {\n  return (\n    obj !== null &&\n    typeof obj === 'object' &&\n    ((obj as NodeJS.ReadStream).readable ||\n      typeof (obj as NodeJS.ReadStream)._read === 'function')\n  );\n}\n\nfunction isBuffer(obj: unknown): obj is Buffer {\n  return (\n    obj != null &&\n    (obj as Buffer).constructor != null &&\n    // @ts-expect-error\n    typeof obj.constructor.isBuffer === 'function' &&\n    // @ts-expect-error\n    obj.constructor.isBuffer(obj)\n  );\n}\n\nfunction isFileWebAPI(uri: unknown): uri is File {\n  return typeof window !== 'undefined' && 'File' in window && uri instanceof File;\n}\n\nexport function addFileToFormData(\n  uri: string | NodeJS.ReadableStream | Buffer | File,\n  name?: string,\n  contentType?: string,\n) {\n  const data = new FormData();\n\n  if (isReadableStream(uri) || isBuffer(uri) || isFileWebAPI(uri)) {\n    if (name) data.append('file', uri, name);\n    else data.append('file', uri);\n  } else {\n    data.append('file', {\n      uri,\n      name: name || (uri as string).split('/').reverse()[0],\n      contentType: contentType || undefined,\n      type: contentType || undefined,\n    });\n  }\n\n  return data;\n}\n\nexport function normalizeQuerySort<T extends QuerySort>(sort: T) {\n  const sortFields = [];\n  const sortArr = Array.isArray(sort) ? sort : [sort];\n  for (const item of sortArr) {\n    const entries = (Object.entries(item) as unknown) as [\n      T extends (infer K)[] ? keyof K : keyof T,\n      AscDesc,\n    ][];\n    if (entries.length > 1) {\n      console.warn(\n        \"client._buildSort() - multiple fields in a single sort object detected. Object's field order is not guaranteed\",\n      );\n    }\n    for (const [field, direction] of entries) {\n      sortFields.push({ field, direction });\n    }\n  }\n  return sortFields;\n}\n\n/** adopted from https://github.com/ai/nanoid/blob/master/non-secure/index.js */\nconst alphabet = 'ModuleSymbhasOwnPr0123456789ABCDEFGHNRVfgctiUvzKqYTJkLxpZXIjQW';\nexport function randomId() {\n  let id = '';\n  for (let i = 0; i < 21; i++) {\n    id += alphabet[(Math.random() * 64) | 0];\n  }\n  return id;\n}\n","import Immutable from 'seamless-immutable';\nimport { ChannelState } from './channel_state';\nimport { isValidEventType } from './events';\nimport { logChatPromiseExecution, normalizeQuerySort } from './utils';\nimport { StreamChat } from './client';\nimport {\n  APIResponse,\n  BanUserOptions,\n  ChannelAPIResponse,\n  ChannelData,\n  ChannelMemberAPIResponse,\n  ChannelMemberResponse,\n  ChannelQueryOptions,\n  ChannelResponse,\n  DeleteChannelAPIResponse,\n  Event,\n  EventAPIResponse,\n  EventHandler,\n  EventTypes,\n  GetMultipleMessagesAPIResponse,\n  GetReactionsAPIResponse,\n  GetRepliesAPIResponse,\n  InviteOptions,\n  LiteralStringForUnion,\n  MarkReadOptions,\n  Message,\n  MessageFilters,\n  MuteChannelAPIResponse,\n  PaginationOptions,\n  Reaction,\n  ReactionAPIResponse,\n  SearchAPIResponse,\n  SendMessageAPIResponse,\n  TruncateChannelAPIResponse,\n  UnknownType,\n  UpdateChannelAPIResponse,\n  UserFilters,\n  UserResponse,\n  UserSort,\n} from './types';\n\n/**\n * Channel - The Channel class manages it's own state.\n */\nexport class Channel<\n  AttachmentType extends UnknownType = UnknownType,\n  ChannelType extends UnknownType = UnknownType,\n  CommandType extends string = LiteralStringForUnion,\n  EventType extends UnknownType = UnknownType,\n  MessageType extends UnknownType = UnknownType,\n  ReactionType extends UnknownType = UnknownType,\n  UserType extends UnknownType = UnknownType\n> {\n  _client: StreamChat<\n    AttachmentType,\n    ChannelType,\n    CommandType,\n    EventType,\n    MessageType,\n    ReactionType,\n    UserType\n  >;\n  type: string;\n  id: string | undefined;\n  data:\n    | ChannelData<ChannelType>\n    | ChannelResponse<ChannelType, CommandType, UserType>\n    | Immutable.Immutable<ChannelResponse<ChannelType, CommandType, UserType>>\n    | undefined;\n  _data: ChannelData<ChannelType> | ChannelResponse<ChannelType, CommandType, UserType>;\n  cid: string;\n  listeners: {\n    [key: string]: (\n      | string\n      | EventHandler<\n          AttachmentType,\n          ChannelType,\n          CommandType,\n          EventType,\n          MessageType,\n          ReactionType,\n          UserType\n        >\n    )[];\n  };\n  state: ChannelState<\n    AttachmentType,\n    ChannelType,\n    CommandType,\n    EventType,\n    MessageType,\n    ReactionType,\n    UserType\n  >;\n  initialized: boolean;\n  lastKeyStroke?: Date;\n  lastTypingEvent: Date | null;\n  isTyping: boolean;\n  disconnected: boolean;\n\n  /**\n   * constructor - Create a channel\n   *\n   * @param {StreamChat<AttachmentType, ChannelType, CommandType, EventType, MessageType, ReactionType, UserType>} client the chat client\n   * @param {string} type  the type of channel\n   * @param {string} [id]  the id of the chat\n   * @param {ChannelData<ChannelType>} data any additional custom params\n   *\n   * @return {Channel<AttachmentType, ChannelType, CommandType, EventType, MessageType, ReactionType, UserType>} Returns a new uninitialized channel\n   */\n  constructor(\n    client: StreamChat<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      EventType,\n      MessageType,\n      ReactionType,\n      UserType\n    >,\n    type: string,\n    id: string | undefined,\n    data: ChannelData<ChannelType>,\n  ) {\n    const validTypeRe = /^[\\w_-]+$/;\n    const validIDRe = /^[\\w!_-]+$/;\n\n    if (!validTypeRe.test(type)) {\n      throw new Error(`Invalid chat type ${type}, letters, numbers and \"_-\" are allowed`);\n    }\n    if (typeof id === 'string' && !validIDRe.test(id)) {\n      throw new Error(`Invalid chat id ${id}, letters, numbers and \"!-_\" are allowed`);\n    }\n\n    this._client = client;\n    this.type = type;\n    this.id = id;\n    // used by the frontend, gets updated:\n    this.data = data;\n    // this._data is used for the requests...\n    this._data = { ...data };\n    this.cid = `${type}:${id}`;\n    this.listeners = {};\n    // perhaps the state variable should be private\n    this.state = new ChannelState<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      EventType,\n      MessageType,\n      ReactionType,\n      UserType\n    >(this);\n    this.initialized = false;\n    this.lastTypingEvent = null;\n    this.isTyping = false;\n    this.disconnected = false;\n  }\n\n  /**\n   * getClient - Get the chat client for this channel. If client.disconnect() was called, this function will error\n   *\n   * @return {StreamChat<AttachmentType, ChannelType, CommandType, EventType, MessageType, ReactionType, UserType>}\n   */\n  getClient(): StreamChat<\n    AttachmentType,\n    ChannelType,\n    CommandType,\n    EventType,\n    MessageType,\n    ReactionType,\n    UserType\n  > {\n    if (this.disconnected === true) {\n      throw Error(`You can't use a channel after client.disconnect() was called`);\n    }\n    return this._client;\n  }\n\n  /**\n   * getConfig - Get the configs for this channel type\n   *\n   * @return {Record<string, unknown>}\n   */\n  getConfig() {\n    const client = this.getClient();\n    return client.configs[this.type];\n  }\n\n  /**\n   * sendMessage - Send a message to this channel\n   *\n   * @param {Message<AttachmentType, MessageType, UserType>} message The Message object\n   *\n   * @return {Promise<SendMessageAPIResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>>} The Server Response\n   */\n  async sendMessage(message: Message<AttachmentType, MessageType, UserType>) {\n    const sendMessageResponse = await this.getClient().post<\n      SendMessageAPIResponse<\n        AttachmentType,\n        ChannelType,\n        CommandType,\n        MessageType,\n        ReactionType,\n        UserType\n      >\n    >(this._channelURL() + '/message', {\n      message,\n    });\n\n    // Reset unreadCount to 0.\n    this.state.unreadCount = 0;\n\n    return sendMessageResponse;\n  }\n\n  sendFile(\n    uri: string | NodeJS.ReadableStream | Buffer | File,\n    name?: string,\n    contentType?: string,\n    user?: UserResponse<UserType>,\n  ) {\n    return this.getClient().sendFile(\n      `${this._channelURL()}/file`,\n      uri,\n      name,\n      contentType,\n      user,\n    );\n  }\n\n  sendImage(\n    uri: string | NodeJS.ReadableStream | File,\n    name?: string,\n    contentType?: string,\n    user?: UserResponse<UserType>,\n  ) {\n    return this.getClient().sendFile(\n      `${this._channelURL()}/image`,\n      uri,\n      name,\n      contentType,\n      user,\n    );\n  }\n\n  deleteFile(url: string) {\n    return this.getClient().delete<APIResponse>(`${this._channelURL()}/file`, { url });\n  }\n\n  deleteImage(url: string) {\n    return this.getClient().delete<APIResponse>(`${this._channelURL()}/image`, { url });\n  }\n\n  /**\n   * sendEvent - Send an event on this channel\n   *\n   * @param {Event<AttachmentType, ChannelType, CommandType, EventType, MessageType, ReactionType, UserType>} event for example {type: 'message.read'}\n   *\n   * @return {Promise<EventAPIResponse<AttachmentType, ChannelType, CommandType, EventType, MessageType, ReactionType, UserType>>} The Server Response\n   */\n  async sendEvent(\n    event: Event<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      EventType,\n      MessageType,\n      ReactionType,\n      UserType\n    >,\n  ) {\n    this._checkInitialized();\n    return await this.getClient().post<\n      EventAPIResponse<\n        AttachmentType,\n        ChannelType,\n        CommandType,\n        EventType,\n        MessageType,\n        ReactionType,\n        UserType\n      >\n    >(this._channelURL() + '/event', {\n      event,\n    });\n  }\n\n  /**\n   * search - Query messages\n   *\n   * @param {MessageFilters<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType> | string}  query search query or object MongoDB style filters\n   * @param {{client_id?: string; connection_id?: string; limit?: number; offset?: number; query?: string; message_filter_conditions?: MessageFilters<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>}} options Option object, {user_id: 'tommaso'}\n   *\n   * @return {Promise<SearchAPIResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>>} search messages response\n   */\n  async search(\n    query:\n      | MessageFilters<\n          AttachmentType,\n          ChannelType,\n          CommandType,\n          MessageType,\n          ReactionType,\n          UserType\n        >\n      | string,\n    options: {\n      client_id?: string;\n      connection_id?: string;\n      limit?: number;\n      message_filter_conditions?: MessageFilters<\n        AttachmentType,\n        ChannelType,\n        CommandType,\n        MessageType,\n        ReactionType,\n        UserType\n      >;\n      offset?: number;\n      query?: string;\n    } = {},\n  ) {\n    // Return a list of channels\n    const payload = {\n      filter_conditions: { cid: this.cid },\n      ...options,\n    };\n    if (typeof query === 'string') {\n      payload.query = query;\n    } else if (typeof query === 'object') {\n      payload.message_filter_conditions = query;\n    } else {\n      throw Error(`Invalid type ${typeof query} for query parameter`);\n    }\n\n    // Make sure we wait for the connect promise if there is a pending one\n    await this.getClient().wsPromise;\n\n    return await this.getClient().get<\n      SearchAPIResponse<\n        AttachmentType,\n        ChannelType,\n        CommandType,\n        MessageType,\n        ReactionType,\n        UserType\n      >\n    >(this.getClient().baseURL + '/search', {\n      payload,\n    });\n  }\n\n  /**\n   * queryMembers - Query Members\n   *\n   * @param {UserFilters<UserType>}  filterConditions object MongoDB style filters\n   * @param {UserSort<UserType>} [sort] Sort options, for instance [{created_at: -1}].\n   * When using multiple fields, make sure you use array of objects to guarantee field order, for instance [{last_active: -1}, {created_at: 1}]\n   * @param {{ limit?: number; offset?: number }} [options] Option object, {limit: 10, offset:10}\n   *\n   * @return {Promise<ChannelMemberAPIResponse<UserType>>} Query Members response\n   */\n  async queryMembers(\n    filterConditions: UserFilters<UserType>,\n    sort: UserSort<UserType> = [],\n    options: { limit?: number; offset?: number } = {},\n  ) {\n    let id: string | undefined;\n    const type = this.type;\n    let members: string[] | ChannelMemberResponse<UserType>[] | undefined;\n    if (this.id) {\n      id = this.id;\n    } else if (this.data?.members && Array.isArray(this.data.members)) {\n      members = this.data.members;\n    }\n    // Return a list of members\n    return await this.getClient().get<ChannelMemberAPIResponse<UserType>>(\n      this.getClient().baseURL + '/members',\n      {\n        payload: {\n          type,\n          id,\n          members,\n          sort: normalizeQuerySort(sort),\n          filter_conditions: filterConditions,\n          ...options,\n        },\n      },\n    );\n  }\n\n  /**\n   * sendReaction - Send a reaction about a message\n   *\n   * @param {string} messageID the message id\n   * @param {Reaction<ReactionType, UserType>} reaction the reaction object for instance {type: 'love'}\n   * @param {string} [user_id] the id of the user (used only for server side request) default null\n   *\n   * @return {Promise<ReactionAPIResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>>} The Server Response\n   */\n  async sendReaction(\n    messageID: string,\n    reaction: Reaction<ReactionType, UserType>,\n    user_id?: string,\n  ) {\n    if (!messageID) {\n      throw Error(`Message id is missing`);\n    }\n    if (!reaction || Object.keys(reaction).length === 0) {\n      throw Error(`Reaction object is missing`);\n    }\n    const body = {\n      reaction,\n    };\n    if (user_id != null) {\n      body.reaction = { ...reaction, user: { id: user_id } as UserResponse<UserType> };\n    }\n    return await this.getClient().post<\n      ReactionAPIResponse<\n        AttachmentType,\n        ChannelType,\n        CommandType,\n        MessageType,\n        ReactionType,\n        UserType\n      >\n    >(this.getClient().baseURL + `/messages/${messageID}/reaction`, body);\n  }\n\n  /**\n   * deleteReaction - Delete a reaction by user and type\n   *\n   * @param {string} messageID the id of the message from which te remove the reaction\n   * @param {string} reactionType the type of reaction that should be removed\n   * @param {string} [user_id] the id of the user (used only for server side request) default null\n   *\n   * @return {Promise<ReactionAPIResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>>} The Server Response\n   */\n  deleteReaction(messageID: string, reactionType: string, user_id?: string) {\n    this._checkInitialized();\n    if (!reactionType || !messageID) {\n      throw Error(\n        'Deleting a reaction requires specifying both the message and reaction type',\n      );\n    }\n\n    const url =\n      this.getClient().baseURL + `/messages/${messageID}/reaction/${reactionType}`;\n    //provided when server side request\n    if (user_id) {\n      return this.getClient().delete<\n        ReactionAPIResponse<\n          AttachmentType,\n          ChannelType,\n          CommandType,\n          MessageType,\n          ReactionType,\n          UserType\n        >\n      >(url, { user_id });\n    }\n\n    return this.getClient().delete<\n      ReactionAPIResponse<\n        AttachmentType,\n        ChannelType,\n        CommandType,\n        MessageType,\n        ReactionType,\n        UserType\n      >\n    >(url, {});\n  }\n\n  /**\n   * update - Edit the channel's custom properties\n   *\n   * @param {ChannelData<ChannelType>} channelData The object to update the custom properties of this channel with\n   * @param {Message<AttachmentType, MessageType, UserType>} [updateMessage] Optional message object for channel members notification\n   * @return {Promise<UpdateChannelAPIResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>>} The server response\n   */\n  async update(\n    channelData:\n      | Partial<ChannelData<ChannelType>>\n      | Partial<ChannelResponse<ChannelType, CommandType, UserType>>\n      | Partial<\n          Immutable.Immutable<ChannelResponse<ChannelType, CommandType, UserType>>\n        > = {},\n    updateMessage?: Message<AttachmentType, MessageType, UserType>,\n  ) {\n    // Strip out reserved names that will result in API errors.\n    const reserved = [\n      'config',\n      'cid',\n      'created_by',\n      'id',\n      'member_count',\n      'type',\n      'created_at',\n      'updated_at',\n      'last_message_at',\n    ];\n    reserved.forEach((key) => {\n      delete channelData[key];\n    });\n\n    const data = await this.getClient().post<\n      UpdateChannelAPIResponse<\n        AttachmentType,\n        ChannelType,\n        CommandType,\n        MessageType,\n        ReactionType,\n        UserType\n      >\n    >(this._channelURL(), {\n      message: updateMessage,\n      data: channelData,\n    });\n    this.data = data.channel;\n    return data;\n  }\n\n  /**\n   * enableSlowMode - enable slow mode\n   *\n   * @param {number} coolDownInterval the cooldown interval in seconds\n   * @return {Promise<UpdateChannelAPIResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>>} The server response\n   */\n  async enableSlowMode(coolDownInterval: number) {\n    const data = await this.getClient().post<\n      UpdateChannelAPIResponse<\n        AttachmentType,\n        ChannelType,\n        CommandType,\n        MessageType,\n        ReactionType,\n        UserType\n      >\n    >(this._channelURL(), {\n      cooldown: coolDownInterval,\n    });\n    this.data = data.channel;\n    return data;\n  }\n\n  /**\n   * disableSlowMode - disable slow mode\n   *\n   * @return {Promise<UpdateChannelAPIResponse<ChannelType, AttachmentType, MessageType, ReactionType, UserType>>} The server response\n   */\n  async disableSlowMode() {\n    const data = await this.getClient().post<\n      UpdateChannelAPIResponse<\n        AttachmentType,\n        ChannelType,\n        CommandType,\n        MessageType,\n        ReactionType,\n        UserType\n      >\n    >(this._channelURL(), {\n      cooldown: 0,\n    });\n    this.data = data.channel;\n    return data;\n  }\n\n  /**\n   * delete - Delete the channel. Messages are permanently removed.\n   *\n   * @return {Promise<DeleteChannelAPIResponse<ChannelType, CommandType, UserType>>} The server response\n   */\n  async delete() {\n    return await this.getClient().delete<\n      DeleteChannelAPIResponse<ChannelType, CommandType, UserType>\n    >(this._channelURL(), {});\n  }\n\n  /**\n   * truncate - Removes all messages from the channel\n   *\n   * @return {Promise<TruncateChannelAPIResponse<ChannelType, CommandType, UserType>>} The server response\n   */\n  async truncate() {\n    return await this.getClient().post<\n      TruncateChannelAPIResponse<ChannelType, CommandType, UserType>\n    >(this._channelURL() + '/truncate', {});\n  }\n\n  /**\n   * acceptInvite - accept invitation to the channel\n   *\n   * @param {InviteOptions<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>} [options] The object to update the custom properties of this channel with\n   *\n   * @return {Promise<UpdateChannelAPIResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>>} The server response\n   */\n  async acceptInvite(\n    options: InviteOptions<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      MessageType,\n      ReactionType,\n      UserType\n    > = {},\n  ) {\n    const data = await this.getClient().post<\n      UpdateChannelAPIResponse<\n        AttachmentType,\n        ChannelType,\n        CommandType,\n        MessageType,\n        ReactionType,\n        UserType\n      >\n    >(this._channelURL(), {\n      accept_invite: true,\n      ...options,\n    });\n    this.data = data.channel;\n    return data;\n  }\n\n  /**\n   * rejectInvite - reject invitation to the channel\n   *\n   * @param {InviteOptions<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>} [options] The object to update the custom properties of this channel with\n   *\n   * @return {Promise<UpdateChannelAPIResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>>} The server response\n   */\n  async rejectInvite(\n    options: InviteOptions<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      MessageType,\n      ReactionType,\n      UserType\n    > = {},\n  ) {\n    const data = await this.getClient().post<\n      UpdateChannelAPIResponse<\n        AttachmentType,\n        ChannelType,\n        CommandType,\n        MessageType,\n        ReactionType,\n        UserType\n      >\n    >(this._channelURL(), {\n      reject_invite: true,\n      ...options,\n    });\n    this.data = data.channel;\n    return data;\n  }\n\n  /**\n   * addMembers - add members to the channel\n   *\n   * @param {string[]} members An array of member identifiers\n   * @param {Message<AttachmentType, MessageType, UserType>} [message] Optional message object for channel members notification\n   * @return {Promise<UpdateChannelAPIResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>>} The server response\n   */\n  async addMembers(\n    members: string[],\n    message?: Message<AttachmentType, MessageType, UserType>,\n  ) {\n    const data = await this.getClient().post<\n      UpdateChannelAPIResponse<\n        AttachmentType,\n        ChannelType,\n        CommandType,\n        MessageType,\n        ReactionType,\n        UserType\n      >\n    >(this._channelURL(), {\n      add_members: members,\n      message,\n    });\n    this.data = data.channel;\n    return data;\n  }\n\n  /**\n   * addModerators - add moderators to the channel\n   *\n   * @param {string[]} members An array of member identifiers\n   * @param {Message<AttachmentType, MessageType, UserType>} [message] Optional message object for channel members notification\n   * @return {Promise<UpdateChannelAPIResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>>} The server response\n   */\n  async addModerators(\n    members: string[],\n    message?: Message<AttachmentType, MessageType, UserType>,\n  ) {\n    const data = await this.getClient().post<\n      UpdateChannelAPIResponse<\n        AttachmentType,\n        ChannelType,\n        CommandType,\n        MessageType,\n        ReactionType,\n        UserType\n      >\n    >(this._channelURL(), {\n      add_moderators: members,\n      message,\n    });\n    this.data = data.channel;\n    return data;\n  }\n\n  /**\n   * inviteMembers - invite members to the channel\n   *\n   * @param {string[]} members An array of member identifiers\n   * @param {Message<AttachmentType, MessageType, UserType>} [message] Optional message object for channel members notification\n   * @return {Promise<UpdateChannelAPIResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>>} The server response\n   */\n  async inviteMembers(\n    members: string[],\n    message?: Message<AttachmentType, MessageType, UserType>,\n  ) {\n    const data = await this.getClient().post<\n      UpdateChannelAPIResponse<\n        AttachmentType,\n        ChannelType,\n        CommandType,\n        MessageType,\n        ReactionType,\n        UserType\n      >\n    >(this._channelURL(), {\n      invites: members,\n      message,\n    });\n    this.data = data.channel;\n    return data;\n  }\n\n  /**\n   * removeMembers - remove members from channel\n   *\n   * @param {string[]} members An array of member identifiers\n   * @param {Message<AttachmentType, MessageType, UserType>} [message] Optional message object for channel members notification\n   * @return {Promise<UpdateChannelAPIResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>>} The server response\n   */\n  async removeMembers(\n    members: string[],\n    message?: Message<AttachmentType, MessageType, UserType>,\n  ) {\n    const data = await this.getClient().post<\n      UpdateChannelAPIResponse<\n        AttachmentType,\n        ChannelType,\n        CommandType,\n        MessageType,\n        ReactionType,\n        UserType\n      >\n    >(this._channelURL(), {\n      remove_members: members,\n      message,\n    });\n    this.data = data.channel;\n    return data;\n  }\n\n  /**\n   * demoteModerators - remove moderator role from channel members\n   *\n   * @param {string[]} members An array of member identifiers\n   * @param {Message<AttachmentType, MessageType, UserType>} [message] Optional message object for channel members notification\n   * @return {Promise<UpdateChannelAPIResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>>} The server response\n   */\n  async demoteModerators(\n    members: string[],\n    message?: Message<AttachmentType, MessageType, UserType>,\n  ) {\n    const data = await this.getClient().post<\n      UpdateChannelAPIResponse<\n        AttachmentType,\n        ChannelType,\n        CommandType,\n        MessageType,\n        ReactionType,\n        UserType\n      >\n    >(this._channelURL(), {\n      demote_moderators: members,\n      message,\n    });\n    this.data = data.channel;\n    return data;\n  }\n\n  /**\n   * mute - mutes the current channel\n   * @param {{ user_id?: string, expiration?: string }} opts expiration in minutes or user_id\n   * @return {Promise<MuteChannelAPIResponse<ChannelType, CommandType, UserType>>} The server response\n   *\n   * example with expiration:\n   * await channel.mute({expiration: moment.duration(2, 'weeks')});\n   *\n   * example server side:\n   * await channel.mute({user_id: userId});\n   *\n   */\n  async mute(opts: { expiration?: number; user_id?: string } = {}) {\n    return await this.getClient().post<\n      MuteChannelAPIResponse<ChannelType, CommandType, UserType>\n    >(this.getClient().baseURL + '/moderation/mute/channel', {\n      channel_cid: this.cid,\n      ...opts,\n    });\n  }\n\n  /**\n   * unmute - mutes the current channel\n   * @param {{ user_id?: string}} opts user_id\n   * @return {Promise<APIResponse>} The server response\n   *\n   * example server side:\n   * await channel.unmute({user_id: userId});\n   */\n  async unmute(opts: { user_id?: string } = {}) {\n    return await this.getClient().post<APIResponse>(\n      this.getClient().baseURL + '/moderation/unmute/channel',\n      {\n        channel_cid: this.cid,\n        ...opts,\n      },\n    );\n  }\n\n  /**\n   * muteStatus - returns the mute status for the current channel\n   * @return {{ muted: boolean; createdAt?: string | null; expiresAt?: string | null }} { muted: true | false, createdAt: Date | null, expiresAt: Date | null}\n   */\n  muteStatus(): {\n    muted: boolean;\n    createdAt?: string | null;\n    expiresAt?: string | null;\n  } {\n    this._checkInitialized();\n    return this.getClient()._muteStatus(this.cid);\n  }\n\n  sendAction(messageID: string, formData: Record<string, string>) {\n    this._checkInitialized();\n    if (!messageID) {\n      throw Error(`Message id is missing`);\n    }\n    return this.getClient().post<\n      SendMessageAPIResponse<\n        AttachmentType,\n        ChannelType,\n        CommandType,\n        MessageType,\n        ReactionType,\n        UserType\n      >\n    >(this.getClient().baseURL + `/messages/${messageID}/action`, {\n      message_id: messageID,\n      form_data: formData,\n      id: this.id,\n      type: this.type,\n    });\n  }\n\n  /**\n   * keystroke - First of the typing.start and typing.stop events based on the users keystrokes.\n   * Call this on every keystroke\n   * @see {@link https://getstream.io/chat/docs/typing_indicators/?language=js|Docs}\n   * @param {string} [parent_id] set this field to `message.id` to indicate that typing event is happening in a thread\n   */\n  async keystroke(parent_id?: string) {\n    if (!this.getConfig()?.typing_events) {\n      return;\n    }\n    const now = new Date();\n    const diff = this.lastTypingEvent && now.getTime() - this.lastTypingEvent.getTime();\n    this.lastKeyStroke = now;\n    this.isTyping = true;\n    // send a typing.start every 2 seconds\n    if (diff === null || diff > 2000) {\n      this.lastTypingEvent = new Date();\n      await this.sendEvent({\n        type: 'typing.start',\n        parent_id,\n      } as Event<AttachmentType, ChannelType, CommandType, EventType, MessageType, ReactionType, UserType>);\n    }\n  }\n\n  /**\n   * stopTyping - Sets last typing to null and sends the typing.stop event\n   * @see {@link https://getstream.io/chat/docs/typing_indicators/?language=js|Docs}\n   * @param {string} [parent_id] set this field to `message.id` to indicate that typing event is happening in a thread\n   */\n  async stopTyping(parent_id?: string) {\n    if (!this.getConfig()?.typing_events) {\n      return;\n    }\n    this.lastTypingEvent = null;\n    this.isTyping = false;\n    await this.sendEvent({\n      type: 'typing.stop',\n      parent_id,\n    } as Event<AttachmentType, ChannelType, CommandType, EventType, MessageType, ReactionType, UserType>);\n  }\n\n  /**\n   * lastMessage - return the last message, takes into account that last few messages might not be perfectly sorted\n   *\n   * @return {Immutable.Immutable<ReturnType<ChannelState<AttachmentType, ChannelType, CommandType, EventType, MessageType, ReactionType, UserType>['messageToImmutable']>> | undefined} Description\n   */\n  lastMessage() {\n    // get last 5 messages, sort, return the latest\n    // get a slice of the last 5\n    let min = this.state.messages.length - 5;\n    if (min < 0) {\n      min = 0;\n    }\n    const max = this.state.messages.length + 1;\n    const messageSlice = this.state.messages.slice(min, max).asMutable();\n\n    // sort by pk desc\n    messageSlice.sort((a, b) => b.created_at.getTime() - a.created_at.getTime());\n\n    let lastMessage;\n    if (messageSlice.length > 0) {\n      lastMessage = messageSlice[0];\n    }\n    return lastMessage;\n  }\n\n  /**\n   * markRead - Send the mark read event for this user, only works if the `read_events` setting is enabled\n   *\n   * @param {MarkReadOptions<UserType>} data\n   * @return {Promise<EventAPIResponse<AttachmentType, ChannelType, CommandType, EventType, MessageType, ReactionType, UserType> | null>} Description\n   */\n  async markRead(data: MarkReadOptions<UserType> = {}) {\n    this._checkInitialized();\n\n    if (!this.getConfig()?.read_events) {\n      return Promise.resolve(null);\n    }\n\n    return await this.getClient().post<\n      EventAPIResponse<\n        AttachmentType,\n        ChannelType,\n        CommandType,\n        EventType,\n        MessageType,\n        ReactionType,\n        UserType\n      >\n    >(this._channelURL() + '/read', {\n      ...data,\n    });\n  }\n\n  /**\n   * clean - Cleans the channel state and fires stop typing if needed\n   */\n  clean() {\n    if (this.lastKeyStroke) {\n      const now = new Date();\n      const diff = now.getTime() - this.lastKeyStroke.getTime();\n      if (diff > 1000 && this.isTyping) {\n        logChatPromiseExecution(this.stopTyping(), 'stop typing event');\n      }\n    }\n\n    this.state.clean();\n  }\n\n  /**\n   * watch - Loads the initial channel state and watches for changes\n   *\n   * @param {ChannelQueryOptions<ChannelType, CommandType, UserType>} options additional options for the query endpoint\n   *\n   * @return {Promise<ChannelAPIResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>>} The server response\n   */\n  async watch(options?: ChannelQueryOptions<ChannelType, CommandType, UserType>) {\n    const defaultOptions = {\n      state: true,\n      watch: true,\n      presence: false,\n    };\n\n    // Make sure we wait for the connect promise if there is a pending one\n    await this.getClient().wsPromise;\n\n    if (!this.getClient()._hasConnectionID()) {\n      defaultOptions.watch = false;\n    }\n\n    const combined = { ...defaultOptions, ...options };\n    const state = await this.query(combined);\n    this.initialized = true;\n    this.data = state.channel;\n\n    this._client.logger(\n      'info',\n      `channel:watch() - started watching channel ${this.cid}`,\n      {\n        tags: ['channel'],\n        channel: this,\n      },\n    );\n    return state;\n  }\n\n  /**\n   * stopWatching - Stops watching the channel\n   *\n   * @return {Promise<APIResponse>} The server response\n   */\n  async stopWatching() {\n    const response = await this.getClient().post<APIResponse>(\n      this._channelURL() + '/stop-watching',\n      {},\n    );\n\n    this._client.logger(\n      'info',\n      `channel:watch() - stopped watching channel ${this.cid}`,\n      {\n        tags: ['channel'],\n        channel: this,\n      },\n    );\n\n    return response;\n  }\n\n  /**\n   * getReplies - List the message replies for a parent message\n   *\n   * @param {string} parent_id The message parent id, ie the top of the thread\n   * @param {PaginationOptions & { user?: UserResponse<UserType>; user_id?: string }} options Pagination params, ie {limit:10, id_lte: 10}\n   *\n   * @return {Promise<GetRepliesAPIResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>>} A response with a list of messages\n   */\n  async getReplies(\n    parent_id: string,\n    options: PaginationOptions & { user?: UserResponse<UserType>; user_id?: string },\n  ) {\n    const data = await this.getClient().get<\n      GetRepliesAPIResponse<\n        AttachmentType,\n        ChannelType,\n        CommandType,\n        MessageType,\n        ReactionType,\n        UserType\n      >\n    >(this.getClient().baseURL + `/messages/${parent_id}/replies`, {\n      ...options,\n    });\n\n    // add any messages to our thread state\n    if (data.messages) {\n      this.state.addMessagesSorted(data.messages);\n    }\n\n    return data;\n  }\n\n  /**\n   * getReactions - List the reactions, supports pagination\n   *\n   * @param {string} message_id The message id\n   * @param {{ limit?: number; offset?: number }} options The pagination options\n   *\n   * @return {Promise<GetReactionsAPIResponse<ReactionType, UserType>>} Server response\n   */\n  getReactions(message_id: string, options: { limit?: number; offset?: number }) {\n    return this.getClient().get<GetReactionsAPIResponse<ReactionType, UserType>>(\n      this.getClient().baseURL + `/messages/${message_id}/reactions`,\n      {\n        ...options,\n      },\n    );\n  }\n\n  /**\n   * getMessagesById - Retrieves a list of messages by ID\n   *\n   * @param {string[]} messageIds The ids of the messages to retrieve from this channel\n   *\n   * @return {Promise<GetMultipleMessagesAPIResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>>} Server response\n   */\n  getMessagesById(messageIds: string[]) {\n    return this.getClient().get<\n      GetMultipleMessagesAPIResponse<\n        AttachmentType,\n        ChannelType,\n        CommandType,\n        MessageType,\n        ReactionType,\n        UserType\n      >\n    >(this._channelURL() + '/messages', {\n      ids: messageIds.join(','),\n    });\n  }\n\n  /**\n   * lastRead - returns the last time the user marked the channel as read if the user never marked the channel as read, this will return null\n   * @return {Immutable.ImmutableDate | null | undefined}\n   */\n  lastRead() {\n    this._checkInitialized();\n    const { userID } = this.getClient();\n    if (userID) {\n      return this.state.read[userID] ? this.state.read[userID].last_read : null;\n    }\n  }\n\n  _countMessageAsUnread(message: {\n    shadowed?: boolean;\n    silent?: boolean;\n    user?: { id?: string } | null;\n  }) {\n    if (message.shadowed) return false;\n    if (message.silent) return false;\n    if (message.user?.id === this.getClient().userID) return false;\n    if (message.user?.id && this.getClient().userMuteStatus(message.user.id))\n      return false;\n\n    return true;\n  }\n\n  /**\n   * countUnread - Count of unread messages\n   *\n   * @param {Date | Immutable.ImmutableDate | null} [lastRead] lastRead the time that the user read a message, defaults to current user's read state\n   *\n   * @return {number} Unread count\n   */\n  countUnread(lastRead?: Date | Immutable.ImmutableDate | null) {\n    if (!lastRead) return this.state.unreadCount;\n\n    let count = 0;\n    for (let i = 0; i < this.state.messages.length; i += 1) {\n      const message = this.state.messages[i];\n      if (message.created_at > lastRead && this._countMessageAsUnread(message)) {\n        count++;\n      }\n    }\n    return count;\n  }\n\n  /**\n   * countUnread - Count the number of unread messages mentioning the current user\n   *\n   * @return {number} Unread mentions count\n   */\n  countUnreadMentions() {\n    const lastRead = this.lastRead();\n    const userID = this.getClient().userID;\n\n    let count = 0;\n    for (let i = 0; i < this.state.messages.length; i += 1) {\n      const message = this.state.messages[i];\n      if (\n        this._countMessageAsUnread(message) &&\n        (!lastRead || message.created_at > lastRead) &&\n        message.mentioned_users?.find((u) => u.id === userID)\n      ) {\n        count++;\n      }\n    }\n    return count;\n  }\n\n  /**\n   * create - Creates a new channel\n   *\n   * @return {Promise<ChannelAPIResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>>} The Server Response\n   */\n  create = async () => {\n    const options = {\n      watch: false,\n      state: false,\n      presence: false,\n    };\n    return await this.query(options);\n  };\n\n  /**\n   * query - Query the API, get messages, members or other channel fields\n   *\n   * @param {ChannelQueryOptions<ChannelType, CommandType, UserType>} options The query options\n   *\n   * @return {Promise<ChannelAPIResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>>} Returns a query response\n   */\n  async query(options: ChannelQueryOptions<ChannelType, CommandType, UserType>) {\n    // Make sure we wait for the connect promise if there is a pending one\n    await this.getClient().wsPromise;\n\n    let queryURL = `${this.getClient().baseURL}/channels/${this.type}`;\n    if (this.id) {\n      queryURL += `/${this.id}`;\n    }\n\n    const state = await this.getClient().post<\n      ChannelAPIResponse<\n        AttachmentType,\n        ChannelType,\n        CommandType,\n        MessageType,\n        ReactionType,\n        UserType\n      >\n    >(queryURL + '/query', {\n      data: this._data,\n      state: true,\n      ...options,\n    });\n\n    // update the channel id if it was missing\n    if (!this.id) {\n      this.id = state.channel.id;\n      this.cid = state.channel.cid;\n      // set the channel as active...\n      if (!(this.cid in this.getClient().activeChannels)) {\n        this.getClient().activeChannels[this.cid] = this;\n      }\n    }\n\n    this.getClient()._addChannelConfig(state);\n\n    // add any messages to our channel state\n    this._initializeState(state);\n\n    return state;\n  }\n\n  /**\n   * banUser - Bans a user from a channel\n   *\n   * @param {string} targetUserID\n   * @param {BanUserOptions<UserType>} options\n   * @returns {Promise<APIResponse>}\n   */\n  async banUser(targetUserID: string, options: BanUserOptions<UserType>) {\n    this._checkInitialized();\n    return await this.getClient().banUser(targetUserID, {\n      ...options,\n      type: this.type,\n      id: this.id,\n    });\n  }\n\n  /**\n   * hides the channel from queryChannels for the user until a message is added\n   * If clearHistory is set to true - all messages will be removed for the user\n   *\n   * @param {string | null} userId\n   * @param {boolean} clearHistory\n   * @returns {Promise<APIResponse>}\n   */\n  async hide(userId: string | null = null, clearHistory = false) {\n    this._checkInitialized();\n\n    return await this.getClient().post<APIResponse>(`${this._channelURL()}/hide`, {\n      user_id: userId,\n      clear_history: clearHistory,\n    });\n  }\n\n  /**\n   * removes the hidden status for a channel\n   *\n   * @param {string | null} userId\n   * @returns {Promise<APIResponse>}\n   */\n  async show(userId: string | null = null) {\n    this._checkInitialized();\n    return await this.getClient().post<APIResponse>(`${this._channelURL()}/show`, {\n      user_id: userId,\n    });\n  }\n\n  /**\n   * unbanUser - Removes the bans for a user on a channel\n   *\n   * @param {string} targetUserID\n   * @returns {Promise<APIResponse>}\n   */\n  async unbanUser(targetUserID: string) {\n    this._checkInitialized();\n    return await this.getClient().unbanUser(targetUserID, {\n      type: this.type,\n      id: this.id,\n    });\n  }\n\n  /**\n   * shadowBan - Shadow bans a user from a channel\n   *\n   * @param {string} targetUserID\n   * @param {BanUserOptions<UserType>} options\n   * @returns {Promise<APIResponse>}\n   */\n  async shadowBan(targetUserID: string, options: BanUserOptions<UserType>) {\n    this._checkInitialized();\n    return await this.getClient().shadowBan(targetUserID, {\n      ...options,\n      type: this.type,\n      id: this.id,\n    });\n  }\n\n  /**\n   * removeShadowBan - Removes the shadow ban for a user on a channel\n   *\n   * @param {string} targetUserID\n   * @returns {Promise<APIResponse>}\n   */\n  async removeShadowBan(targetUserID: string) {\n    this._checkInitialized();\n    return await this.getClient().removeShadowBan(targetUserID, {\n      type: this.type,\n      id: this.id,\n    });\n  }\n\n  /**\n   * on - Listen to events on this channel.\n   *\n   * channel.on('message.new', event => {console.log(\"my new message\", event, channel.state.messages)})\n   * or\n   * channel.on(event => {console.log(event.type)})\n   *\n   * @param {EventHandler<AttachmentType, ChannelType, CommandType, EventType, MessageType, ReactionType, UserType> | EventTypes} callbackOrString  The event type to listen for (optional)\n   * @param {EventHandler<AttachmentType, ChannelType, CommandType, EventType, MessageType, ReactionType, UserType>} [callbackOrNothing] The callback to call\n   */\n  on(\n    eventType: EventTypes,\n    callback: EventHandler<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      EventType,\n      MessageType,\n      ReactionType,\n      UserType\n    >,\n  ): void;\n  on(\n    callback: EventHandler<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      EventType,\n      MessageType,\n      ReactionType,\n      UserType\n    >,\n  ): void;\n  on(\n    callbackOrString:\n      | EventHandler<\n          AttachmentType,\n          ChannelType,\n          CommandType,\n          EventType,\n          MessageType,\n          ReactionType,\n          UserType\n        >\n      | EventTypes,\n    callbackOrNothing?: EventHandler<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      EventType,\n      MessageType,\n      ReactionType,\n      UserType\n    >,\n  ): void {\n    const key = callbackOrNothing ? (callbackOrString as string) : 'all';\n    const valid = isValidEventType(key);\n    if (!valid) {\n      throw Error(`Invalid event type ${key}`);\n    }\n    const callback = callbackOrNothing ? callbackOrNothing : callbackOrString;\n    if (!(key in this.listeners)) {\n      this.listeners[key] = [];\n    }\n    this._client.logger(\n      'info',\n      `Attaching listener for ${key} event on channel ${this.cid}`,\n      {\n        tags: ['event', 'channel'],\n        channel: this,\n      },\n    );\n\n    this.listeners[key].push(callback);\n  }\n\n  /**\n   * off - Remove the event handler\n   *\n   */\n  off(\n    eventType: EventTypes,\n    callback: EventHandler<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      EventType,\n      MessageType,\n      ReactionType,\n      UserType\n    >,\n  ): void;\n  off(\n    callback: EventHandler<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      EventType,\n      MessageType,\n      ReactionType,\n      UserType\n    >,\n  ): void;\n  off(\n    callbackOrString:\n      | EventHandler<\n          AttachmentType,\n          ChannelType,\n          CommandType,\n          EventType,\n          MessageType,\n          ReactionType,\n          UserType\n        >\n      | EventTypes,\n    callbackOrNothing?: EventHandler<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      EventType,\n      MessageType,\n      ReactionType,\n      UserType\n    >,\n  ): void {\n    const key = callbackOrNothing ? (callbackOrString as string) : 'all';\n    const valid = isValidEventType(key);\n    if (!valid) {\n      throw Error(`Invalid event type ${key}`);\n    }\n    const callback = callbackOrNothing ? callbackOrNothing : callbackOrString;\n    if (!(key in this.listeners)) {\n      this.listeners[key] = [];\n    }\n\n    this._client.logger(\n      'info',\n      `Removing listener for ${key} event from channel ${this.cid}`,\n      { tags: ['event', 'channel'], channel: this },\n    );\n    this.listeners[key] = this.listeners[key].filter((value) => value !== callback);\n  }\n\n  // eslint-disable-next-line sonarjs/cognitive-complexity\n  _handleChannelEvent(\n    event: Event<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      EventType,\n      MessageType,\n      ReactionType,\n      UserType\n    >,\n  ) {\n    const channel = this;\n    this._client.logger(\n      'info',\n      `channel:_handleChannelEvent - Received event of type { ${event.type} } on ${this.cid}`,\n      {\n        tags: ['event', 'channel'],\n        channel: this,\n      },\n    );\n\n    const s = channel.state;\n    switch (event.type) {\n      case 'typing.start':\n        if (event.user?.id) {\n          s.typing = s.typing.set(event.user.id, Immutable(event));\n        }\n        break;\n      case 'typing.stop':\n        if (event.user?.id) {\n          s.typing = s.typing.without(event.user.id);\n        }\n        break;\n      case 'message.read':\n        if (event.user?.id) {\n          s.read = s.read.set(\n            event.user.id,\n            Immutable({ user: { ...event.user }, last_read: event.received_at }),\n          );\n\n          if (event.user?.id === this.getClient().user?.id) {\n            s.unreadCount = 0;\n          }\n        }\n        break;\n      case 'user.watching.start':\n      case 'user.updated':\n        if (event.user?.id) {\n          s.watchers = s.watchers.set(event.user.id, Immutable(event.user));\n        }\n        break;\n      case 'user.watching.stop':\n        if (event.user?.id) {\n          s.watchers = s.watchers.without(event.user.id);\n        }\n        break;\n      case 'message.deleted':\n        if (event.message) {\n          if (event.hard_delete) s.removeMessage(event.message);\n          else s.addMessageSorted(event.message);\n        }\n        break;\n      case 'message.new':\n        if (event.message) {\n          /* if message belongs to current user, always assume timestamp is changed to filter it out and add again to avoid duplication */\n          const ownMessage = event.user?.id === this.getClient().user?.id;\n          s.addMessageSorted(event.message, ownMessage);\n\n          if (ownMessage) {\n            s.unreadCount = 0;\n          } else if (this._countMessageAsUnread(event.message)) {\n            s.unreadCount = s.unreadCount + 1;\n          }\n        }\n        break;\n      case 'message.updated':\n        if (event.message) {\n          s.addMessageSorted(event.message);\n        }\n        break;\n      case 'channel.truncated':\n        s.clearMessages();\n        s.unreadCount = 0;\n        break;\n      case 'member.added':\n      case 'member.updated':\n        if (event.member?.user_id) {\n          s.members = s.members.set(event.member?.user_id, Immutable(event.member));\n        }\n        break;\n      case 'member.removed':\n        if (event.user?.id) {\n          s.members = s.members.without(event.user.id);\n        }\n        break;\n      case 'channel.updated':\n        if (event.channel) {\n          channel.data = Immutable(event.channel);\n        }\n        break;\n      case 'reaction.new':\n        if (event.reaction) {\n          s.addReaction(event.reaction, event.message);\n        }\n        break;\n      case 'reaction.deleted':\n        if (event.reaction) {\n          s.removeReaction(event.reaction, event.message);\n        }\n        break;\n      case 'channel.hidden':\n        if (event.clear_history) {\n          s.clearMessages();\n        }\n        break;\n      default:\n    }\n\n    // any event can send over the online count\n    if (event.watcher_count !== undefined) {\n      channel.state.watcher_count = event.watcher_count;\n    }\n  }\n\n  _callChannelListeners = (\n    event: Event<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      EventType,\n      MessageType,\n      ReactionType,\n      UserType\n    >,\n  ) => {\n    const channel = this;\n    // gather and call the listeners\n    const listeners = [];\n    if (channel.listeners.all) {\n      listeners.push(...channel.listeners.all);\n    }\n    if (channel.listeners[event.type]) {\n      listeners.push(...channel.listeners[event.type]);\n    }\n\n    // call the event and send it to the listeners\n    for (const listener of listeners) {\n      if (typeof listener !== 'string') {\n        listener(event);\n      }\n    }\n  };\n\n  /**\n   * _channelURL - Returns the channel url\n   *\n   * @return {string} The channel url\n   */\n  _channelURL = () => {\n    if (!this.id) {\n      throw new Error('channel id is not defined');\n    }\n    return `${this.getClient().baseURL}/channels/${this.type}/${this.id}`;\n  };\n\n  _checkInitialized() {\n    if (!this.initialized && !this.getClient()._isUsingServerAuth()) {\n      throw Error(\n        `Channel ${this.cid} hasn't been initialized yet. Make sure to call .watch() and wait for it to resolve`,\n      );\n    }\n  }\n\n  // eslint-disable-next-line sonarjs/cognitive-complexity\n  _initializeState(\n    state: ChannelAPIResponse<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      MessageType,\n      ReactionType,\n      UserType\n    >,\n  ) {\n    // add the Users\n    if (state.members) {\n      for (const m of state.members) {\n        if (m.user) {\n          this.getClient().state.updateUserReference(m.user, this.cid);\n        }\n      }\n    }\n\n    this.state.membership = Immutable(state.membership ? state.membership : {});\n\n    // TODO: CHECK WATCHERS TYPE!!!!!!\n    // if (state.watchers) {\n    //   for (const watcher of state.watchers) {\n    //     if (watcher) {\n    //       this.getClient().state.updateUserReference(watcher, this.cid);\n    //     }\n    //   }\n    // }\n\n    // immutable list of maps\n    const messages = state.messages || [];\n    if (!this.state.messages) {\n      this.state.messages = Immutable([]);\n    }\n    this.state.addMessagesSorted(messages, false, true);\n    this.state.watcher_count = state.watcher_count ? state.watcher_count : 0;\n    // convert the arrays into objects for easier syncing...\n    if (state.watchers) {\n      for (const watcher of state.watchers) {\n        if (watcher) {\n          this.getClient().state.updateUserReference(watcher, this.cid);\n          this.state.watchers = this.state.watchers.set(watcher.id, watcher);\n        }\n      }\n    }\n\n    // initialize read state to last message or current time if the channel is empty\n    // if the user is a member, this value will be overwritten later on otherwise this ensures\n    // that everything up to this point is not marked as unread\n    if (this.getClient().userID != null) {\n      const last_read =\n        this.state.last_message_at != null ? this.state.last_message_at : new Date();\n      const { user } = this.getClient();\n      if (user) {\n        this.state.read = this.state.read.set(user.id, {\n          user: this.getClient().user,\n          last_read,\n        });\n      }\n    }\n\n    // apply read state if part of the state\n    if (state.read) {\n      for (const read of state.read) {\n        const parsedRead = Object.assign({ ...read });\n        parsedRead.last_read = new Date(read.last_read);\n        this.state.read = this.state.read.set(read.user.id, parsedRead);\n        if (read.user.id === this.getClient().user?.id) {\n          this.state.unreadCount = parsedRead.unread_messages;\n        }\n      }\n    }\n\n    if (state.members) {\n      for (const m of state.members) {\n        if (m.user) {\n          this.state.members = this.state.members.set(m.user.id, m);\n        }\n      }\n    }\n  }\n\n  _disconnect() {\n    this._client.logger(\n      'info',\n      `channel:disconnect() - Disconnecting the channel ${this.cid}`,\n      {\n        tags: ['connection', 'channel'],\n        channel: this,\n      },\n    );\n\n    this.disconnected = true;\n  }\n}\n","import Immutable from 'seamless-immutable';\nimport { UnknownType, UserResponse } from './types';\n\n/**\n * ClientState - A container class for the client state.\n */\nexport class ClientState<UserType = UnknownType> {\n  users: Immutable.ImmutableObject<{\n    [key: string]: Immutable.Immutable<UserResponse<UserType>>;\n  }>;\n  userChannelReferences: { [key: string]: { [key: string]: boolean } };\n  constructor() {\n    // show the status for a certain user...\n    // ie online, offline etc\n    this.users = Immutable<{\n      [key: string]: Immutable.Immutable<UserResponse<UserType>>;\n    }>({});\n    // store which channels contain references to the specified user...\n    this.userChannelReferences = {};\n  }\n\n  updateUsers(users: UserResponse<UserType>[]) {\n    for (const user of users) {\n      this.updateUser(user);\n    }\n  }\n\n  updateUser(user?: UserResponse<UserType>) {\n    if (user != null) {\n      this.users = this.users.set(user.id, Immutable(user));\n    }\n  }\n\n  updateUserReference(user: UserResponse<UserType>, channelID: string) {\n    if (user == null) {\n      return;\n    }\n    this.updateUser(user);\n    if (!this.userChannelReferences[user.id]) {\n      this.userChannelReferences[user.id] = {};\n    }\n    this.userChannelReferences[user.id][channelID] = true;\n  }\n}\n","// https://github.com/maxogden/websocket-stream/blob/48dc3ddf943e5ada668c31ccd94e9186f02fafbd/ws-fallback.js\n\nvar ws = null\n\nif (typeof WebSocket !== 'undefined') {\n  ws = WebSocket\n} else if (typeof MozWebSocket !== 'undefined') {\n  ws = MozWebSocket\n} else if (typeof global !== 'undefined') {\n  ws = global.WebSocket || global.MozWebSocket\n} else if (typeof window !== 'undefined') {\n  ws = window.WebSocket || window.MozWebSocket\n} else if (typeof self !== 'undefined') {\n  ws = self.WebSocket || self.MozWebSocket\n}\n\nmodule.exports = ws\n","import WebSocket from 'isomorphic-ws';\nimport { chatCodes, sleep } from './utils';\nimport { TokenManager } from './token_manager';\nimport {\n  ConnectAPIResponse,\n  ConnectionChangeEvent,\n  ConnectionOpen,\n  LiteralStringForUnion,\n  Logger,\n  UnknownType,\n  UserResponse,\n} from './types';\n\n// Type guards to check WebSocket error type\nconst isCloseEvent = (\n  res: WebSocket.CloseEvent | WebSocket.Data | WebSocket.ErrorEvent,\n): res is WebSocket.CloseEvent => (res as WebSocket.CloseEvent).code !== undefined;\n\nconst isErrorEvent = (\n  res: WebSocket.CloseEvent | WebSocket.Data | WebSocket.ErrorEvent,\n): res is WebSocket.ErrorEvent => (res as WebSocket.ErrorEvent).error !== undefined;\n\ntype Constructor<\n  ChannelType extends UnknownType = UnknownType,\n  CommandType extends string = LiteralStringForUnion,\n  UserType extends UnknownType = UnknownType\n> = {\n  apiKey: string;\n  authType: 'anonymous' | 'jwt';\n  clientID: string;\n  eventCallback: (event: ConnectionChangeEvent) => void;\n  logger: Logger | (() => void);\n  messageCallback: (messageEvent: WebSocket.MessageEvent) => void;\n  recoverCallback: (\n    open?: ConnectionOpen<ChannelType, CommandType, UserType>,\n  ) => Promise<void>;\n  tokenManager: TokenManager<UserType>;\n  user: UserResponse<UserType>;\n  userAgent: string;\n  userID: string;\n  wsBaseURL: string;\n};\n\n/**\n * StableWSConnection - A WS connection that reconnects upon failure.\n * - the browser will sometimes report that you're online or offline\n * - the WS connection can break and fail (there is a 30s health check)\n * - sometimes your WS connection will seem to work while the user is in fact offline\n * - to speed up online/offline detection you can use the window.addEventListener('offline');\n *\n * There are 4 ways in which a connection can become unhealthy:\n * - websocket.onerror is called\n * - websocket.onclose is called\n * - the health check fails and no event is received for ~40 seconds\n * - the browser indicates the connection is now offline\n *\n * There are 2 assumptions we make about the server:\n * - state can be recovered by querying the channel again\n * - if the servers fails to publish a message to the client, the WS connection is destroyed\n */\nexport class StableWSConnection<\n  ChannelType extends UnknownType = UnknownType,\n  CommandType extends string = LiteralStringForUnion,\n  UserType extends UnknownType = UnknownType\n> {\n  apiKey: Constructor<ChannelType, CommandType, UserType>['apiKey'];\n  authType: Constructor<ChannelType, CommandType, UserType>['authType'];\n  clientID: Constructor<ChannelType, CommandType, UserType>['clientID'];\n  eventCallback: Constructor<ChannelType, CommandType, UserType>['eventCallback'];\n  logger: Constructor<ChannelType, CommandType, UserType>['logger'];\n  messageCallback: Constructor<ChannelType, CommandType, UserType>['messageCallback'];\n  recoverCallback: Constructor<ChannelType, CommandType, UserType>['recoverCallback'];\n  tokenManager: Constructor<ChannelType, CommandType, UserType>['tokenManager'];\n  user: Constructor<ChannelType, CommandType, UserType>['user'];\n  userAgent: Constructor<ChannelType, CommandType, UserType>['userAgent'];\n  userID: Constructor<ChannelType, CommandType, UserType>['userID'];\n  wsBaseURL: Constructor<ChannelType, CommandType, UserType>['wsBaseURL'];\n\n  connectionID?: string;\n  connectionOpen?: ConnectAPIResponse<ChannelType, CommandType, UserType>;\n  consecutiveFailures: number;\n  healthCheckInterval: number;\n  healthCheckIntervalRef?: NodeJS.Timeout;\n  isConnecting: boolean;\n  isHealthy: boolean;\n  isResolved?: boolean;\n  lastEvent: Date | null;\n  monitorInterval: number;\n  monitorIntervalRef?: NodeJS.Timeout;\n  rejectPromise?: (\n    reason?: Error & {\n      code?: string | number;\n      isWSFailure?: boolean;\n      StatusCode?: string | number;\n    },\n  ) => void;\n  resolvePromise?: (value?: WebSocket.MessageEvent) => void;\n  totalFailures: number;\n  ws?: WebSocket;\n  wsID: number;\n\n  constructor({\n    apiKey,\n    authType,\n    clientID,\n    eventCallback,\n    logger,\n    messageCallback,\n    recoverCallback,\n    tokenManager,\n    user,\n    userAgent,\n    userID,\n    wsBaseURL,\n  }: Constructor<ChannelType, CommandType, UserType>) {\n    this.wsBaseURL = wsBaseURL;\n    this.clientID = clientID;\n    this.userID = userID;\n    this.user = user;\n    this.authType = authType;\n    this.userAgent = userAgent;\n    this.apiKey = apiKey;\n    this.tokenManager = tokenManager;\n    /** consecutive failures influence the duration of the timeout */\n    this.consecutiveFailures = 0;\n    /** keep track of the total number of failures */\n    this.totalFailures = 0;\n    /** We only make 1 attempt to reconnect at the same time.. */\n    this.isConnecting = false;\n    /** Boolean that indicates if we have a working connection to the server */\n    this.isHealthy = false;\n    /** Callback when the connection fails and recovers */\n    this.recoverCallback = recoverCallback;\n    this.messageCallback = messageCallback;\n    this.eventCallback = eventCallback;\n    this.logger = logger;\n    /** Incremented when a new WS connection is made */\n    this.wsID = 1;\n    /** Store the last event time for health checks */\n    this.lastEvent = null;\n    /** Send a health check message every 30 seconds */\n    this.healthCheckInterval = 30 * 1000;\n    /** Every second we verify that we didn't miss any health checks */\n    this.monitorInterval = 1 * 1000;\n    this._listenForConnectionChanges();\n  }\n\n  /**\n   * connect - Connect to the WS URL\n   *\n   * @return {ConnectAPIResponse<ChannelType, CommandType, UserType>} Promise that completes once the first health check message is received\n   */\n  async connect() {\n    let healthCheck: ConnectionOpen<ChannelType, CommandType, UserType> | undefined;\n    if (this.isConnecting) {\n      throw Error(\n        `You've called connect twice, can only attempt 1 connection at the time`,\n      );\n    }\n    try {\n      this.isConnecting = true;\n      healthCheck = await this._connect();\n      this.isConnecting = false;\n      this.consecutiveFailures = 0;\n      this._startMonitor();\n      this._startHealthCheck();\n      this.logger(\n        'info',\n        `connection:connect() - Established ws connection with healthcheck: ${healthCheck}`,\n        {\n          tags: ['connection'],\n        },\n      );\n      return healthCheck;\n    } catch (error) {\n      this.isConnecting = false;\n      this.isHealthy = false;\n      this.consecutiveFailures += 1;\n      if (error.code === chatCodes.TOKEN_EXPIRED && !this.tokenManager.isStatic()) {\n        this.logger(\n          'info',\n          'connection:connect() - WS failure due to expired token, so going to try to reload token and reconnect',\n          {\n            tags: ['connection'],\n          },\n        );\n        return this._reconnect({ refreshToken: true });\n      }\n\n      if (!error.isWSFailure) {\n        // This is a permanent failure, throw the error...\n        // We are keeping the error consistent with http error.\n        throw new Error(\n          JSON.stringify({\n            code: error.code,\n            StatusCode: error.StatusCode,\n            message: error.message,\n            isWSFailure: error.isWSFailure,\n          }),\n        );\n      }\n    }\n  }\n\n  _buildUrl = () => {\n    const params = {\n      user_id: this.user.id,\n      user_details: this.user,\n      user_token: this.tokenManager.getToken(),\n      server_determines_connection_id: true,\n    };\n    const qs = encodeURIComponent(JSON.stringify(params));\n    const token = this.tokenManager.getToken();\n    return `${this.wsBaseURL}/connect?json=${qs}&api_key=${this.apiKey}&authorization=${token}&stream-auth-type=${this.authType}&x-stream-client=${this.userAgent}`;\n  };\n\n  /**\n   * disconnect - Disconnect the connection and doesn't recover...\n   *\n   */\n  disconnect(timeout?: number) {\n    this.logger(\n      'info',\n      `connection:disconnect() - Closing the websocket connection for wsID ${this.wsID}`,\n      {\n        tags: ['connection'],\n      },\n    );\n\n    this.wsID += 1;\n\n    // start by removing all the listeners\n    if (this.healthCheckIntervalRef) {\n      clearInterval(this.healthCheckIntervalRef);\n    }\n    if (this.monitorIntervalRef) {\n      clearInterval(this.monitorIntervalRef);\n    }\n\n    this._removeConnectionListeners();\n\n    this.isHealthy = false;\n\n    // remove ws handlers...\n    if (this.ws && this.ws.removeAllListeners) {\n      this.ws.removeAllListeners();\n    }\n\n    let isClosedPromise: Promise<void>;\n    // and finally close...\n    // Assigning to local here because we will remove it from this before the\n    // promise resolves.\n    const { ws } = this;\n    if (ws && ws.close && ws.readyState === ws.OPEN) {\n      isClosedPromise = new Promise((resolve) => {\n        const onclose = (event: WebSocket.CloseEvent) => {\n          this.logger(\n            'info',\n            `connection:disconnect() - resolving isClosedPromise ${\n              event ? 'with' : 'without'\n            } close frame`,\n            {\n              tags: ['connection'],\n              event,\n            },\n          );\n          resolve();\n        };\n\n        ws.onclose = onclose;\n        // In case we don't receive close frame websocket server in time,\n        // lets not wait for more than 1 seconds.\n        setTimeout(onclose, timeout != null ? timeout : 1000);\n      });\n\n      this.logger(\n        'info',\n        `connection:disconnect() - Manually closed connection by calling client.disconnect()`,\n        {\n          tags: ['connection'],\n        },\n      );\n\n      ws.close(\n        chatCodes.WS_CLOSED_SUCCESS,\n        'Manually closed connection by calling client.disconnect()',\n      );\n    } else {\n      this.logger(\n        'info',\n        `connection:disconnect() - ws connection doesn't exist or it is already closed.`,\n        {\n          tags: ['connection'],\n        },\n      );\n      isClosedPromise = Promise.resolve();\n    }\n\n    delete this.ws;\n\n    return isClosedPromise;\n  }\n\n  /**\n   * _connect - Connect to the WS endpoint\n   *\n   * @return {ConnectAPIResponse<ChannelType, CommandType, UserType>} Promise that completes once the first health check message is received\n   */\n  async _connect() {\n    await this.tokenManager.tokenReady();\n    this._setupConnectionPromise();\n    const wsURL = this._buildUrl();\n    this.ws = new WebSocket(wsURL);\n    this.ws.onopen = this.onopen.bind(this, this.wsID);\n    this.ws.onclose = this.onclose.bind(this, this.wsID);\n    this.ws.onerror = this.onerror.bind(this, this.wsID);\n    this.ws.onmessage = this.onmessage.bind(this, this.wsID);\n    const response = await this.connectionOpen;\n\n    if (response) {\n      this.connectionID = response.connection_id;\n      return response;\n    }\n\n    return undefined;\n  }\n\n  /**\n   * _reconnect - Retry the connection to WS endpoint\n   *\n   * @param {{ interval?: number; refreshToken?: boolean }} options Following options are available\n   *\n   * - `interval`\t{int}\t\t\tnumber of ms that function should wait before reconnecting\n   * - `refreshToken` {boolean}\treload/refresh user token be refreshed before attempting reconnection.\n   */\n  async _reconnect(\n    options: { interval?: number; refreshToken?: boolean } = {},\n  ): Promise<void> {\n    this.logger('info', 'connection:_reconnect() - Initiating the reconnect', {\n      tags: ['connection'],\n    });\n    // only allow 1 connection at the time\n    if (this.isConnecting || this.isHealthy) {\n      this.logger(\n        'info',\n        'connection:_reconnect() - Abort (1) since already connecting or healthy',\n        {\n          tags: ['connection'],\n        },\n      );\n      return;\n    }\n\n    // reconnect in case of on error or on close\n    // also reconnect if the health check cycle fails\n    let interval = options.interval;\n    if (!interval) {\n      interval = this._retryInterval();\n    }\n    // reconnect, or try again after a little while...\n    await sleep(interval);\n\n    // Check once again if by some other call to _reconnect is active or connection is\n    // already restored, then no need to proceed.\n    if (this.isConnecting || this.isHealthy) {\n      this.logger(\n        'info',\n        'connection:_reconnect() - Abort (2) since already connecting or healthy',\n        {\n          tags: ['connection'],\n        },\n      );\n      return;\n    }\n\n    this.isConnecting = true;\n\n    // cleanup the old connection\n    this.logger('info', 'connection:_reconnect() - Destroying current WS connection', {\n      tags: ['connection'],\n    });\n\n    this._destroyCurrentWSConnection();\n\n    if (options.refreshToken) {\n      await this.tokenManager.loadToken();\n    }\n\n    try {\n      const open = await this._connect();\n      if (this.recoverCallback) {\n        this.logger('info', 'connection:_reconnect() - Waiting for recoverCallBack', {\n          tags: ['connection'],\n        });\n        await this.recoverCallback(open);\n        this.logger('info', 'connection:_reconnect() - Finished recoverCallBack', {\n          tags: ['connection'],\n        });\n      }\n      this.isConnecting = false;\n      this.consecutiveFailures = 0;\n    } catch (error) {\n      this.isConnecting = false;\n      this.isHealthy = false;\n      this.consecutiveFailures += 1;\n      if (error.code === chatCodes.TOKEN_EXPIRED && !this.tokenManager.isStatic()) {\n        this.logger(\n          'info',\n          'connection:_reconnect() - WS failure due to expired token, so going to try to reload token and reconnect',\n          {\n            tags: ['connection'],\n          },\n        );\n\n        return this._reconnect({ refreshToken: true });\n      }\n\n      // reconnect on WS failures, don't reconnect if there is a code bug\n      if (error.isWSFailure) {\n        this.logger(\n          'info',\n          'connection:_reconnect() - WS failure, so going to try to reconnect',\n          {\n            tags: ['connection'],\n          },\n        );\n\n        this._reconnect();\n      }\n    }\n    this.logger('info', 'connection:_reconnect() - == END ==', {\n      tags: ['connection'],\n    });\n  }\n\n  /**\n   * onlineStatusChanged - this function is called when the browser connects or disconnects from the internet.\n   *\n   * @param {Event} event Event with type online or offline\n   *\n   */\n  onlineStatusChanged = (event: Event) => {\n    if (event.type === 'offline') {\n      // mark the connection as down\n      this.logger(\n        'info',\n        'connection:onlineStatusChanged() - Status changing to offline',\n        {\n          tags: ['connection'],\n        },\n      );\n      this._setHealth(false);\n    } else if (event.type === 'online') {\n      // retry right now...\n      // We check this.isHealthy, not sure if it's always\n      // smart to create a new WS connection if the old one is still up and running.\n      // it's possible we didn't miss any messages, so this process is just expensive and not needed.\n      this.logger(\n        'info',\n        `connection:onlineStatusChanged() - Status changing to online. isHealthy: ${this.isHealthy}`,\n        {\n          tags: ['connection'],\n        },\n      );\n      if (!this.isHealthy) {\n        this._reconnect({ interval: 10 });\n      }\n    }\n  };\n\n  onopen = (wsID: number) => {\n    if (this.wsID !== wsID) return;\n    this.logger('info', 'connection:onopen() - onopen callback', {\n      tags: ['connection'],\n      wsID,\n    });\n\n    // set healthy..\n    this._setHealth(true);\n  };\n\n  onmessage = (wsID: number, event: WebSocket.MessageEvent) => {\n    if (this.wsID !== wsID) return;\n\n    // we wait till the first message before we consider the connection open..\n    // the reason for this is that auth errors and similar errors trigger a ws.onopen and immediately\n    // after that a ws.onclose..\n    if (!this.isResolved && typeof event.data === 'string') {\n      const data = JSON.parse(event.data) as WebSocket.Data & Record<string, unknown>;\n      if (data.error != null) {\n        this.rejectPromise?.(this._errorFromWSEvent(data, false));\n        return;\n      } else {\n        this.resolvePromise?.(event);\n      }\n    }\n\n    // trigger the event..\n    this.lastEvent = new Date();\n    this.logger('info', 'connection:onmessage() - onmessage callback', {\n      tags: ['connection'],\n      event,\n      wsID,\n    });\n\n    this.messageCallback(event);\n  };\n\n  onclose = (wsID: number, event: WebSocket.CloseEvent) => {\n    this.logger('info', 'connection:onclose() - onclose callback - ' + event.code, {\n      tags: ['connection'],\n      event,\n      wsID,\n    });\n\n    if (this.wsID !== wsID) return;\n\n    if (event.code === chatCodes.WS_CLOSED_SUCCESS) {\n      // this is a permanent error raised by stream..\n      // usually caused by invalid auth details\n      const error = new Error(\n        `WS connection reject with error ${event.reason}`,\n      ) as Error & { reason?: string };\n      error.reason = event.reason;\n      this.rejectPromise?.(error);\n      this.logger(\n        'info',\n        `connection:onclose() - WS connection reject with error ${event.reason}`,\n        {\n          tags: ['connection'],\n          event,\n        },\n      );\n    } else {\n      this.consecutiveFailures += 1;\n      this.totalFailures += 1;\n      this._setHealth(false);\n\n      this.rejectPromise?.(this._errorFromWSEvent(event));\n\n      this.logger(\n        'info',\n        `connection:onclose() - WS connection closed. Calling reconnect ...`,\n        {\n          tags: ['connection'],\n          event,\n        },\n      );\n\n      // reconnect if its an abnormal failure\n      this._reconnect();\n    }\n  };\n\n  onerror = (wsID: number, event: WebSocket.ErrorEvent) => {\n    if (this.wsID !== wsID) return;\n\n    this.consecutiveFailures += 1;\n    this.totalFailures += 1;\n    this._setHealth(false);\n\n    this.rejectPromise?.(this._errorFromWSEvent(event));\n    this.logger('info', `connection:onerror() - WS connection resulted into error`, {\n      tags: ['connection'],\n      event,\n    });\n\n    this._reconnect();\n  };\n\n  /**\n   * _setHealth - Sets the connection to healthy or unhealthy.\n   * Broadcasts an event in case the connection status changed.\n   *\n   * @param {boolean} healthy boolean indicating if the connection is healthy or not\n   *\n   */\n  _setHealth = (healthy: boolean) => {\n    if (healthy && !this.isHealthy) {\n      // yes we are online:\n      this.isHealthy = true;\n      this.eventCallback({\n        type: 'connection.changed',\n        online: true,\n      });\n    }\n\n    if (!healthy && this.isHealthy) {\n      // bummer we are offline\n      this.isHealthy = false;\n      setTimeout(() => {\n        if (!this.isHealthy) {\n          this.eventCallback({\n            type: 'connection.changed',\n            online: false,\n          });\n        }\n      }, 5000);\n    }\n  };\n\n  /**\n   * _errorFromWSEvent - Creates an error object for the WS event\n   *\n   */\n  _errorFromWSEvent = (\n    event: WebSocket.CloseEvent | WebSocket.Data | WebSocket.ErrorEvent,\n    isWSFailure = true,\n  ) => {\n    let code;\n    let statusCode;\n    let message;\n    if (isCloseEvent(event)) {\n      code = event.code;\n      statusCode = 'unknown';\n      message = event.reason;\n    }\n\n    if (isErrorEvent(event)) {\n      code = event.error.code;\n      statusCode = event.error.StatusCode;\n      message = event.error.message;\n    }\n\n    // Keeping this `warn` level log, to avoid cluttering of error logs from ws failures.\n    this.logger('warn', `connection:_errorFromWSEvent() - WS failed with code ${code}`, {\n      tags: ['connection'],\n      event,\n    });\n\n    const error = new Error(\n      `WS failed with code ${code} and reason - ${message}`,\n    ) as Error & {\n      code?: string | number;\n      isWSFailure?: boolean;\n      StatusCode?: string | number;\n    };\n    error.code = code;\n    /**\n     * StatusCode does not exist on any event types but has been left\n     * as is to preserve JS functionality during the TS implementation\n     */\n    error.StatusCode = statusCode;\n    error.isWSFailure = isWSFailure;\n    return error;\n  };\n\n  /**\n   * _listenForConnectionChanges - Adds an event listener for the browser going online or offline\n   *\n   */\n  _listenForConnectionChanges = () => {\n    if (\n      typeof window !== 'undefined' &&\n      window != null &&\n      window.addEventListener != null\n    ) {\n      window.addEventListener('offline', this.onlineStatusChanged);\n      window.addEventListener('online', this.onlineStatusChanged);\n    }\n  };\n\n  _removeConnectionListeners = () => {\n    if (\n      typeof window !== 'undefined' &&\n      window != null &&\n      window.addEventListener != null\n    ) {\n      window.removeEventListener('offline', this.onlineStatusChanged);\n      window.removeEventListener('online', this.onlineStatusChanged);\n    }\n  };\n\n  /**\n   * _destroyCurrentWSConnection - Removes the current WS connection\n   *\n   */\n  _destroyCurrentWSConnection() {\n    // increment the ID, meaning we will ignore all messages from the old\n    // ws connection from now on.\n    this.wsID += 1;\n\n    try {\n      if (this.ws && this.ws.removeAllListeners) {\n        this.ws.removeAllListeners();\n      }\n\n      if (this.ws && this.ws.close) {\n        this.ws.close();\n      }\n    } catch (e) {\n      // we don't care\n    }\n  }\n\n  /**\n   * _retryInterval - A retry interval which increases after consecutive failures\n   *\n   * @return {number} Duration to wait in milliseconds\n   */\n  _retryInterval = () => {\n    // try to reconnect in 0-5 seconds (random to spread out the load from failures)\n    const max = Math.min(500 + this.consecutiveFailures * 2000, 25000);\n    const min = Math.min(Math.max(250, (this.consecutiveFailures - 1) * 2000), 25000);\n    return Math.floor(Math.random() * (max - min) + min);\n  };\n\n  /**\n   * _setupPromise - sets up the this.connectOpen promise\n   */\n  _setupConnectionPromise = () => {\n    const that = this;\n    this.isResolved = false;\n    /** a promise that is resolved once ws.open is called */\n    this.connectionOpen = new Promise<WebSocket.MessageEvent>(function (resolve, reject) {\n      that.resolvePromise = resolve;\n      that.rejectPromise = reject;\n    }).then(\n      (e) => {\n        if (e.data && typeof e.data === 'string') {\n          const data = JSON.parse(e.data) as ConnectionOpen<\n            ChannelType,\n            CommandType,\n            UserType\n          > & {\n            error?: unknown;\n          };\n          if (data && data.error != null) {\n            throw new Error(JSON.stringify(data.error));\n          }\n          return data;\n        } else {\n          return undefined;\n        }\n      },\n      (error) => {\n        throw error;\n      },\n    );\n  };\n\n  /**\n   * _startHealthCheck - Sends a message every 30s or so to see if the ws connection still works\n   *\n   */\n  _startHealthCheck() {\n    const that = this;\n    // 30 seconds is the recommended interval (messenger uses this)\n    this.healthCheckIntervalRef = setInterval(() => {\n      // send the healthcheck.., server replies with a health check event\n      const data = [\n        {\n          type: 'health.check',\n          client_id: that.clientID,\n          user_id: that.userID,\n        },\n      ];\n      // try to send on the connection\n      try {\n        that.ws?.send(JSON.stringify(data));\n      } catch (e) {\n        // error will already be detected elsewhere\n      }\n    }, that.healthCheckInterval);\n  }\n\n  /**\n   * _startMonitor - Verifies we didn't miss any events. Marks the connection as failed in case we did.\n   *\n   */\n  _startMonitor() {\n    const that = this;\n    this.monitorIntervalRef = setInterval(() => {\n      const now = new Date();\n      // means we missed a health check\n      if (\n        that.lastEvent &&\n        now.getTime() - that.lastEvent.getTime() > this.healthCheckInterval + 10 * 1000\n      ) {\n        this.logger('info', 'connection:_startMonitor - going to reconnect', {\n          tags: ['connection'],\n        });\n        that._setHealth(false);\n        that._reconnect();\n      }\n    }, that.monitorInterval);\n  }\n}\n","import jwt, { Secret, SignOptions } from 'jsonwebtoken';\nimport crypto from 'crypto';\nimport { encodeBase64, decodeBase64 } from './base64';\nimport { UnknownType } from './types';\n\n/**\n * Creates the JWT token that can be used for a UserSession\n * @method JWTUserToken\n * @memberof signing\n * @private\n * @param {Secret} apiSecret - API Secret key\n * @param {string} userId - The user_id key in the JWT payload\n * @param {UnknownType} [extraData] - Extra that should be part of the JWT token\n * @param {SignOptions} [jwtOptions] - Options that can be past to jwt.sign\n * @return {string} JWT Token\n */\nexport function JWTUserToken(\n  apiSecret: Secret,\n  userId: string,\n  extraData: UnknownType = {},\n  jwtOptions: SignOptions = {},\n) {\n  if (typeof userId !== 'string') {\n    throw new TypeError('userId should be a string');\n  }\n\n  const payload: { user_id: string } & UnknownType = {\n    user_id: userId,\n    ...extraData,\n  };\n\n  // make sure we return a clear error when jwt is shimmed (ie. browser build)\n  if (jwt == null || jwt.sign == null) {\n    throw Error(\n      `Unable to find jwt crypto, if you are getting this error is probably because you are trying to generate tokens on browser or React Native (or other environment where crypto functions are not available). Please Note: token should only be generated server-side.`,\n    );\n  }\n\n  const opts: SignOptions = Object.assign(\n    { algorithm: 'HS256', noTimestamp: true },\n    jwtOptions,\n  );\n  return jwt.sign(payload, apiSecret, opts);\n}\n\nexport function JWTServerToken(apiSecret: Secret, jwtOptions: SignOptions = {}) {\n  const payload = {\n    server: true,\n  };\n\n  const opts: SignOptions = Object.assign(\n    { algorithm: 'HS256', noTimestamp: true },\n    jwtOptions,\n  );\n  return jwt.sign(payload, apiSecret, opts);\n}\n\nexport function UserFromToken(token: string) {\n  const fragments = token.split('.');\n  if (fragments.length !== 3) {\n    return '';\n  }\n  const b64Payload = fragments[1];\n  const payload = decodeBase64(b64Payload);\n  const data = JSON.parse(payload);\n  return data.user_id as string;\n}\n\n/**\n *\n * @param {string} userId the id of the user\n * @return {string}\n */\nexport function DevToken(userId: string) {\n  return [\n    'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9', //{\"alg\": \"HS256\", \"typ\": \"JWT\"}\n    encodeBase64(JSON.stringify({ user_id: userId })),\n    'devtoken', // hardcoded signature\n  ].join('.');\n}\n\n/**\n *\n * @param {string} body the signed message\n * @param {string} secret the shared secret used to generate the signature (Stream API secret)\n * @param {string} signature the signature to validate\n * @return {boolean}\n */\nexport function CheckSignature(body: string, secret: string, signature: string) {\n  const key = Buffer.from(secret, 'ascii');\n  const hash = crypto.createHmac('sha256', key).update(body).digest('hex');\n  return hash === signature;\n}\n","export default null;","export default null;","import { Secret } from 'jsonwebtoken';\nimport { UserFromToken, JWTServerToken, JWTUserToken } from './signing';\nimport { isFunction } from './utils';\nimport { TokenOrProvider, UnknownType, UserResponse } from './types';\n\n/**\n * TokenManager\n *\n * Handles all the operations around user token.\n */\nexport class TokenManager<UserType extends UnknownType = UnknownType> {\n  loadTokenPromise: Promise<string> | null;\n  type: 'static' | 'provider';\n  secret?: Secret;\n  token?: string;\n  tokenProvider?: TokenOrProvider;\n  user?: UserResponse<UserType>;\n  /**\n   * Constructor\n   *\n   * @param {Secret} secret\n   */\n  constructor(secret?: Secret) {\n    this.loadTokenPromise = null;\n    if (secret) {\n      this.secret = secret;\n    }\n\n    this.type = 'static';\n\n    if (this.secret) {\n      this.token = JWTServerToken(this.secret);\n    }\n  }\n\n  /**\n   * Set the static string token or token provider.\n   * Token provider should return a token string or a promise which resolves to string token.\n   *\n   * @param {TokenOrProvider} tokenOrProvider\n   * @param {UserResponse<UserType>} user\n   */\n  setTokenOrProvider = async (\n    tokenOrProvider: TokenOrProvider,\n    user: UserResponse<UserType>,\n  ) => {\n    this.validateToken(tokenOrProvider, user);\n    this.user = user;\n\n    if (isFunction(tokenOrProvider)) {\n      this.tokenProvider = tokenOrProvider;\n      this.type = 'provider';\n    }\n\n    if (typeof tokenOrProvider === 'string') {\n      this.token = tokenOrProvider;\n      this.type = 'static';\n    }\n\n    if (!tokenOrProvider && this.user && this.secret) {\n      this.token = JWTUserToken(this.secret, user.id, {}, {});\n      this.type = 'static';\n    }\n\n    await this.loadToken();\n  };\n\n  /**\n   * Resets the token manager.\n   * Useful for client disconnection or switching user.\n   */\n  reset = () => {\n    this.token = undefined;\n    this.user = undefined;\n    this.loadTokenPromise = null;\n  };\n\n  // Validates the user token.\n  validateToken = (tokenOrProvider: TokenOrProvider, user: UserResponse<UserType>) => {\n    // allow empty token for anon user\n    if (user && user.anon && !tokenOrProvider) return;\n\n    // Don't allow empty token for non-server side client.\n    if (!this.secret && !tokenOrProvider) {\n      throw new Error('User token can not be empty');\n    }\n\n    if (\n      tokenOrProvider &&\n      typeof tokenOrProvider !== 'string' &&\n      !isFunction(tokenOrProvider)\n    ) {\n      throw new Error('user token should either be a string or a function');\n    }\n\n    if (typeof tokenOrProvider === 'string') {\n      // Allow empty token for anonymous users\n      if (user.anon && tokenOrProvider === '') return;\n\n      const tokenUserId = UserFromToken(tokenOrProvider);\n      if (\n        tokenOrProvider != null &&\n        (tokenUserId == null || tokenUserId === '' || tokenUserId !== user.id)\n      ) {\n        throw new Error(\n          'userToken does not have a user_id or is not matching with user.id',\n        );\n      }\n    }\n  };\n\n  // Resolves when token is ready. This function is simply to check if loadToken is in progress, in which\n  // case a function should wait.\n  tokenReady = () => this.loadTokenPromise;\n\n  // Fetches a token from tokenProvider function and sets in tokenManager.\n  // In case of static token, it will simply resolve to static token.\n  loadToken = () => {\n    // eslint-disable-next-line no-async-promise-executor\n    this.loadTokenPromise = new Promise(async (resolve) => {\n      if (this.type === 'static') {\n        return resolve(this.token);\n      }\n\n      if (this.tokenProvider && typeof this.tokenProvider !== 'string') {\n        this.token = await this.tokenProvider();\n        resolve(this.token);\n      }\n    });\n\n    return this.loadTokenPromise;\n  };\n\n  // Returns a current token\n  getToken = () => {\n    if (this.token) {\n      return this.token;\n    }\n\n    if (this.user && this.user.anon && !this.token) {\n      return this.token;\n    }\n\n    if (this.secret) {\n      return JWTServerToken(this.secret);\n    }\n\n    throw new Error(\n      `Both secret and user tokens are not set. Either client.setUser wasn't called or client.disconnect was called`,\n    );\n  };\n\n  isStatic = () => this.type === 'static';\n}\n","/* eslint no-unused-vars: \"off\" */\n/* global process */\n\nimport axios, { AxiosRequestConfig, AxiosInstance, AxiosResponse } from 'axios';\nimport https from 'https';\nimport WebSocket from 'isomorphic-ws';\n\nimport { Channel } from './channel';\nimport { ClientState } from './client_state';\nimport { StableWSConnection } from './connection';\nimport { isValidEventType } from './events';\nimport { JWTUserToken, DevToken, CheckSignature } from './signing';\nimport { TokenManager } from './token_manager';\nimport {\n  isFunction,\n  addFileToFormData,\n  chatCodes,\n  normalizeQuerySort,\n  randomId,\n} from './utils';\n\nimport {\n  APIResponse,\n  AppSettings,\n  AppSettingsAPIResponse,\n  BanUserOptions,\n  BlockList,\n  BlockListResponse,\n  ChannelAPIResponse,\n  ChannelData,\n  ChannelFilters,\n  ChannelMute,\n  ChannelOptions,\n  ChannelSort,\n  CheckPushResponse,\n  Configs,\n  ConnectAPIResponse,\n  ConnectionChangeEvent,\n  CreateChannelOptions,\n  CreateChannelResponse,\n  CreateCommandOptions,\n  CreateCommandResponse,\n  CustomPermissionOptions,\n  DeleteCommandResponse,\n  Device,\n  Event,\n  EventHandler,\n  ExportChannelRequest,\n  ExportChannelResponse,\n  ExportChannelStatusResponse,\n  FlagMessageResponse,\n  FlagUserResponse,\n  GetChannelTypeResponse,\n  GetCommandResponse,\n  ListChannelResponse,\n  ListCommandsResponse,\n  LiteralStringForUnion,\n  Logger,\n  MarkAllReadOptions,\n  Message,\n  MessageFilters,\n  MessageResponse,\n  Mute,\n  MuteUserOptions,\n  MuteUserResponse,\n  PartialUserUpdate,\n  PermissionAPIResponse,\n  PermissionsAPIResponse,\n  ReactionResponse,\n  SearchAPIResponse,\n  SearchOptions,\n  SearchPayload,\n  SendFileAPIResponse,\n  StreamChatOptions,\n  TestPushDataInput,\n  TokenOrProvider,\n  UnBanUserOptions,\n  UnknownType,\n  UpdateChannelOptions,\n  UpdateChannelResponse,\n  UpdateCommandOptions,\n  UpdateCommandResponse,\n  UpdatedMessage,\n  UpdateMessageAPIResponse,\n  UserFilters,\n  UserOptions,\n  UserResponse,\n  UserSort,\n} from './types';\n\nfunction isString(x: unknown): x is string {\n  return typeof x === 'string' || x instanceof String;\n}\n\nexport class StreamChat<\n  AttachmentType extends UnknownType = UnknownType,\n  ChannelType extends UnknownType = UnknownType,\n  CommandType extends string = LiteralStringForUnion,\n  EventType extends UnknownType = UnknownType,\n  MessageType extends UnknownType = UnknownType,\n  ReactionType extends UnknownType = UnknownType,\n  UserType extends UnknownType = UnknownType\n> {\n  _user?: UserResponse<UserType>;\n  activeChannels: {\n    [key: string]: Channel<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      EventType,\n      MessageType,\n      ReactionType,\n      UserType\n    >;\n  };\n  anonymous: boolean;\n  axiosInstance: AxiosInstance;\n  baseURL?: string;\n  browser: boolean;\n  cleaningIntervalRef?: NodeJS.Timeout;\n  clientID?: string;\n  configs: Configs<CommandType>;\n  connecting?: boolean;\n  connectionEstablishedCount?: number;\n  connectionID?: string;\n  failures?: number;\n  key: string;\n  listeners: {\n    [key: string]: Array<\n      (\n        event: Event<\n          AttachmentType,\n          ChannelType,\n          CommandType,\n          EventType,\n          MessageType,\n          ReactionType,\n          UserType\n        >,\n      ) => void\n    >;\n  };\n  logger: Logger;\n  /**\n   * When network is recovered, we re-query the active channels on client. But in single query, you can recover\n   * only 30 channels. So its not guarenteed that all the channels in activeChannels object have updated state.\n   * Thus in UI sdks, state recovery is managed by components themselves, they don't relie on js client for this.\n   *\n   * `recoverStateOnReconnect` parameter can be used in such cases, to disable state recovery within js client.\n   * When false, user/consumer of this client will need to make sure all the channels present on UI by\n   * manually calling queryChannels endpoint.\n   */\n  recoverStateOnReconnect?: boolean;\n  mutedChannels: ChannelMute<ChannelType, CommandType, UserType>[];\n  mutedUsers: Mute<UserType>[];\n  node: boolean;\n  options: StreamChatOptions;\n  secret?: string;\n  setUserPromise: ConnectAPIResponse<ChannelType, CommandType, UserType> | null;\n  state: ClientState<UserType>;\n  tokenManager: TokenManager<UserType>;\n  user?: UserResponse<UserType>;\n  userAgent?: string;\n  userID?: string;\n  wsBaseURL?: string;\n  wsConnection: StableWSConnection<ChannelType, CommandType, UserType> | null;\n  wsPromise: ConnectAPIResponse<ChannelType, CommandType, UserType> | null;\n\n  /**\n   * Initialize a client\n   * @param {string} key - the api key\n   * @param {string} [secret] - the api secret\n   * @param {StreamChatOptions} [options] - additional options, here you can pass custom options to axios instance\n   * @param {boolean} [options.browser] - enforce the client to be in browser mode\n   * @param {boolean} [options.warmUp] - default to false, if true, client will open a connection as soon as possible to speed up following requests\n   * @param {Logger} [options.Logger] - custom logger\n   * @param {number} [options.timeout] - default to 3000\n   * @param {httpsAgent} [options.httpsAgent] - custom httpsAgent, in node it's default to https.agent()\n   * @example <caption>initialize the client in user mode</caption>\n   * new StreamChat('api_key')\n   * @example <caption>initialize the client in user mode with options</caption>\n   * new StreamChat('api_key', { warmUp:true, timeout:5000 })\n   * @example <caption>secret is optional and only used in server side mode</caption>\n   * new StreamChat('api_key', \"secret\", { httpsAgent: customAgent })\n   */\n  constructor(key: string, options?: StreamChatOptions);\n  constructor(key: string, secret?: string, options?: StreamChatOptions);\n  constructor(\n    key: string,\n    secretOrOptions?: StreamChatOptions | string,\n    options?: StreamChatOptions,\n  ) {\n    // set the key\n    this.key = key;\n    this.listeners = {};\n    this.state = new ClientState<UserType>();\n    // a list of channels to hide ws events from\n    this.mutedChannels = [];\n    this.mutedUsers = [];\n\n    // set the secret\n    if (secretOrOptions && isString(secretOrOptions)) {\n      this.secret = secretOrOptions;\n    }\n\n    // set the options... and figure out defaults...\n    const inputOptions = options\n      ? options\n      : secretOrOptions && !isString(secretOrOptions)\n      ? secretOrOptions\n      : {};\n\n    this.browser =\n      typeof inputOptions.browser !== 'undefined'\n        ? inputOptions.browser\n        : typeof window !== 'undefined';\n    this.node = !this.browser;\n\n    this.options = {\n      timeout: 3000,\n      withCredentials: false, // making sure cookies are not sent\n      warmUp: false,\n      recoverStateOnReconnect: true,\n      ...inputOptions,\n    };\n\n    if (this.node) {\n      this.options.httpsAgent = new https.Agent({\n        keepAlive: true,\n        keepAliveMsecs: 3000,\n      });\n    }\n\n    this.axiosInstance = axios.create(this.options);\n\n    this.setBaseURL('https://chat-us-east-1.stream-io-api.com');\n\n    if (typeof process !== 'undefined' && process.env.STREAM_LOCAL_TEST_RUN) {\n      this.setBaseURL('http://localhost:3030');\n    }\n\n    // WS connection is initialized when setUser is called\n    this.wsConnection = null;\n    this.wsPromise = null;\n    this.setUserPromise = null;\n    // keeps a reference to all the channels that are in use\n    this.activeChannels = {};\n    // mapping between channel groups and configs\n    this.configs = {};\n    this.anonymous = false;\n\n    // If its a server-side client, then lets initialize the tokenManager, since token will be\n    // generated from secret.\n    this.tokenManager = new TokenManager(this.secret);\n\n    /**\n     * logger function should accept 3 parameters:\n     * @param logLevel string\n     * @param message   string\n     * @param extraData object\n     *\n     * e.g.,\n     * const client = new StreamChat('api_key', {}, {\n     * \t\tlogger = (logLevel, message, extraData) => {\n     * \t\t\tconsole.log(message);\n     * \t\t}\n     * })\n     *\n     * extraData contains tags array attached to log message. Tags can have one/many of following values:\n     * 1. api\n     * 2. api_request\n     * 3. api_response\n     * 4. client\n     * 5. channel\n     * 6. connection\n     * 7. event\n     *\n     * It may also contains some extra data, some examples have been mentioned below:\n     * 1. {\n     * \t\ttags: ['api', 'api_request', 'client'],\n     * \t\turl: string,\n     * \t\tpayload: object,\n     * \t\tconfig: object\n     * }\n     * 2. {\n     * \t\ttags: ['api', 'api_response', 'client'],\n     * \t\turl: string,\n     * \t\tresponse: object\n     * }\n     * 3. {\n     * \t\ttags: ['api', 'api_response', 'client'],\n     * \t\turl: string,\n     * \t\terror: object\n     * }\n     * 4. {\n     * \t\ttags: ['event', 'client'],\n     * \t\tevent: object\n     * }\n     * 5. {\n     * \t\ttags: ['channel'],\n     * \t\tchannel: object\n     * }\n     */\n    this.logger = isFunction(inputOptions.logger) ? inputOptions.logger : () => null;\n    this.recoverStateOnReconnect = this.options.recoverStateOnReconnect;\n  }\n\n  devToken(userID: string) {\n    return DevToken(userID);\n  }\n\n  getAuthType() {\n    return this.anonymous ? 'anonymous' : 'jwt';\n  }\n\n  setBaseURL(baseURL: string) {\n    this.baseURL = baseURL;\n    this.wsBaseURL = this.baseURL.replace('http', 'ws');\n  }\n\n  _setupConnection = () => {\n    this.clientID = `${this.userID}--${randomId()}`;\n    this.wsPromise = this.connect();\n    this._startCleaning();\n    return this.wsPromise;\n  };\n\n  _hasConnectionID = () => Boolean(this.connectionID);\n\n  /**\n   * setUser - Set the current user, this triggers a connection to the API\n   *\n   * @param {UserResponse<UserType>} user Data about this user. IE {name: \"john\"}\n   * @param {TokenOrProvider} userTokenOrProvider Token or provider\n   *\n   * @return {ConnectAPIResponse<ChannelType, CommandType, UserType>} Returns a promise that resolves when the connection is setup\n   */\n  setUser = (\n    user: UserResponse<UserType>,\n    userTokenOrProvider: TokenOrProvider,\n  ): ConnectAPIResponse<ChannelType, CommandType, UserType> => {\n    if (this.userID) {\n      throw new Error(\n        'Use client.disconnect() before trying to connect as a different user. setUser was called twice.',\n      );\n    }\n    // we generate the client id client side\n    this.userID = user.id;\n\n    if (!this.userID) {\n      throw new Error('The \"id\" field on the user is missing');\n    }\n\n    const setTokenPromise = this._setToken(user, userTokenOrProvider);\n    this._setUser(user);\n\n    const wsPromise = this._setupConnection();\n\n    this.anonymous = false;\n\n    this.setUserPromise = Promise.all([setTokenPromise, wsPromise])\n      .then((result) => result[1]) // We only return connection promise;\n      .catch((e) => {\n        throw e;\n      });\n\n    return this.setUserPromise;\n  };\n\n  _setToken = (user: UserResponse<UserType>, userTokenOrProvider: TokenOrProvider) =>\n    this.tokenManager.setTokenOrProvider(userTokenOrProvider, user);\n\n  _setUser(user: UserResponse<UserType>) {\n    // this one is used by the frontend\n    this.user = user;\n    // this one is actually used for requests...\n    this._user = { ...user };\n  }\n\n  /**\n\t * updateAppSettings - updates application settings\n\t *\n\t * @param {AppSettings} options App settings.\n\t * \t\tIE: {\n\t  \t\t\t\"apn_config\": {\n\t\t\t\t\t\"auth_type\": \"token\",\n\t\t\t\t\t\"auth_key\": fs.readFileSync(\n\t\t\t\t\t\t'./apn-push-auth-key.p8',\n\t\t\t\t\t\t'utf-8',\n\t\t\t\t\t),\n\t\t\t\t\t\"key_id\": \"keyid\",\n\t\t\t\t\t\"team_id\": \"teamid\", //either ALL these 3\n\t\t\t\t\t\"notification_template\": \"notification handlebars template\",\n\t\t\t\t\t\"bundle_id\": \"com.apple.your.app\",\n\t\t\t\t\t\"development\": true\n\t\t\t\t},\n\t\t\t\t\"firebase_config\": {\n\t\t\t\t\t\"server_key\": \"server key from fcm\",\n\t\t\t\t\t\"notification_template\": \"notification handlebars template\"\n\t\t\t\t\t\"data_template\": \"data handlebars template\"\n\t\t\t\t},\n\t\t\t\t\"webhook_url\": \"https://acme.com/my/awesome/webhook/\"\n\t\t\t}\n\t */\n  async updateAppSettings(options: AppSettings) {\n    if (options.apn_config?.p12_cert) {\n      options.apn_config.p12_cert = Buffer.from(options.apn_config.p12_cert).toString(\n        'base64',\n      );\n    }\n    return await this.patch<APIResponse>(this.baseURL + '/app', options);\n  }\n\n  /**\n   * getAppSettings - retrieves application settings\n   */\n  async getAppSettings() {\n    return await this.get<AppSettingsAPIResponse<CommandType>>(this.baseURL + '/app');\n  }\n\n  /**\n\t * testPushSettings - Tests the push settings for a user with a random chat message and the configured push templates\n\t *\n\t * @param {string} userID User ID. If user has no devices, it will error\n\t * @param {TestPushDataInput} [data] Overrides for push templates/message used\n\t * \t\tIE: {\n\t\t\t\t  messageID: 'id-of-message',//will error if message does not exist\n\t\t\t\t  apnTemplate: '{}', //if app doesn't have apn configured it will error\n\t\t\t\t  firebaseTemplate: '{}', //if app doesn't have firebase configured it will error\n\t\t\t\t  firebaseDataTemplate: '{}', //if app doesn't have firebase configured it will error\n\t\t\t}\n\t */\n  async testPushSettings(userID: string, data: TestPushDataInput = {}) {\n    return await this.post<CheckPushResponse>(this.baseURL + '/check_push', {\n      user_id: userID,\n      ...(data.messageID ? { message_id: data.messageID } : {}),\n      ...(data.apnTemplate ? { apn_template: data.apnTemplate } : {}),\n      ...(data.firebaseTemplate ? { firebase_template: data.firebaseTemplate } : {}),\n      ...(data.firebaseDataTemplate\n        ? { firebase_data_template: data.firebaseDataTemplate }\n        : {}),\n    });\n  }\n\n  /**\n   * disconnect - closes the WS connection\n   */\n  disconnect(timeout?: number) {\n    this.logger('info', 'client:disconnect() - Disconnecting the client', {\n      tags: ['connection', 'client'],\n    });\n    // remove the user specific fields\n    delete this.user;\n    delete this._user;\n    delete this.userID;\n\n    if (this.cleaningIntervalRef != null) {\n      clearInterval(this.cleaningIntervalRef);\n      this.cleaningIntervalRef = undefined;\n    }\n\n    this.anonymous = false;\n\n    this.connectionEstablishedCount = 0;\n\n    for (const channel of Object.values(this.activeChannels)) {\n      channel._disconnect();\n    }\n    // ensure we no longer return inactive channels\n    this.activeChannels = {};\n    // reset client state\n    this.state = new ClientState();\n    // reset token manager\n    this.tokenManager.reset();\n\n    // close the WS connection\n    if (this.wsConnection) {\n      return this.wsConnection.disconnect(timeout);\n    }\n\n    return Promise.resolve();\n  }\n\n  setAnonymousUser = () => {\n    this.anonymous = true;\n    this.userID = randomId();\n    const anonymousUser = {\n      id: this.userID,\n      anon: true,\n    } as UserResponse<UserType>;\n\n    this._setToken(anonymousUser, '');\n    this._setUser(anonymousUser);\n\n    return this._setupConnection();\n  };\n\n  /**\n   * setGuestUser - Setup a temporary guest user\n   *\n   * @param {UserResponse<UserType>} user Data about this user. IE {name: \"john\"}\n   *\n   * @return {ConnectAPIResponse<ChannelType, CommandType, UserType>} Returns a promise that resolves when the connection is setup\n   */\n  async setGuestUser(user: UserResponse<UserType>) {\n    let response: { access_token: string; user: UserResponse<UserType> } | undefined;\n    this.anonymous = true;\n    try {\n      response = await this.post<\n        APIResponse & { access_token: string; user: UserResponse<UserType> }\n      >(this.baseURL + '/guest', { user });\n    } catch (e) {\n      this.anonymous = false;\n      throw e;\n    }\n    this.anonymous = false;\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { created_at, updated_at, last_active, online, ...guestUser } = response.user;\n    return await this.setUser(guestUser as UserResponse<UserType>, response.access_token);\n  }\n\n  /**\n   * createToken - Creates a token to authenticate this user. This function is used server side.\n   * The resulting token should be passed to the client side when the users registers or logs in\n   *\n   * @param {string} userID The User ID\n   * @param {number} [exp] The expiration time for the token expressed in the number of seconds since the epoch\n   *\n   * @return {string} Returns a token\n   */\n  createToken(userID: string, exp?: number) {\n    if (this.secret == null) {\n      throw Error(`tokens can only be created server-side using the API Secret`);\n    }\n    const extra: { exp?: number } = {};\n\n    if (exp) {\n      extra.exp = exp;\n    }\n\n    return JWTUserToken(this.secret, userID, extra, {});\n  }\n\n  /**\n   * on - Listen to events on all channels and users your watching\n   *\n   * client.on('message.new', event => {console.log(\"my new message\", event, channel.state.messages)})\n   * or\n   * client.on(event => {console.log(event.type)})\n   *\n   * @param {EventHandler<AttachmentType, ChannelType, CommandType, EventType, MessageType, ReactionType, UserType> | string} callbackOrString  The event type to listen for (optional)\n   * @param {EventHandler<AttachmentType, ChannelType, CommandType, EventType, MessageType, ReactionType, UserType>} [callbackOrNothing] The callback to call\n   *\n   * @return {{ unsubscribe: () => void }} Description\n   */\n  on(\n    callback: EventHandler<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      EventType,\n      MessageType,\n      ReactionType,\n      UserType\n    >,\n  ): { unsubscribe: () => void };\n  on(\n    eventType: string,\n    callback: EventHandler<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      EventType,\n      MessageType,\n      ReactionType,\n      UserType\n    >,\n  ): { unsubscribe: () => void };\n  on(\n    callbackOrString:\n      | EventHandler<\n          AttachmentType,\n          ChannelType,\n          CommandType,\n          EventType,\n          MessageType,\n          ReactionType,\n          UserType\n        >\n      | string,\n    callbackOrNothing?: EventHandler<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      EventType,\n      MessageType,\n      ReactionType,\n      UserType\n    >,\n  ): { unsubscribe: () => void } {\n    const key = callbackOrNothing ? (callbackOrString as string) : 'all';\n    const valid = isValidEventType(key);\n    if (!valid) {\n      throw Error(`Invalid event type ${key}`);\n    }\n    const callback = callbackOrNothing\n      ? callbackOrNothing\n      : (callbackOrString as EventHandler<\n          AttachmentType,\n          ChannelType,\n          CommandType,\n          EventType,\n          MessageType,\n          ReactionType,\n          UserType\n        >);\n    if (!(key in this.listeners)) {\n      this.listeners[key] = [];\n    }\n    this.logger('info', `Attaching listener for ${key} event`, {\n      tags: ['event', 'client'],\n    });\n    this.listeners[key].push(callback);\n    return {\n      unsubscribe: () => {\n        this.listeners[key] = this.listeners[key].filter((el) => el !== callback);\n      },\n    };\n  }\n\n  /**\n   * off - Remove the event handler\n   *\n   */\n  off(\n    callback: EventHandler<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      EventType,\n      MessageType,\n      ReactionType,\n      UserType\n    >,\n  ): void;\n  off(\n    eventType: string,\n    callback: EventHandler<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      EventType,\n      MessageType,\n      ReactionType,\n      UserType\n    >,\n  ): void;\n  off(\n    callbackOrString:\n      | EventHandler<\n          AttachmentType,\n          ChannelType,\n          CommandType,\n          EventType,\n          MessageType,\n          ReactionType,\n          UserType\n        >\n      | string,\n    callbackOrNothing?: EventHandler<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      EventType,\n      MessageType,\n      ReactionType,\n      UserType\n    >,\n  ) {\n    const key = callbackOrNothing ? (callbackOrString as string) : 'all';\n    const valid = isValidEventType(key);\n    if (!valid) {\n      throw Error(`Invalid event type ${key}`);\n    }\n    const callback = callbackOrNothing\n      ? callbackOrNothing\n      : (callbackOrString as EventHandler<\n          AttachmentType,\n          ChannelType,\n          CommandType,\n          EventType,\n          MessageType,\n          ReactionType,\n          UserType\n        >);\n    if (!(key in this.listeners)) {\n      this.listeners[key] = [];\n    }\n\n    this.logger('info', `Removing listener for ${key} event`, {\n      tags: ['event', 'client'],\n    });\n    this.listeners[key] = this.listeners[key].filter((value) => value !== callback);\n  }\n\n  _logApiRequest(\n    type: string,\n    url: string,\n    data: unknown,\n    config: AxiosRequestConfig & {\n      config?: AxiosRequestConfig & { maxBodyLength?: number };\n    },\n  ) {\n    this.logger('info', `client: ${type} - Request - ${url}`, {\n      tags: ['api', 'api_request', 'client'],\n      url,\n      payload: data,\n      config,\n    });\n  }\n\n  _logApiResponse<T>(type: string, url: string, response: AxiosResponse<T>) {\n    this.logger(\n      'info',\n      `client:${type} - Response - url: ${url} > status ${response.status}`,\n      {\n        tags: ['api', 'api_response', 'client'],\n        url,\n        response,\n      },\n    );\n  }\n\n  _logApiError(type: string, url: string, error: unknown) {\n    this.logger('error', `client:${type} - Error - url: ${url}`, {\n      tags: ['api', 'api_response', 'client'],\n      url,\n      error,\n    });\n  }\n\n  doAxiosRequest = async <T>(\n    type: string,\n    url: string,\n    data?: unknown,\n    options: AxiosRequestConfig & {\n      config?: AxiosRequestConfig & { maxBodyLength?: number };\n    } = {},\n  ): Promise<T> => {\n    await this.tokenManager.tokenReady();\n    const requestConfig = this._enrichAxiosOptions(options);\n    try {\n      let response: AxiosResponse<T>;\n      this._logApiRequest(type, url, data, requestConfig);\n      switch (type) {\n        case 'get':\n          response = await this.axiosInstance.get(url, requestConfig);\n          break;\n        case 'delete':\n          response = await this.axiosInstance.delete(url, requestConfig);\n          break;\n        case 'post':\n          response = await this.axiosInstance.post(url, data, requestConfig);\n          break;\n        case 'put':\n          response = await this.axiosInstance.put(url, data, requestConfig);\n          break;\n        case 'patch':\n          response = await this.axiosInstance.patch(url, data, requestConfig);\n          break;\n        case 'options':\n          // @ts-ignore\n          response = await this.axiosInstance.options(url, requestConfig);\n          break;\n        default:\n          throw new Error('Invalid request type');\n      }\n      this._logApiResponse<T>(type, url, response);\n\n      return this.handleResponse(response);\n    } catch (e) {\n      this._logApiError(type, url, e);\n\n      if (e.response) {\n        if (\n          e.response.data.code === chatCodes.TOKEN_EXPIRED &&\n          !this.tokenManager.isStatic()\n        ) {\n          this.tokenManager.loadToken();\n          return await this.doAxiosRequest<T>(type, url, data, options);\n        }\n        return this.handleResponse(e.response);\n      } else {\n        throw e;\n      }\n    }\n  };\n\n  get<T>(url: string, params?: AxiosRequestConfig['params']) {\n    return this.doAxiosRequest<T>('get', url, null, { params });\n  }\n\n  put<T>(url: string, data?: unknown) {\n    return this.doAxiosRequest<T>('put', url, data);\n  }\n\n  post<T>(url: string, data?: unknown) {\n    return this.doAxiosRequest<T>('post', url, data);\n  }\n\n  patch<T>(url: string, data?: unknown) {\n    return this.doAxiosRequest<T>('patch', url, data);\n  }\n\n  delete<T>(url: string, params?: AxiosRequestConfig['params']) {\n    return this.doAxiosRequest<T>('delete', url, null, { params });\n  }\n\n  sendFile(\n    url: string,\n    uri: string | NodeJS.ReadableStream | Buffer | File,\n    name?: string,\n    contentType?: string,\n    user?: UserResponse<UserType>,\n  ) {\n    const data = addFileToFormData(uri, name, contentType);\n    if (user != null) data.append('user', JSON.stringify(user));\n\n    return this.doAxiosRequest<SendFileAPIResponse>('post', url, data, {\n      headers: data.getHeaders ? data.getHeaders() : {}, // node vs browser\n      config: {\n        timeout: 0,\n        maxContentLength: Infinity,\n        maxBodyLength: Infinity,\n      },\n    });\n  }\n\n  errorFromResponse<T>(response: AxiosResponse<T & { code?: number; message?: string }>) {\n    let err: Error & { code?: number; response?: AxiosResponse<T>; status?: number };\n    err = new Error(`StreamChat error HTTP code: ${response.status}`);\n    if (response.data && response.data.code) {\n      err = new Error(\n        `StreamChat error code ${response.data.code}: ${response.data.message}`,\n      );\n      err.code = response.data.code;\n    }\n    err.response = response;\n    err.status = response.status;\n    return err;\n  }\n\n  handleResponse<T>(response: AxiosResponse<T>) {\n    const data = response.data;\n    if ((response.status + '')[0] !== '2') {\n      throw this.errorFromResponse<T>(response);\n    }\n    return data;\n  }\n\n  dispatchEvent = (\n    event: Event<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      EventType,\n      MessageType,\n      ReactionType,\n      UserType\n    >,\n  ) => {\n    // client event handlers\n    this._handleClientEvent(event);\n\n    // channel event handlers\n    const cid = event.cid;\n    const channel = cid ? this.activeChannels[cid] : undefined;\n    if (channel) {\n      channel._handleChannelEvent(event);\n    }\n\n    this._callClientListeners(event);\n\n    if (channel) {\n      channel._callChannelListeners(event);\n    }\n  };\n\n  handleEvent = (messageEvent: WebSocket.MessageEvent) => {\n    // dispatch the event to the channel listeners\n    const jsonString = messageEvent.data as string;\n    const event = JSON.parse(jsonString) as Event<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      EventType,\n      MessageType,\n      ReactionType,\n      UserType\n    >;\n    event.received_at = new Date();\n    this.dispatchEvent(event);\n  };\n\n  _handleClientEvent(\n    event: Event<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      EventType,\n      MessageType,\n      ReactionType,\n      UserType\n    >,\n  ) {\n    const client = this;\n    this.logger(\n      'info',\n      `client:_handleClientEvent - Received event of type { ${event.type} }`,\n      {\n        tags: ['event', 'client'],\n        event,\n      },\n    );\n\n    // update the client.state with any changes to users\n    if (\n      event.user &&\n      (event.type === 'user.presence.changed' || event.type === 'user.updated')\n    ) {\n      if (event.user?.id === this.userID) {\n        this.user = this.user && { ...this.user, ...event.user };\n        // Updating only available properties in _user object.\n        Object.keys(event.user).forEach(function (key) {\n          if (client._user && key in client._user) {\n            // @ts-expect-error\n            client._user[key] = event.user[key];\n          }\n        });\n      }\n      client.state.updateUser(event.user);\n      client._updateUserReferences(event.user);\n    }\n    if (event.type === 'health.check' && event.me) {\n      client.user = event.me;\n      client.state.updateUser(event.me);\n      client.mutedChannels = event.me.channel_mutes;\n      client.mutedUsers = event.me.mutes;\n    }\n\n    if (event.channel && event.type === 'notification.message_new') {\n      this.configs[event.channel.type] = event.channel.config;\n    }\n\n    if (event.type === 'notification.channel_mutes_updated' && event.me?.channel_mutes) {\n      this.mutedChannels = event.me.channel_mutes;\n    }\n\n    if (event.type === 'notification.mutes_updated' && event.me?.mutes) {\n      this.mutedUsers = event.me.mutes;\n    }\n  }\n\n  _muteStatus(cid: string) {\n    let muteStatus;\n    this.mutedChannels.forEach(function (mute) {\n      if (mute.channel?.cid === cid) {\n        let muted = true;\n        if (mute.expires) {\n          muted = new Date(mute.expires).getTime() > new Date().getTime();\n        }\n        muteStatus = {\n          muted,\n          createdAt: mute.created_at ? new Date(mute.created_at) : new Date(),\n          expiresAt: mute.expires ? new Date(mute.expires) : null,\n        };\n      }\n    });\n\n    if (muteStatus) {\n      return muteStatus;\n    }\n\n    return {\n      muted: false,\n      createdAt: null,\n      expiresAt: null,\n    };\n  }\n\n  _callClientListeners = (\n    event: Event<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      EventType,\n      MessageType,\n      ReactionType,\n      UserType\n    >,\n  ) => {\n    const client = this;\n    // gather and call the listeners\n    const listeners: Array<(\n      event: Event<\n        AttachmentType,\n        ChannelType,\n        CommandType,\n        EventType,\n        MessageType,\n        ReactionType,\n        UserType\n      >,\n    ) => void> = [];\n    if (client.listeners.all) {\n      listeners.push(...client.listeners.all);\n    }\n    if (client.listeners[event.type]) {\n      listeners.push(...client.listeners[event.type]);\n    }\n\n    // call the event and send it to the listeners\n    for (const listener of listeners) {\n      listener(event);\n    }\n  };\n\n  recoverState = async () => {\n    this.logger(\n      'info',\n      `client:recoverState() - Start of recoverState with connectionID ${this.wsConnection?.connectionID}`,\n      {\n        tags: ['connection'],\n      },\n    );\n    this.connectionID = this.wsConnection?.connectionID;\n    const cids = Object.keys(this.activeChannels);\n    if (cids.length && this.recoverStateOnReconnect) {\n      this.logger(\n        'info',\n        `client:recoverState() - Start the querying of ${cids.length} channels`,\n        { tags: ['connection', 'client'] },\n      );\n\n      await this.queryChannels(\n        { cid: { $in: cids } } as ChannelFilters<ChannelType, CommandType, UserType>,\n        { last_message_at: -1 },\n        { limit: 30 },\n      );\n\n      this.logger('info', 'client:recoverState() - Querying channels finished', {\n        tags: ['connection', 'client'],\n      });\n\n      this.dispatchEvent({\n        type: 'connection.recovered',\n      } as Event<AttachmentType, ChannelType, CommandType, EventType, MessageType, ReactionType, UserType>);\n    } else {\n      this.dispatchEvent({\n        type: 'connection.recovered',\n      } as Event<AttachmentType, ChannelType, CommandType, EventType, MessageType, ReactionType, UserType>);\n    }\n\n    this.wsPromise = Promise.resolve();\n    this.setUserPromise = Promise.resolve();\n  };\n\n  /*\n\t_updateUserReferences updates the members and watchers of the currently active channels\n\tthat contain this user\n\t*/\n  _updateUserReferences(user: UserResponse<UserType>) {\n    const refMap = this.state.userChannelReferences[user.id] || {};\n    const refs = Object.keys(refMap);\n    for (const channelID of refs) {\n      const c = this.activeChannels[channelID];\n      // search the members and watchers and update as needed...\n      if (c && c.state) {\n        if (c.state.members[user.id]) {\n          c.state.members = c.state.members.setIn([user.id, 'user'], user);\n        }\n        if (c.state.watchers[user.id]) {\n          c.state.watchers = c.state.watchers.setIn([user.id, 'user'], user);\n        }\n      }\n    }\n  }\n\n  async connect() {\n    this.connecting = true;\n    const client = this;\n    this.failures = 0;\n\n    if (client.userID == null || this._user == null) {\n      throw Error('Call setUser or setAnonymousUser before starting the connection');\n    }\n\n    if (client.wsBaseURL == null) {\n      throw Error('Websocket base url not set');\n    }\n\n    if (client.clientID == null) {\n      throw Error('clientID is not set');\n    }\n\n    // The StableWSConnection handles all the reconnection logic.\n    this.wsConnection = new StableWSConnection<ChannelType, CommandType, UserType>({\n      wsBaseURL: client.wsBaseURL,\n      clientID: client.clientID,\n      userID: client.userID,\n      tokenManager: client.tokenManager,\n      user: this._user,\n      authType: this.getAuthType(),\n      userAgent: this.getUserAgent(),\n      apiKey: this.key,\n      recoverCallback: this.recoverState,\n      messageCallback: this.handleEvent,\n      eventCallback: this.dispatchEvent as (event: ConnectionChangeEvent) => void,\n      logger: this.logger,\n    });\n\n    let warmUpPromise;\n    if (this.options.warmUp) {\n      warmUpPromise = this.doAxiosRequest('options', this.baseURL + '/connect');\n    }\n    const handshake = await this.wsConnection.connect();\n    try {\n      await warmUpPromise;\n    } catch (e) {\n      this.logger('error', 'Warmup request failed', {\n        error: e,\n      });\n    }\n\n    this.connectionID = this.wsConnection.connectionID;\n    return handshake;\n  }\n\n  /**\n   * queryUsers - Query users and watch user presence\n   *\n   * @param {UserFilters<UserType>} filterConditions MongoDB style filter conditions\n   * @param {UserSort<UserType>} sort Sort options, for instance [{last_active: -1}].\n   * When using multiple fields, make sure you use array of objects to guarantee field order, for instance [{last_active: -1}, {created_at: 1}]\n   * @param {UserOptions} options Option object, {presence: true}\n   *\n   * @return {Promise<APIResponse & { users: Array<UserResponse<UserType>> }>} User Query Response\n   */\n  async queryUsers(\n    filterConditions: UserFilters<UserType>,\n    sort: UserSort<UserType> = [],\n    options: UserOptions = {},\n  ) {\n    const defaultOptions = {\n      presence: false,\n    };\n\n    // Make sure we wait for the connect promise if there is a pending one\n    await this.setUserPromise;\n\n    if (!this._hasConnectionID()) {\n      defaultOptions.presence = false;\n    }\n\n    // Return a list of users\n    const data = await this.get<\n      APIResponse & {\n        users: Array<UserResponse<UserType>>;\n      }\n    >(this.baseURL + '/users', {\n      payload: {\n        filter_conditions: filterConditions,\n        sort: normalizeQuerySort(sort),\n        ...defaultOptions,\n        ...options,\n      },\n    });\n\n    this.state.updateUsers(data.users);\n\n    return data;\n  }\n\n  /**\n   * queryChannels - Query channels\n   *\n   * @param {ChannelFilters<ChannelType, CommandType, UserType>} filterConditions object MongoDB style filters\n   * @param {ChannelSort<ChannelType>} [sort] Sort options, for instance {created_at: -1}.\n   * When using multiple fields, make sure you use array of objects to guarantee field order, for instance [{last_updated: -1}, {created_at: 1}]\n   * @param {ChannelOptions} [options] Options object\n   *\n   * @return {Promise<APIResponse & { channels: Array<ChannelAPIResponse<AttachmentType,ChannelType,CommandType,MessageType,ReactionType,UserType>>}> } search channels response\n   */\n  async queryChannels(\n    filterConditions: ChannelFilters<ChannelType, CommandType, UserType>,\n    sort: ChannelSort<ChannelType> = [],\n    options: ChannelOptions = {},\n  ) {\n    const defaultOptions: ChannelOptions = {\n      state: true,\n      watch: true,\n      presence: false,\n    };\n\n    // Make sure we wait for the connect promise if there is a pending one\n    await this.setUserPromise;\n\n    if (!this._hasConnectionID()) {\n      defaultOptions.watch = false;\n    }\n\n    // Return a list of channels\n    const payload = {\n      filter_conditions: filterConditions,\n      sort: normalizeQuerySort(sort),\n      user_details: this._user,\n      ...defaultOptions,\n      ...options,\n    };\n\n    const data = await this.get<{\n      channels: ChannelAPIResponse<\n        AttachmentType,\n        ChannelType,\n        CommandType,\n        MessageType,\n        ReactionType,\n        UserType\n      >[];\n    }>(this.baseURL + '/channels', {\n      payload,\n    });\n\n    const channels: Channel<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      EventType,\n      MessageType,\n      ReactionType,\n      UserType\n    >[] = [];\n\n    // update our cache of the configs\n    for (const channelState of data.channels) {\n      this._addChannelConfig(channelState);\n    }\n\n    for (const channelState of data.channels) {\n      const c = this.channel(channelState.channel.type, channelState.channel.id);\n      c.data = channelState.channel;\n      c.initialized = true;\n      c._initializeState(channelState);\n      channels.push(c);\n    }\n    return channels;\n  }\n\n  /**\n   * search - Query messages\n   *\n   * @param {ChannelFilters<ChannelType, CommandType, UserType>} filterConditions MongoDB style filter conditions\n   * @param {MessageFilters<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType> | string} query search query or object MongoDB style filters\n   * @param {SearchOptions} [options] Option object, {user_id: 'tommaso'}\n   *\n   * @return {Promise<SearchAPIResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>>} search messages response\n   */\n  async search(\n    filterConditions: ChannelFilters<ChannelType, CommandType, UserType>,\n    query:\n      | string\n      | MessageFilters<\n          AttachmentType,\n          ChannelType,\n          CommandType,\n          MessageType,\n          ReactionType,\n          UserType\n        >,\n    options: SearchOptions = {},\n  ) {\n    // Return a list of channels\n    const payload: SearchPayload<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      MessageType,\n      ReactionType,\n      UserType\n    > = {\n      filter_conditions: filterConditions,\n      ...options,\n    };\n    if (typeof query === 'string') {\n      payload.query = query;\n    } else if (typeof query === 'object') {\n      payload.message_filter_conditions = query;\n    } else {\n      throw Error(`Invalid type ${typeof query} for query parameter`);\n    }\n\n    // Make sure we wait for the connect promise if there is a pending one\n    await this.setUserPromise;\n\n    return await this.get<\n      SearchAPIResponse<\n        AttachmentType,\n        ChannelType,\n        CommandType,\n        MessageType,\n        ReactionType,\n        UserType\n      >\n    >(this.baseURL + '/search', {\n      payload,\n    });\n  }\n\n  /**\n   * addDevice - Adds a push device for a user.\n   *\n   * @param {string} id the device id\n   * @param {'apn' | 'firebase'} push_provider the push provider (apn or firebase)\n   * @param {string} [userID] the user id (defaults to current user)\n   *\n   */\n  async addDevice(id: string, push_provider: 'apn' | 'firebase', userID?: string) {\n    return await this.post<APIResponse>(this.baseURL + '/devices', {\n      id,\n      push_provider,\n      ...(userID != null ? { user_id: userID } : {}),\n    });\n  }\n\n  /**\n   * getDevices - Returns the devices associated with a current user\n   *\n   * @param {string} [userID] User ID. Only works on serverside\n   *\n   * @return {APIResponse & Device<UserType>[]} Array of devices\n   */\n  async getDevices(userID?: string) {\n    return await this.get<APIResponse & { devices?: Device<UserType>[] }>(\n      this.baseURL + '/devices',\n      userID ? { user_id: userID } : {},\n    );\n  }\n\n  /**\n   * removeDevice - Removes the device with the given id. Clientside users can only delete their own devices\n   *\n   * @param {string} id The device id\n   * @param {string} [userID] The user id. Only specify this for serverside requests\n   *\n   */\n  async removeDevice(id: string, userID?: string) {\n    return await this.delete<APIResponse>(this.baseURL + '/devices', {\n      id,\n      ...(userID ? { user_id: userID } : {}),\n    });\n  }\n\n  _addChannelConfig(\n    channelState: ChannelAPIResponse<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      MessageType,\n      ReactionType,\n      UserType\n    >,\n  ) {\n    this.configs[channelState.channel.type] = channelState.channel.config;\n  }\n\n  /**\n   * channel - Returns a new channel with the given type, id and custom data\n   *\n   * If you want to create a unique conversation between 2 or more users; you can leave out the ID parameter and provide the list of members.\n   * Make sure to await channel.create() or channel.watch() before accessing channel functions:\n   * ie. channel = client.channel(\"messaging\", {members: [\"tommaso\", \"thierry\"]})\n   * await channel.create() to assign an ID to channel\n   *\n   * @param {string} channelType The channel type\n   * @param {string | ChannelData<ChannelType> | null} [channelIDOrCustom]   The channel ID, you can leave this out if you want to create a conversation channel\n   * @param {object} [custom]    Custom data to attach to the channel\n   *\n   * @return {channel} The channel object, initialize it using channel.watch()\n   */\n  channel(\n    channelType: string,\n    channelID?: string | null,\n    custom?: ChannelData<ChannelType>,\n  ): Channel<\n    AttachmentType,\n    ChannelType,\n    CommandType,\n    EventType,\n    MessageType,\n    ReactionType,\n    UserType\n  >;\n  channel(\n    channelType: string,\n    custom?: ChannelData<ChannelType>,\n  ): Channel<\n    AttachmentType,\n    ChannelType,\n    CommandType,\n    EventType,\n    MessageType,\n    ReactionType,\n    UserType\n  >;\n  channel(\n    channelType: string,\n    channelIDOrCustom?: string | ChannelData<ChannelType> | null,\n    custom: ChannelData<ChannelType> = {} as ChannelData<ChannelType>,\n  ) {\n    if (!this.userID && !this._isUsingServerAuth()) {\n      throw Error('Call setUser or setAnonymousUser before creating a channel');\n    }\n\n    if (~channelType.indexOf(':')) {\n      throw Error(`Invalid channel group ${channelType}, can't contain the : character`);\n    }\n\n    // support channel(\"messaging\", null, {options})\n    // support channel(\"messaging\", undefined, {options})\n    // support channel(\"messaging\", \"\", {options})\n    if (channelIDOrCustom == null || channelIDOrCustom === '') {\n      return new Channel<\n        AttachmentType,\n        ChannelType,\n        CommandType,\n        EventType,\n        MessageType,\n        ReactionType,\n        UserType\n      >(this, channelType, undefined, custom);\n    }\n    // support channel(\"messaging\", {options})\n    if (typeof channelIDOrCustom === 'object') {\n      return new Channel<\n        AttachmentType,\n        ChannelType,\n        CommandType,\n        EventType,\n        MessageType,\n        ReactionType,\n        UserType\n      >(this, channelType, undefined, channelIDOrCustom);\n    }\n\n    if (typeof channelIDOrCustom === 'string' && ~channelIDOrCustom.indexOf(':')) {\n      throw Error(\n        `Invalid channel id ${channelIDOrCustom}, can't contain the : character`,\n      );\n    }\n\n    // only allow 1 channel object per cid\n    const cid = `${channelType}:${channelIDOrCustom}`;\n    if (cid in this.activeChannels) {\n      const channel = this.activeChannels[cid];\n      if (Object.keys(custom).length > 0) {\n        channel.data = custom;\n        channel._data = custom;\n      }\n      return channel;\n    }\n    const channel = new Channel<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      EventType,\n      MessageType,\n      ReactionType,\n      UserType\n    >(this, channelType, channelIDOrCustom, custom);\n    this.activeChannels[channel.cid] = channel;\n\n    return channel;\n  }\n\n  /**\n   * @deprecated Please use upsertUser() function instead.\n   *\n   * updateUser - Update or Create the given user object\n   *\n   * @param {UserResponse<UserType>} userObject user object, the only required field is the user id. IE {id: \"myuser\"} is valid\n   *\n   * @return {Promise<APIResponse & { users: { [key: string]: UserResponse<UserType> } }>}\n   */\n  async updateUser(userObject: UserResponse<UserType>) {\n    return await this.upsertUsers([userObject]);\n  }\n\n  /**\n   * partialUpdateUser - Update the given user object\n   *\n   * @param {PartialUserUpdate<UserType>} partialUserObject which should contain id and any of \"set\" or \"unset\" params;\n   * example: {id: \"user1\", set:{field: value}, unset:[\"field2\"]}\n   *\n   * @return {Promise<APIResponse & { users: { [key: string]: UserResponse<UserType> } }>} list of updated users\n   */\n  async partialUpdateUser(partialUserObject: PartialUserUpdate<UserType>) {\n    return await this.partialUpdateUsers([partialUserObject]);\n  }\n\n  /**\n   * upsertUsers - Batch upsert the list of users\n   *\n   * @param {UserResponse<UserType>[]} users list of users\n   *\n   * @return {Promise<APIResponse & { users: { [key: string]: UserResponse<UserType> } }>}\n   */\n  async upsertUsers(users: UserResponse<UserType>[]) {\n    const userMap: { [key: string]: UserResponse<UserType> } = {};\n    for (const userObject of users) {\n      if (!userObject.id) {\n        throw Error('User ID is required when updating a user');\n      }\n      userMap[userObject.id] = userObject;\n    }\n\n    return await this.post<\n      APIResponse & {\n        users: { [key: string]: UserResponse<UserType> };\n      }\n    >(this.baseURL + '/users', {\n      users: userMap,\n    });\n  }\n\n  /**\n   * upsertUser - Update or Create the given user object\n   *\n   * @param {UserResponse<UserType>} userObject user object, the only required field is the user id. IE {id: \"myuser\"} is valid\n   *\n   * @return {Promise<APIResponse & { users: { [key: string]: UserResponse<UserType> } }>}\n   */\n  upsertUser(userObject: UserResponse<UserType>) {\n    return this.upsertUsers([userObject]);\n  }\n\n  /**\n   * @deprecated Please use upsertUsers() function instead.\n   *\n   * updateUsers - Batch update the list of users\n   *\n   * @param {UserResponse<UserType>[]} users list of users\n   *\n   * @return {Promise<APIResponse & { users: { [key: string]: UserResponse<UserType> } }>}\n   */\n  updateUsers(users: UserResponse<UserType>[]) {\n    return this.upsertUsers(users);\n  }\n\n  /**\n   * partialUpdateUsers - Batch partial update of users\n   *\n   * @param {PartialUserUpdate<UserType>[]} users list of partial update requests\n   *\n   * @return {Promise<APIResponse & { users: { [key: string]: UserResponse<UserType> } }>}\n   */\n  async partialUpdateUsers(users: PartialUserUpdate<UserType>[]) {\n    for (const userObject of users) {\n      if (!userObject.id) {\n        throw Error('User ID is required when updating a user');\n      }\n    }\n\n    return await this.patch<\n      APIResponse & {\n        users: { [key: string]: UserResponse<UserType> };\n      }\n    >(this.baseURL + '/users', {\n      users,\n    });\n  }\n\n  async deleteUser(\n    userID: string,\n    params?: { hard_delete?: boolean; mark_messages_deleted?: boolean },\n  ) {\n    return await this.delete<\n      APIResponse & {\n        user: UserResponse<UserType>;\n      }\n    >(this.baseURL + `/users/${userID}`, params);\n  }\n\n  async reactivateUser(\n    userID: string,\n    options?: { name?: string; restore_messages?: boolean },\n  ) {\n    return await this.post<\n      APIResponse & {\n        user: UserResponse<UserType>;\n      }\n    >(this.baseURL + `/users/${userID}/reactivate`, {\n      ...options,\n    });\n  }\n\n  async deactivateUser(userID: string, options?: { mark_messages_deleted?: boolean }) {\n    return await this.post<APIResponse & { user: UserResponse<UserType> }>(\n      this.baseURL + `/users/${userID}/deactivate`,\n      {\n        ...options,\n      },\n    );\n  }\n\n  async exportUser(userID: string, options?: Record<string, string>) {\n    return await this.get<\n      APIResponse & {\n        messages: MessageResponse<\n          AttachmentType,\n          ChannelType,\n          CommandType,\n          MessageType,\n          ReactionType,\n          UserType\n        >[];\n        reactions: ReactionResponse<ReactionType, UserType>[];\n        user: UserResponse<UserType>;\n      }\n    >(this.baseURL + `/users/${userID}/export`, {\n      ...options,\n    });\n  }\n\n  /** banUser - bans a user from all channels\n   *\n   * @param {string} targetUserID\n   * @param {BanUserOptions<UserType>} [options]\n   * @returns {Promise<APIResponse>}\n   */\n  async banUser(targetUserID: string, options?: BanUserOptions<UserType>) {\n    if (options?.user_id !== undefined) {\n      options.banned_by_id = options.user_id;\n      delete options.user_id;\n      console.warn(\n        \"banUser: 'user_id' is deprecated, please consider switching to 'banned_by_id'\",\n      );\n    }\n    if (options?.user !== undefined) {\n      options.banned_by = options.user;\n      delete options.user;\n      console.warn(\n        \"banUser: 'user' is deprecated, please consider switching to 'banned_by'\",\n      );\n    }\n    return await this.post<APIResponse>(this.baseURL + '/moderation/ban', {\n      target_user_id: targetUserID,\n      ...options,\n    });\n  }\n\n  /** unbanUser - revoke global ban for a user\n   *\n   * @param {string} targetUserID\n   * @param {UnBanUserOptions} [options]\n   * @returns {Promise<APIResponse>}\n   */\n  async unbanUser(targetUserID: string, options?: UnBanUserOptions) {\n    return await this.delete<APIResponse>(this.baseURL + '/moderation/ban', {\n      target_user_id: targetUserID,\n      ...options,\n    });\n  }\n\n  /** shadowBan - shadow bans a user from all channels\n   *\n   * @param {string} targetUserID\n   * @param {BanUserOptions<UserType>} [options]\n   * @returns {Promise<APIResponse>}\n   */\n  async shadowBan(targetUserID: string, options?: BanUserOptions<UserType>) {\n    return await this.banUser(targetUserID, {\n      shadow: true,\n      ...options,\n    });\n  }\n\n  /** removeShadowBan - revoke global shadow ban for a user\n   *\n   * @param {string} targetUserID\n   * @param {UnBanUserOptions} [options]\n   * @returns {Promise<APIResponse>}\n   */\n  async removeShadowBan(targetUserID: string, options?: UnBanUserOptions) {\n    return await this.unbanUser(targetUserID, {\n      shadow: true,\n      ...options,\n    });\n  }\n\n  /** muteUser - mutes a user\n   *\n   * @param {string} targetID\n   * @param {string} [userID] Only used with serverside auth\n   * @param {MuteUserOptions<UserType>} [options]\n   * @returns {Promise<MuteUserResponse<ChannelType, CommandType, UserType>>}\n   */\n  async muteUser(\n    targetID: string,\n    userID?: string,\n    options: MuteUserOptions<UserType> = {},\n  ) {\n    return await this.post<MuteUserResponse<ChannelType, CommandType, UserType>>(\n      this.baseURL + '/moderation/mute',\n      {\n        target_id: targetID,\n        ...(userID ? { user_id: userID } : {}),\n        ...options,\n      },\n    );\n  }\n\n  /** unmuteUser - unmutes a user\n   *\n   * @param {string} targetID\n   * @param {string} [currentUserID] Only used with serverside auth\n   * @returns {Promise<APIResponse>}\n   */\n  async unmuteUser(targetID: string, currentUserID?: string) {\n    return await this.post<APIResponse>(this.baseURL + '/moderation/unmute', {\n      target_id: targetID,\n      ...(currentUserID ? { user_id: currentUserID } : {}),\n    });\n  }\n\n  /** userMuteStatus - check if a user is muted or not, can be used after setUser() is called\n   *\n   * @param {string} targetID\n   * @returns {boolean}\n   */\n  userMuteStatus(targetID: string) {\n    if (!this.user || !this.wsPromise)\n      throw new Error('Make sure to await setUser() first.');\n\n    for (let i = 0; i < this.mutedUsers.length; i += 1) {\n      if (this.mutedUsers[i].target.id === targetID) return true;\n    }\n    return false;\n  }\n\n  /**\n   * flagMessage - flag a message\n   * @param {string} targetMessageID\n   * @param {string} [options.user_id] currentUserID, only used with serverside auth\n   * @returns {Promise<APIResponse>}\n   */\n  async flagMessage(targetMessageID: string, options: { user_id?: string } = {}) {\n    return await this.post<FlagMessageResponse<UserType>>(\n      this.baseURL + '/moderation/flag',\n      {\n        target_message_id: targetMessageID,\n        ...options,\n      },\n    );\n  }\n\n  /**\n   * flagUser - flag a user\n   * @param {string} targetID\n   * @param {string} [options.user_id] currentUserID, only used with serverside auth\n   * @returns {Promise<APIResponse>}\n   */\n  async flagUser(targetID: string, options: { user_id?: string } = {}) {\n    return await this.post<FlagUserResponse<UserType>>(\n      this.baseURL + '/moderation/flag',\n      {\n        target_user_id: targetID,\n        ...options,\n      },\n    );\n  }\n\n  /**\n   * unflagMessage - unflag a message\n   * @param {string} targetMessageID\n   * @param {string} [options.user_id] currentUserID, only used with serverside auth\n   * @returns {Promise<APIResponse>}\n   */\n  async unflagMessage(targetMessageID: string, options: { user_id?: string } = {}) {\n    return await this.post<FlagMessageResponse<UserType>>(\n      this.baseURL + '/moderation/unflag',\n      {\n        target_message_id: targetMessageID,\n        ...options,\n      },\n    );\n  }\n\n  /**\n   * unflagUser - unflag a user\n   * @param {string} targetID\n   * @param {string} [options.user_id] currentUserID, only used with serverside auth\n   * @returns {Promise<APIResponse>}\n   */\n  async unflagUser(targetID: string, options: { user_id?: string } = {}) {\n    return await this.post<FlagUserResponse<UserType>>(\n      this.baseURL + '/moderation/unflag',\n      {\n        target_user_id: targetID,\n        ...options,\n      },\n    );\n  }\n\n  /**\n   * markAllRead - marks all channels for this user as read\n   * @param {MarkAllReadOptions<UserType>} [data]\n   *\n   * @return {Promise<APIResponse>}\n   */\n  async markAllRead(data: MarkAllReadOptions<UserType> = {}) {\n    await this.post<APIResponse>(this.baseURL + '/channels/read', {\n      ...data,\n    });\n  }\n\n  createCommand(data: CreateCommandOptions<CommandType>) {\n    return this.post<CreateCommandResponse<CommandType>>(\n      this.baseURL + '/commands',\n      data,\n    );\n  }\n\n  getCommand(name: string) {\n    return this.get<GetCommandResponse<CommandType>>(this.baseURL + `/commands/${name}`);\n  }\n\n  updateCommand(name: string, data: UpdateCommandOptions<CommandType>) {\n    return this.put<UpdateCommandResponse<CommandType>>(\n      this.baseURL + `/commands/${name}`,\n      data,\n    );\n  }\n\n  deleteCommand(name: string) {\n    return this.delete<DeleteCommandResponse<CommandType>>(\n      this.baseURL + `/commands/${name}`,\n    );\n  }\n\n  listCommands() {\n    return this.get<ListCommandsResponse<CommandType>>(this.baseURL + `/commands`);\n  }\n\n  createChannelType(data: CreateChannelOptions<CommandType>) {\n    const channelData = Object.assign({}, { commands: ['all'] }, data);\n    return this.post<CreateChannelResponse<CommandType>>(\n      this.baseURL + '/channeltypes',\n      channelData,\n    );\n  }\n\n  getChannelType(channelType: string) {\n    return this.get<GetChannelTypeResponse<CommandType>>(\n      this.baseURL + `/channeltypes/${channelType}`,\n    );\n  }\n\n  updateChannelType(channelType: string, data: UpdateChannelOptions<CommandType>) {\n    return this.put<UpdateChannelResponse<CommandType>>(\n      this.baseURL + `/channeltypes/${channelType}`,\n      data,\n    );\n  }\n\n  deleteChannelType(channelType: string) {\n    return this.delete<APIResponse>(this.baseURL + `/channeltypes/${channelType}`);\n  }\n\n  listChannelTypes() {\n    return this.get<ListChannelResponse<CommandType>>(this.baseURL + `/channeltypes`);\n  }\n\n  /**\n   * translateMessage - adds the translation to the message\n   *\n   * @param {string} messageId\n   * @param {string} language\n   *\n   * @return {APIResponse & MessageResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>} Response that includes the message\n   */\n  async translateMessage(messageId: string, language: string) {\n    return await this.post<\n      APIResponse &\n        MessageResponse<\n          AttachmentType,\n          ChannelType,\n          CommandType,\n          MessageType,\n          ReactionType,\n          UserType\n        >\n    >(this.baseURL + `/messages/${messageId}/translate`, {\n      language,\n    });\n  }\n\n  /**\n   * updateMessage - Update the given message\n   *\n   * @param {Omit<MessageResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>, 'mentioned_users'> & { mentioned_users?: string[] }} message object, id needs to be specified\n   * @param {string | { id: string }} [userId]\n   *\n   * @return {APIResponse & { message: MessageResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType> }} Response that includes the message\n   */\n  async updateMessage(\n    message: UpdatedMessage<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      MessageType,\n      ReactionType,\n      UserType\n    >,\n    userId?: string | { id: string },\n  ) {\n    if (!message.id) {\n      throw Error('Please specify the message id when calling updateMessage');\n    }\n\n    const clonedMessage: Message = Object.assign({}, message);\n    delete clonedMessage.id;\n\n    const reservedMessageFields: Array<\n      | 'command'\n      | 'created_at'\n      | 'html'\n      | 'latest_reactions'\n      | 'own_reactions'\n      | 'reaction_counts'\n      | 'reply_count'\n      | 'type'\n      | 'updated_at'\n      | 'user'\n    > = [\n      'command',\n      'created_at',\n      'html',\n      'latest_reactions',\n      'own_reactions',\n      'reaction_counts',\n      'reply_count',\n      'type',\n      'updated_at',\n      'user',\n    ];\n\n    reservedMessageFields.forEach(function (item) {\n      if (clonedMessage[item] != null) {\n        delete clonedMessage[item];\n      }\n    });\n\n    if (userId != null) {\n      if (isString(userId)) {\n        clonedMessage.user_id = userId;\n      } else {\n        clonedMessage.user = { id: userId.id } as UserResponse<UserType>;\n      }\n    }\n    return await this.post<\n      UpdateMessageAPIResponse<\n        AttachmentType,\n        ChannelType,\n        CommandType,\n        MessageType,\n        ReactionType,\n        UserType\n      >\n    >(this.baseURL + `/messages/${message.id}`, {\n      message: clonedMessage,\n    });\n  }\n\n  async deleteMessage(messageID: string, hardDelete?: boolean) {\n    let params = {};\n    if (hardDelete) {\n      params = { hard: true };\n    }\n    return await this.delete<\n      APIResponse & {\n        message: MessageResponse<\n          AttachmentType,\n          ChannelType,\n          CommandType,\n          MessageType,\n          ReactionType,\n          UserType\n        >;\n      }\n    >(this.baseURL + `/messages/${messageID}`, params);\n  }\n\n  async getMessage(messageID: string) {\n    return await this.get<\n      APIResponse & {\n        message: MessageResponse<\n          AttachmentType,\n          ChannelType,\n          CommandType,\n          MessageType,\n          ReactionType,\n          UserType\n        >;\n      }\n    >(this.baseURL + `/messages/${messageID}`);\n  }\n\n  /**\n   * @deprecated Please use getUserAgent instead\n   */\n  _userAgent() {\n    return this.getUserAgent();\n  }\n\n  getUserAgent() {\n    return (\n      this.userAgent ||\n      `stream-chat-javascript-client-${this.node ? 'node' : 'browser'}-${\n        process.env.PKG_VERSION\n      }`\n    );\n  }\n\n  setUserAgent(userAgent: string) {\n    this.userAgent = userAgent;\n  }\n\n  /**\n   * _isUsingServerAuth - Returns true if we're using server side auth\n   */\n  _isUsingServerAuth = () => !!this.secret;\n\n  _enrichAxiosOptions(\n    options: AxiosRequestConfig & { config?: AxiosRequestConfig } = {\n      params: {},\n      headers: {},\n      config: {},\n    },\n  ) {\n    const token = this._getToken();\n\n    return {\n      params: {\n        user_id: this.userID,\n        ...options.params,\n        api_key: this.key,\n        connection_id: this.connectionID,\n      },\n      headers: {\n        Authorization: token,\n        'stream-auth-type': this.getAuthType(),\n        'x-stream-client': this._userAgent(),\n        ...options.headers,\n      },\n      ...options.config,\n    };\n  }\n\n  _getToken() {\n    if (!this.tokenManager || this.anonymous) return null;\n\n    return this.tokenManager.getToken();\n  }\n\n  _startCleaning() {\n    const that = this;\n    if (this.cleaningIntervalRef != null) {\n      return;\n    }\n    this.cleaningIntervalRef = setInterval(() => {\n      // call clean on the channel, used for calling the stop.typing event etc.\n      for (const channel of Object.values(that.activeChannels)) {\n        channel.clean();\n      }\n    }, 500);\n  }\n\n  verifyWebhook(requestBody: string, xSignature: string) {\n    return !!this.secret && CheckSignature(requestBody, this.secret, xSignature);\n  }\n\n  /** getPermission - gets the definition for a permission\n   *\n   * @param {string} name\n   * @returns {Promise<PermissionAPIResponse>}\n   */\n  getPermission(name: string) {\n    return this.get<PermissionAPIResponse>(`${this.baseURL}/custom_permission/${name}`);\n  }\n\n  /** createPermission - creates a custom permission\n   *\n   * @param {CustomPermissionOptions} permissionData the permission data\n   * @returns {Promise<APIResponse>}\n   */\n  createPermission(permissionData: CustomPermissionOptions) {\n    return this.post<APIResponse>(`${this.baseURL}/custom_permission`, {\n      ...permissionData,\n    });\n  }\n\n  /** updatePermission - updates an existing custom permission\n   *\n   * @param {string} name\n   * @param {CustomPermissionOptions} permissionData the permission data\n   * @returns {Promise<APIResponse>}\n   */\n  updatePermission(name: string, permissionData: CustomPermissionOptions) {\n    return this.post<APIResponse>(`${this.baseURL}/custom_permission/${name}`, {\n      ...permissionData,\n    });\n  }\n\n  /** deletePermission - deletes a custom permission\n   *\n   * @param {string} name\n   * @returns {Promise<APIResponse>}\n   */\n  deletePermission(name: string) {\n    return this.delete<APIResponse>(`${this.baseURL}/custom_permission/${name}`);\n  }\n\n  /** listPermissions - returns the list of custom permissions for this application\n   *\n   * @returns {Promise<APIResponse>}\n   */\n  listPermissions() {\n    return this.get<PermissionsAPIResponse>(`${this.baseURL}/custom_permission`);\n  }\n\n  /** createRole - creates a custom role\n   *\n   * @param {string} name the new role name\n   * @returns {Promise<APIResponse>}\n   */\n  createRole(name: string) {\n    return this.post<APIResponse>(`${this.baseURL}/custom_role`, { name });\n  }\n\n  /** listRoles - returns the list of custom roles for this application\n   *\n   * @returns {Promise<APIResponse>}\n   */\n  listRoles() {\n    return this.get<APIResponse>(`${this.baseURL}/custom_role`);\n  }\n\n  /** deleteRole - deletes a custom role\n   *\n   * @param {string} name the role name\n   * @returns {Promise<APIResponse>}\n   */\n  deleteRole(name: string) {\n    return this.delete<APIResponse>(`${this.baseURL}/custom_role/${name}`);\n  }\n\n  /** sync - returns all events that happened for a list of channels since last sync\n   * @param {string[]} channel_cids list of channel CIDs\n   * @param {string} last_sync_at last time the user was online and in sync. RFC3339 ie. \"2020-05-06T15:05:01.207Z\"\n   */\n  sync(channel_cids: string[], last_sync_at: string) {\n    return this.post<\n      APIResponse & {\n        events: Event<\n          AttachmentType,\n          ChannelType,\n          CommandType,\n          EventType,\n          MessageType,\n          ReactionType,\n          UserType\n        >[];\n      }\n    >(`${this.baseURL}/sync`, {\n      channel_cids,\n      last_sync_at,\n    });\n  }\n\n  createBlockList(blockList: BlockList) {\n    return this.post<APIResponse>(`${this.baseURL}/blocklists`, blockList);\n  }\n\n  listBlockLists() {\n    return this.get<APIResponse & { blocklists: BlockListResponse[] }>(\n      `${this.baseURL}/blocklists`,\n    );\n  }\n\n  getBlockList(name: string) {\n    return this.get<APIResponse & { blocklist: BlockListResponse }>(\n      `${this.baseURL}/blocklists/${name}`,\n    );\n  }\n\n  updateBlockList(name: string, data: { words: string[] }) {\n    return this.put<APIResponse>(`${this.baseURL}/blocklists/${name}`, data);\n  }\n\n  deleteBlockList(name: string) {\n    return this.delete<APIResponse>(`${this.baseURL}/blocklists/${name}`);\n  }\n\n  exportChannels(request: Array<ExportChannelRequest>) {\n    const payload = {\n      channels: request,\n    };\n    return this.post<APIResponse & ExportChannelResponse>(\n      `${this.baseURL}/export_channels`,\n      payload,\n    );\n  }\n\n  exportChannel(request: ExportChannelRequest) {\n    return this.exportChannels([request]);\n  }\n\n  getExportChannelStatus(id: string) {\n    return this.get<APIResponse & ExportChannelStatusResponse>(\n      `${this.baseURL}/export_channels/${id}`,\n    );\n  }\n}\n","export default null;","import { PermissionObject } from './types';\n\ntype RequiredPermissionObject = Required<PermissionObject>;\n\nexport const Allow = 'Allow';\nexport const Deny = 'Deny';\nexport const AnyResource = ['*'];\nexport const AnyRole = ['*'];\nexport const MaxPriority = 999;\nexport const MinPriority = 1;\n\n// deprecated permission object class, you should use the new permission system v2 and use permissions\n// defined in BuiltinPermissions to configure your channel types\n\nexport class Permission {\n  name: RequiredPermissionObject['name'];\n  action: RequiredPermissionObject['action'];\n  owner: RequiredPermissionObject['owner'];\n  priority: RequiredPermissionObject['priority'];\n  resources: RequiredPermissionObject['resources'];\n  roles: RequiredPermissionObject['roles'];\n  constructor(\n    name: string,\n    priority: number,\n    resources = AnyResource,\n    roles = AnyRole,\n    owner = false,\n    action: RequiredPermissionObject['action'] = Allow,\n  ) {\n    this.name = name;\n    this.action = action;\n    this.owner = owner;\n    this.priority = priority;\n    this.resources = resources;\n    this.roles = roles;\n  }\n}\n\n// deprecated\nexport const AllowAll = new Permission(\n  'Allow all',\n  MaxPriority,\n  AnyResource,\n  AnyRole,\n  false,\n  Allow,\n);\n\n// deprecated\nexport const DenyAll = new Permission(\n  'Deny all',\n  MinPriority,\n  AnyResource,\n  AnyRole,\n  false,\n  Deny,\n);\n\nexport const BuiltinRoles = {\n  Admin: 'admin',\n  Anonymous: 'anonymous',\n  ChannelMember: 'channel_member',\n  ChannelModerator: 'channel_moderator',\n  Guest: 'guest',\n  User: 'user',\n};\n\nexport const BuiltinPermissions = {\n  AddLinks: 'Add Links',\n  BanUser: 'Ban User',\n  CreateChannel: 'Create Channel',\n  CreateMessage: 'Create Message',\n  CreateReaction: 'Create Reaction',\n  DeleteAnyAttachment: 'Delete Any Attachment',\n  DeleteAnyChannel: 'Delete Any Channel',\n  DeleteAnyMessage: 'Delete Any Message',\n  DeleteAnyReaction: 'Delete Any Reaction',\n  DeleteOwnAttachment: 'Delete Own Attachment',\n  DeleteOwnChannel: 'Delete Own Channel',\n  DeleteOwnMessage: 'Delete Own Message',\n  DeleteOwnReaction: 'Delete Own Reaction',\n  ReadAnyChannel: 'Read Any Channel',\n  ReadOwnChannel: 'Read Own Channel',\n  RunMessageAction: 'Run Message Action',\n  UpdateAnyChannel: 'Update Any Channel',\n  UpdateAnyMessage: 'Update Any Message',\n  UpdateMembersAnyChannel: 'Update Members Any Channel',\n  UpdateMembersOwnChannel: 'Update Members Own Channel',\n  UpdateOwnChannel: 'Update Own Channel',\n  UpdateOwnMessage: 'Update Own Message',\n  UploadAttachment: 'Upload Attachment',\n  UseFrozenChannel: 'Send messages and reactions to frozen channels',\n};\n"],"names":["uint8","tmp","len","length","extraBytes","parts","maxChunkLength","i","len2","push","encodeChunk","lookup","join","revLookup","code","charCodeAt","start","end","num","output","isString","arrayOrString","isMapStringCallback","callback","encodeBase64","data","fromByteArray","Uint8Array","res","k","charAt","mappedValue","map","char","decodeBase64","s","x","a","e","w","String","fromCharCode","L","b","l","r","_extends","module","Object","assign","target","arguments","source","key","prototype","hasOwnProperty","call","apply","this","_typeof","obj","Symbol","iterator","constructor","excluded","sourceKeys","keys","indexOf","objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","arr","arr2","Array","isArray","arrayLikeToArray","iter","from","o","minLen","n","toString","slice","name","test","TypeError","arrayWithoutHoles","iterableToArray","unsupportedIterableToArray","nonIterableSpread","runtime","exports","undefined","Op","hasOwn","$Symbol","iteratorSymbol","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","value","defineProperty","enumerable","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","_invoke","state","GenStateSuspendedStart","method","arg","GenStateExecuting","Error","GenStateCompleted","doneResult","delegate","delegateResult","maybeInvokeDelegate","ContinueSentinel","sent","_sent","dispatchException","abrupt","record","tryCatch","type","done","GenStateSuspendedYield","makeInvokeMethod","fn","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","AsyncIterator","PromiseImpl","invoke","resolve","reject","result","__await","then","unwrapped","error","previousPromise","callInvokeWithMethodAndArg","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","displayName","isGeneratorFunction","genFun","ctor","mark","setPrototypeOf","__proto__","awrap","async","Promise","object","reverse","pop","skipTempReset","prev","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","regeneratorRuntime","accidentalStrictMode","Function","asyncGeneratorStep","gen","_next","_throw","args","instance","Constructor","_defineProperties","props","descriptor","protoProps","staticProps","thisArg","val","isUndefined","isObject","isPlainObject","isFunction","isArrayBuffer","isBuffer","isFormData","FormData","isArrayBufferView","ArrayBuffer","isView","buffer","isNumber","isDate","isFile","isBlob","isStream","pipe","isURLSearchParams","URLSearchParams","isStandardBrowserEnv","navigator","product","window","document","merge","assignValue","extend","bind","trim","str","replace","stripBOM","content","encode","encodeURIComponent","url","params","paramsSerializer","serializedParams","utils","v","toISOString","JSON","stringify","hashmarkIndex","InterceptorManager","handlers","use","fulfilled","rejected","eject","id","h","headers","fns","__CANCEL__","normalizedName","toUpperCase","message","config","request","response","isAxiosError","toJSON","description","number","fileName","lineNumber","columnNumber","stack","enhanceError","write","expires","path","domain","secure","cookie","Date","toGMTString","read","match","RegExp","decodeURIComponent","remove","now","ignoreDuplicateOf","originURL","msie","userAgent","urlParsingNode","createElement","resolveURL","href","setAttribute","protocol","host","search","hash","hostname","port","pathname","location","requestURL","parsed","requestData","requestHeaders","XMLHttpRequest","auth","username","password","unescape","Authorization","btoa","baseURL","requestedURL","fullPath","relativeURL","combineURLs","open","buildURL","timeout","onreadystatechange","readyState","status","responseURL","responseHeaders","split","line","substr","toLowerCase","concat","parseHeaders","getAllResponseHeaders","responseType","responseText","statusText","validateStatus","createError","settle","onabort","onerror","ontimeout","timeoutErrorMessage","xsrfValue","withCredentials","isURLSameOrigin","xsrfCookieName","cookies","xsrfHeaderName","setRequestHeader","onDownloadProgress","addEventListener","onUploadProgress","upload","cancelToken","promise","cancel","abort","send","DEFAULT_CONTENT_TYPE","Content-Type","setContentTypeIfUnset","adapter","defaults","process","require$$0","transformRequest","normalizeHeaderName","transformResponse","parse","maxContentLength","maxBodyLength","common","Accept","throwIfCancellationRequested","throwIfRequested","transformData","reason","isCancel","config1","config2","valueFromConfig2Keys","mergeDeepPropertiesKeys","defaultToConfig2Keys","directMergeKeys","getMergedValue","mergeDeepProperties","prop","axiosKeys","otherKeys","filter","Axios","instanceConfig","interceptors","mergeConfig","chain","dispatchRequest","interceptor","unshift","shift","getUri","Cancel","CancelToken","executor","resolvePromise","token","c","createInstance","defaultConfig","axios","require$$1","require$$2","all","promises","spread","Immutable","immutableInit","REACT_ELEMENT_TYPE","for","globalConfig","use_static","instantiateEmptyObject","addPropertyTo","methodName","banProperty","ImmutableError","Boolean","immutabilityTag","isImmutable","getOwnPropertyDescriptor","isEqual","isMergableObject","mutatingObjectMethods","mutatingArrayMethods","nonMutatingArrayMethods","mutatingDateMethods","makeImmutable","bannedMethods","index","freeze","makeMethodReturnImmutable","currentMethod","arraySet","idx","deep","mode","mutable","asMutableArray","makeImmutableArray","immutableEmptyArray","arraySetIn","pth","head","newValue","tail","thisHead","setIn","nextHead","isFinite","objectSetIn","immutableEmptyObject","array","flatMap","asObject","update","updateIn","getIn","asMutableDate","getTime","iteratorResult","without","keysToRemoveArray","el","makeImmutableObject","opts","asDeepMutable","pair","asMutable","quickCopy","src","dest","other","receivedArray","merger","addToResult","currentObj","otherObj","immutableValue","mergerResult","currentValue","clearDroppedKeys","otherFromArray","objectReplace","fnObject","fnArray","fnDate","objectSet","property","updater","restArgs","initialVal","set","getInPath","defaultValue","asMutableObject","instantiatePlainObject","options","stackRemaining","$$typeof","isReactElement","File","isFileObject","Blob","isBlobObject","isError","isPromise","date","clone","toStatic","toStaticObjectOrArray","static","_arr","_n","_d","_e","_s","_i","arrayWithHoles","iterableToArrayLimit","nonIterableRest","ChannelState","channel","msgArray","msg","removed","_channel","watcher_count","typing","messages","threads","mutedUsers","watchers","members","membership","unreadCount","last_message_at","newMessage","timestampChanged","addMessagesSorted","__html","html","created_at","updated_at","newMessages","initializing","messageToImmutable","parentID","parent_id","show_in_channel","_addToMessageList","thread","threadMessages","reaction","messageWithReaction","_addReactionToMessage","message_id","_removeReactionFromMessage","getClient","userID","user","_reaction$user","old","filterReaction","item","_reaction$user2","messageArr","messageTime","left","middle","right","Math","floor","splice","messageToRemove","isRemoved","removeMessageFromArray","filteredMessages","entries","lastEvent","received_at","dispatchEvent","cid","EVENT_MAP","IS_VALID_EVENT_MAP_TYPE","isValidEventType","eventType","logChatPromiseExecution","console","warn","sleep","m","setTimeout","chatCodes","TOKEN_EXPIRED","WS_CLOSED_SUCCESS","addFileToFormData","uri","contentType","readable","_read","isFileWebAPI","append","normalizeQuerySort","sort","sortFields","field","direction","randomId","random","Channel","client","watch","presence","_this","query","event","listeners","listener","_client","_data","initialized","lastTypingEvent","isTyping","disconnected","configs","post","_channelURL","sendMessageResponse","sendFile","delete","_checkInitialized","payload","filter_conditions","message_filter_conditions","wsPromise","get","filterConditions","messageID","user_id","body","reactionType","channelData","updateMessage","coolDownInterval","cooldown","accept_invite","reject_invite","add_members","add_moderators","invites","remove_members","demote_moderators","channel_cid","_muteStatus","formData","form_data","getConfig","_this$getConfig","typing_events","diff","lastKeyStroke","sendEvent","_this$getConfig2","min","lastMessage","max","messageSlice","_this$getConfig3","read_events","stopTyping","clean","defaultOptions","_hasConnectionID","combined","logger","tags","messageIds","ids","last_read","shadowed","silent","userMuteStatus","lastRead","count","_countMessageAsUnread","mentioned_users","_message$mentioned_us","find","u","queryURL","activeChannels","_addChannelConfig","_initializeState","targetUserID","banUser","userId","clearHistory","clear_history","unbanUser","shadowBan","removeShadowBan","callbackOrString","callbackOrNothing","_event$user","_event$user2","_event$user3","_this$getClient$user","_event$user5","_event$user6","hard_delete","removeMessage","addMessageSorted","ownMessage","_this$getClient$user2","clearMessages","member","_event$member","_event$member2","_event$user8","addReaction","removeReaction","_isUsingServerAuth","updateUserReference","watcher","parsedRead","_this$getClient$user3","unread_messages","ClientState","users","userChannelReferences","updateUser","channelID","ws","WebSocket","MozWebSocket","global","isCloseEvent","isErrorEvent","StableWSConnection","apiKey","authType","clientID","eventCallback","messageCallback","recoverCallback","tokenManager","wsBaseURL","user_details","user_token","getToken","server_determines_connection_id","qs","_setHealth","isHealthy","_reconnect","interval","wsID","isResolved","rejectPromise","_errorFromWSEvent","consecutiveFailures","totalFailures","healthy","online","statusCode","isWSFailure","StatusCode","onlineStatusChanged","removeEventListener","that","connectionOpen","isConnecting","healthCheckInterval","monitorInterval","_listenForConnectionChanges","_connect","healthCheck","_startMonitor","_startHealthCheck","_context","isStatic","refreshToken","isClosedPromise","healthCheckIntervalRef","clearInterval","monitorIntervalRef","_removeConnectionListeners","removeAllListeners","close","OPEN","onclose","_this2","tokenReady","_setupConnectionPromise","wsURL","_buildUrl","onopen","onmessage","connectionID","connection_id","_retryInterval","_destroyCurrentWSConnection","loadToken","_context3","setInterval","client_id","_this3","JWTUserToken","apiSecret","extraData","JWTServerToken","jwtOptions","server","algorithm","noTimestamp","sign","UserFromToken","fragments","b64Payload","DevToken","CheckSignature","secret","signature","Buffer","createHmac","digest","TokenManager","tokenOrProvider","validateToken","tokenProvider","loadTokenPromise","anon","tokenUserId","StreamChat","secretOrOptions","connect","_startCleaning","userTokenOrProvider","setTokenPromise","_setToken","_setUser","_setupConnection","anonymous","setUserPromise","setTokenOrProvider","anonymousUser","requestConfig","_enrichAxiosOptions","_logApiRequest","axiosInstance","put","patch","_logApiResponse","handleResponse","_logApiError","doAxiosRequest","_handleClientEvent","_handleChannelEvent","_callClientListeners","_callChannelListeners","messageEvent","jsonString","wsConnection","_this$wsConnection","_this$wsConnection2","cids","recoverStateOnReconnect","queryChannels","$in","limit","mutedChannels","inputOptions","browser","node","warmUp","httpsAgent","Agent","keepAlive","keepAliveMsecs","setBaseURL","env","STREAM_LOCAL_TEST_RUN","_user","apn_config","_options$apn_config","p12_cert","apnTemplate","apn_template","firebaseTemplate","firebase_template","firebaseDataTemplate","firebase_data_template","cleaningIntervalRef","connectionEstablishedCount","_disconnect","disconnect","last_active","guestUser","setUser","access_token","exp","extra","unsubscribe","getHeaders","Infinity","errorFromResponse","_updateUserReferences","me","channel_mutes","mutes","_event$me","_event$me2","muteStatus","mute","muted","createdAt","expiresAt","refMap","connecting","failures","getAuthType","getUserAgent","recoverState","handleEvent","warmUpPromise","handshake","updateUsers","channels","channelState","push_provider","channelType","channelIDOrCustom","custom","userObject","upsertUsers","partialUserObject","partialUpdateUsers","userMap","banned_by_id","banned_by","target_user_id","shadow","targetID","target_id","currentUserID","targetMessageID","target_message_id","commands","messageId","language","clonedMessage","hardDelete","hard","_getToken","api_key","_userAgent","requestBody","xSignature","permissionData","channel_cids","last_sync_at","blockList","exportChannels","Allow","Deny","AnyResource","AnyRole","Permission","priority","resources","roles","owner","action","AllowAll","DenyAll","AddLinks","BanUser","CreateChannel","CreateMessage","CreateReaction","DeleteAnyAttachment","DeleteAnyChannel","DeleteAnyMessage","DeleteAnyReaction","DeleteOwnAttachment","DeleteOwnChannel","DeleteOwnMessage","DeleteOwnReaction","ReadAnyChannel","ReadOwnChannel","RunMessageAction","UpdateAnyChannel","UpdateAnyMessage","UpdateMembersAnyChannel","UpdateMembersOwnChannel","UpdateOwnChannel","UpdateOwnMessage","UploadAttachment","UseFrozenChannel","Admin","Anonymous","ChannelMember","ChannelModerator","Guest","User"],"mappings":"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"}